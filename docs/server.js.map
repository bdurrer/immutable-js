{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","../dist/immutable.js","../node_modules/@babel/runtime/helpers/inheritsLoose.js","../node_modules/history/cjs/history.js","../node_modules/history/cjs/history.min.js","../node_modules/history/index.js","../node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js","../node_modules/object-assign/index.js","../node_modules/path-to-regexp/index.js","../node_modules/path-to-regexp/node_modules/isarray/index.js","../node_modules/process/browser.js","../node_modules/prop-types/checkPropTypes.js","../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/prop-types/factoryWithTypeCheckers.js","../node_modules/prop-types/index.js","../node_modules/prop-types/lib/ReactPropTypesSecret.js","../node_modules/react-dom/cjs/react-dom-server.browser.development.js","../node_modules/react-dom/cjs/react-dom-server.browser.production.min.js","../node_modules/react-dom/server.browser.js","../node_modules/react-is/cjs/react-is.development.js","../node_modules/react-is/cjs/react-is.production.min.js","../node_modules/react-is/index.js","../node_modules/react-router-dom/cjs/react-router-dom.js","../node_modules/react-router-dom/cjs/react-router-dom.min.js","../node_modules/react-router-dom/index.js","../node_modules/react-router-dom/node_modules/prop-types/checkPropTypes.js","../node_modules/react-router-dom/node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/react-router-dom/node_modules/prop-types/factoryWithTypeCheckers.js","../node_modules/react-router-dom/node_modules/prop-types/index.js","../node_modules/react-router-prop-types/index.js","../node_modules/react-router/cjs/react-router.js","../node_modules/react-router/cjs/react-router.min.js","../node_modules/react-router/index.js","../node_modules/react-router/node_modules/mini-create-react-context/dist/cjs/index.js","../node_modules/react/cjs/react.development.js","../node_modules/react/cjs/react.production.min.js","../node_modules/react/index.js","../node_modules/resolve-pathname/cjs/resolve-pathname.js","../node_modules/resolve-pathname/cjs/resolve-pathname.min.js","../node_modules/resolve-pathname/index.js","../node_modules/tiny-invariant/dist/tiny-invariant.cjs.js","../node_modules/tiny-warning/dist/tiny-warning.cjs.js","../node_modules/value-equal/cjs/value-equal.js","../node_modules/value-equal/cjs/value-equal.min.js","../node_modules/value-equal/index.js","../pages/lib/TypeKind.js","../pages/lib/collectMemberGroups.js","../pages/lib/runkit-embed.js","../pages/src/docs/src/Defs.js","../pages/src/docs/src/DocHeader.js","../pages/src/docs/src/DocOverview.js","../pages/src/docs/src/DocSearch.js","../pages/src/docs/src/MarkDown.js","../pages/src/docs/src/SideBar.js","../pages/src/docs/src/TypeDocumentation.js","../pages/src/docs/src/components/Disclaimer.js","../pages/src/docs/src/components/FunctionDoc.js","../pages/src/docs/src/components/MemberDoc.js","../pages/src/docs/src/components/TypeDoc.js","../pages/src/docs/src/constants.js","../pages/src/docs/src/global.js","../pages/src/docs/src/index.js","../pages/src/docs/src/isMobile.js","../pages/src/docs/src/server.js","../pages/src/src/Logo.js","../pages/src/src/SVGSet.js"],"names":[],"mappings":"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AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACnzzBA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACtKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7xEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7EA;AACA;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAM,QAAQ,GAAG;AACf,EAAA,GAAG,EAAE,CADU;AAGf,EAAA,OAAO,EAAE,CAHM;AAIf,EAAA,MAAM,EAAE,CAJO;AAKf,EAAA,MAAM,EAAE,CALO;AAMf,EAAA,MAAM,EAAE,CANO;AAOf,EAAA,KAAK,EAAE,CAPQ;AAQf,EAAA,KAAK,EAAE,CARQ;AASf,EAAA,QAAQ,EAAE,CATK;AAWf,EAAA,KAAK,EAAE,CAXQ;AAYf,EAAA,IAAI,EAAE,CAZS;AAcf,EAAA,IAAI,EAAE,EAdS;AAef,EAAA,SAAS,EAAE,EAfI;AAgBf,EA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","file":"server.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/**\n * MIT License\n *\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (factory((global.Immutable = {})));\n}(this, (function (exports) { 'use strict';\n\n  // Used for setting prototype methods that IE8 chokes on.\n  var DELETE = 'delete';\n\n  // Constants describing the size of trie nodes.\n  var SHIFT = 5; // Resulted in best performance after ______?\n  var SIZE = 1 << SHIFT;\n  var MASK = SIZE - 1;\n\n  // A consistent shared value representing \"not set\" which equals nothing other\n  // than itself, and nothing that could be provided externally.\n  var NOT_SET = {};\n\n  // Boolean references, Rough equivalent of `bool &`.\n  function MakeRef() {\n    return { value: false };\n  }\n\n  function SetRef(ref) {\n    if (ref) {\n      ref.value = true;\n    }\n  }\n\n  // A function which returns a value representing an \"owner\" for transient writes\n  // to tries. The return value will only ever equal itself, and will not equal\n  // the return of any subsequent call of this function.\n  function OwnerID() {}\n\n  function ensureSize(iter) {\n    if (iter.size === undefined) {\n      iter.size = iter.__iterate(returnTrue);\n    }\n    return iter.size;\n  }\n\n  function wrapIndex(iter, index) {\n    // This implements \"is array index\" which the ECMAString spec defines as:\n    //\n    //     A String property name P is an array index if and only if\n    //     ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal\n    //     to 2^32−1.\n    //\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-array-exotic-objects\n    if (typeof index !== 'number') {\n      var uint32Index = index >>> 0; // N >>> 0 is shorthand for ToUint32\n      if ('' + uint32Index !== index || uint32Index === 4294967295) {\n        return NaN;\n      }\n      index = uint32Index;\n    }\n    return index < 0 ? ensureSize(iter) + index : index;\n  }\n\n  function returnTrue() {\n    return true;\n  }\n\n  function wholeSlice(begin, end, size) {\n    return (\n      ((begin === 0 && !isNeg(begin)) ||\n        (size !== undefined && begin <= -size)) &&\n      (end === undefined || (size !== undefined && end >= size))\n    );\n  }\n\n  function resolveBegin(begin, size) {\n    return resolveIndex(begin, size, 0);\n  }\n\n  function resolveEnd(end, size) {\n    return resolveIndex(end, size, size);\n  }\n\n  function resolveIndex(index, size, defaultIndex) {\n    // Sanitize indices using this shorthand for ToInt32(argument)\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n    return index === undefined\n      ? defaultIndex\n      : isNeg(index)\n      ? size === Infinity\n        ? size\n        : Math.max(0, size + index) | 0\n      : size === undefined || size === index\n      ? index\n      : Math.min(size, index) | 0;\n  }\n\n  function isNeg(value) {\n    // Account for -0 which is negative, but not less than 0.\n    return value < 0 || (value === 0 && 1 / value === -Infinity);\n  }\n\n  // Note: value is unchanged to not break immutable-devtools.\n  var IS_COLLECTION_SYMBOL = '@@__IMMUTABLE_ITERABLE__@@';\n\n  function isCollection(maybeCollection) {\n    return Boolean(maybeCollection && maybeCollection[IS_COLLECTION_SYMBOL]);\n  }\n\n  var IS_KEYED_SYMBOL = '@@__IMMUTABLE_KEYED__@@';\n\n  function isKeyed(maybeKeyed) {\n    return Boolean(maybeKeyed && maybeKeyed[IS_KEYED_SYMBOL]);\n  }\n\n  var IS_INDEXED_SYMBOL = '@@__IMMUTABLE_INDEXED__@@';\n\n  function isIndexed(maybeIndexed) {\n    return Boolean(maybeIndexed && maybeIndexed[IS_INDEXED_SYMBOL]);\n  }\n\n  function isAssociative(maybeAssociative) {\n    return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);\n  }\n\n  var Collection = function Collection(value) {\n    return isCollection(value) ? value : Seq(value);\n  };\n\n  var KeyedCollection = /*@__PURE__*/(function (Collection) {\n    function KeyedCollection(value) {\n      return isKeyed(value) ? value : KeyedSeq(value);\n    }\n\n    if ( Collection ) KeyedCollection.__proto__ = Collection;\n    KeyedCollection.prototype = Object.create( Collection && Collection.prototype );\n    KeyedCollection.prototype.constructor = KeyedCollection;\n\n    return KeyedCollection;\n  }(Collection));\n\n  var IndexedCollection = /*@__PURE__*/(function (Collection) {\n    function IndexedCollection(value) {\n      return isIndexed(value) ? value : IndexedSeq(value);\n    }\n\n    if ( Collection ) IndexedCollection.__proto__ = Collection;\n    IndexedCollection.prototype = Object.create( Collection && Collection.prototype );\n    IndexedCollection.prototype.constructor = IndexedCollection;\n\n    return IndexedCollection;\n  }(Collection));\n\n  var SetCollection = /*@__PURE__*/(function (Collection) {\n    function SetCollection(value) {\n      return isCollection(value) && !isAssociative(value) ? value : SetSeq(value);\n    }\n\n    if ( Collection ) SetCollection.__proto__ = Collection;\n    SetCollection.prototype = Object.create( Collection && Collection.prototype );\n    SetCollection.prototype.constructor = SetCollection;\n\n    return SetCollection;\n  }(Collection));\n\n  Collection.Keyed = KeyedCollection;\n  Collection.Indexed = IndexedCollection;\n  Collection.Set = SetCollection;\n\n  var IS_SEQ_SYMBOL = '@@__IMMUTABLE_SEQ__@@';\n\n  function isSeq(maybeSeq) {\n    return Boolean(maybeSeq && maybeSeq[IS_SEQ_SYMBOL]);\n  }\n\n  var IS_RECORD_SYMBOL = '@@__IMMUTABLE_RECORD__@@';\n\n  function isRecord(maybeRecord) {\n    return Boolean(maybeRecord && maybeRecord[IS_RECORD_SYMBOL]);\n  }\n\n  function isImmutable(maybeImmutable) {\n    return isCollection(maybeImmutable) || isRecord(maybeImmutable);\n  }\n\n  var IS_ORDERED_SYMBOL = '@@__IMMUTABLE_ORDERED__@@';\n\n  function isOrdered(maybeOrdered) {\n    return Boolean(maybeOrdered && maybeOrdered[IS_ORDERED_SYMBOL]);\n  }\n\n  var ITERATE_KEYS = 0;\n  var ITERATE_VALUES = 1;\n  var ITERATE_ENTRIES = 2;\n\n  var REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n  var FAUX_ITERATOR_SYMBOL = '@@iterator';\n\n  var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;\n\n  var Iterator = function Iterator(next) {\n    this.next = next;\n  };\n\n  Iterator.prototype.toString = function toString () {\n    return '[Iterator]';\n  };\n\n  Iterator.KEYS = ITERATE_KEYS;\n  Iterator.VALUES = ITERATE_VALUES;\n  Iterator.ENTRIES = ITERATE_ENTRIES;\n\n  Iterator.prototype.inspect = Iterator.prototype.toSource = function () {\n    return this.toString();\n  };\n  Iterator.prototype[ITERATOR_SYMBOL] = function () {\n    return this;\n  };\n\n  function iteratorValue(type, k, v, iteratorResult) {\n    var value = type === 0 ? k : type === 1 ? v : [k, v];\n    iteratorResult\n      ? (iteratorResult.value = value)\n      : (iteratorResult = {\n          value: value,\n          done: false,\n        });\n    return iteratorResult;\n  }\n\n  function iteratorDone() {\n    return { value: undefined, done: true };\n  }\n\n  function hasIterator(maybeIterable) {\n    return !!getIteratorFn(maybeIterable);\n  }\n\n  function isIterator(maybeIterator) {\n    return maybeIterator && typeof maybeIterator.next === 'function';\n  }\n\n  function getIterator(iterable) {\n    var iteratorFn = getIteratorFn(iterable);\n    return iteratorFn && iteratorFn.call(iterable);\n  }\n\n  function getIteratorFn(iterable) {\n    var iteratorFn =\n      iterable &&\n      ((REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL]) ||\n        iterable[FAUX_ITERATOR_SYMBOL]);\n    if (typeof iteratorFn === 'function') {\n      return iteratorFn;\n    }\n  }\n\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n  function isArrayLike(value) {\n    if (Array.isArray(value) || typeof value === 'string') {\n      return true;\n    }\n\n    return (\n      value &&\n      typeof value === 'object' &&\n      Number.isInteger(value.length) &&\n      value.length >= 0 &&\n      (value.length === 0\n        ? // Only {length: 0} is considered Array-like.\n          Object.keys(value).length === 1\n        : // An object is only Array-like if it has a property where the last value\n          // in the array-like may be found (which could be undefined).\n          value.hasOwnProperty(value.length - 1))\n    );\n  }\n\n  var Seq = /*@__PURE__*/(function (Collection$$1) {\n    function Seq(value) {\n      return value === null || value === undefined\n        ? emptySequence()\n        : isImmutable(value)\n        ? value.toSeq()\n        : seqFromValue(value);\n    }\n\n    if ( Collection$$1 ) Seq.__proto__ = Collection$$1;\n    Seq.prototype = Object.create( Collection$$1 && Collection$$1.prototype );\n    Seq.prototype.constructor = Seq;\n\n    Seq.prototype.toSeq = function toSeq () {\n      return this;\n    };\n\n    Seq.prototype.toString = function toString () {\n      return this.__toString('Seq {', '}');\n    };\n\n    Seq.prototype.cacheResult = function cacheResult () {\n      if (!this._cache && this.__iterateUncached) {\n        this._cache = this.entrySeq().toArray();\n        this.size = this._cache.length;\n      }\n      return this;\n    };\n\n    // abstract __iterateUncached(fn, reverse)\n\n    Seq.prototype.__iterate = function __iterate (fn, reverse) {\n      var cache = this._cache;\n      if (cache) {\n        var size = cache.length;\n        var i = 0;\n        while (i !== size) {\n          var entry = cache[reverse ? size - ++i : i++];\n          if (fn(entry[1], entry[0], this) === false) {\n            break;\n          }\n        }\n        return i;\n      }\n      return this.__iterateUncached(fn, reverse);\n    };\n\n    // abstract __iteratorUncached(type, reverse)\n\n    Seq.prototype.__iterator = function __iterator (type, reverse) {\n      var cache = this._cache;\n      if (cache) {\n        var size = cache.length;\n        var i = 0;\n        return new Iterator(function () {\n          if (i === size) {\n            return iteratorDone();\n          }\n          var entry = cache[reverse ? size - ++i : i++];\n          return iteratorValue(type, entry[0], entry[1]);\n        });\n      }\n      return this.__iteratorUncached(type, reverse);\n    };\n\n    return Seq;\n  }(Collection));\n\n  var KeyedSeq = /*@__PURE__*/(function (Seq) {\n    function KeyedSeq(value) {\n      return value === null || value === undefined\n        ? emptySequence().toKeyedSeq()\n        : isCollection(value)\n        ? isKeyed(value)\n          ? value.toSeq()\n          : value.fromEntrySeq()\n        : isRecord(value)\n        ? value.toSeq()\n        : keyedSeqFromValue(value);\n    }\n\n    if ( Seq ) KeyedSeq.__proto__ = Seq;\n    KeyedSeq.prototype = Object.create( Seq && Seq.prototype );\n    KeyedSeq.prototype.constructor = KeyedSeq;\n\n    KeyedSeq.prototype.toKeyedSeq = function toKeyedSeq () {\n      return this;\n    };\n\n    return KeyedSeq;\n  }(Seq));\n\n  var IndexedSeq = /*@__PURE__*/(function (Seq) {\n    function IndexedSeq(value) {\n      return value === null || value === undefined\n        ? emptySequence()\n        : isCollection(value)\n        ? isKeyed(value)\n          ? value.entrySeq()\n          : value.toIndexedSeq()\n        : isRecord(value)\n        ? value.toSeq().entrySeq()\n        : indexedSeqFromValue(value);\n    }\n\n    if ( Seq ) IndexedSeq.__proto__ = Seq;\n    IndexedSeq.prototype = Object.create( Seq && Seq.prototype );\n    IndexedSeq.prototype.constructor = IndexedSeq;\n\n    IndexedSeq.of = function of (/*...values*/) {\n      return IndexedSeq(arguments);\n    };\n\n    IndexedSeq.prototype.toIndexedSeq = function toIndexedSeq () {\n      return this;\n    };\n\n    IndexedSeq.prototype.toString = function toString () {\n      return this.__toString('Seq [', ']');\n    };\n\n    return IndexedSeq;\n  }(Seq));\n\n  var SetSeq = /*@__PURE__*/(function (Seq) {\n    function SetSeq(value) {\n      return (isCollection(value) && !isAssociative(value)\n        ? value\n        : IndexedSeq(value)\n      ).toSetSeq();\n    }\n\n    if ( Seq ) SetSeq.__proto__ = Seq;\n    SetSeq.prototype = Object.create( Seq && Seq.prototype );\n    SetSeq.prototype.constructor = SetSeq;\n\n    SetSeq.of = function of (/*...values*/) {\n      return SetSeq(arguments);\n    };\n\n    SetSeq.prototype.toSetSeq = function toSetSeq () {\n      return this;\n    };\n\n    return SetSeq;\n  }(Seq));\n\n  Seq.isSeq = isSeq;\n  Seq.Keyed = KeyedSeq;\n  Seq.Set = SetSeq;\n  Seq.Indexed = IndexedSeq;\n\n  Seq.prototype[IS_SEQ_SYMBOL] = true;\n\n  // #pragma Root Sequences\n\n  var ArraySeq = /*@__PURE__*/(function (IndexedSeq) {\n    function ArraySeq(array) {\n      this._array = array;\n      this.size = array.length;\n    }\n\n    if ( IndexedSeq ) ArraySeq.__proto__ = IndexedSeq;\n    ArraySeq.prototype = Object.create( IndexedSeq && IndexedSeq.prototype );\n    ArraySeq.prototype.constructor = ArraySeq;\n\n    ArraySeq.prototype.get = function get (index, notSetValue) {\n      return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;\n    };\n\n    ArraySeq.prototype.__iterate = function __iterate (fn, reverse) {\n      var array = this._array;\n      var size = array.length;\n      var i = 0;\n      while (i !== size) {\n        var ii = reverse ? size - ++i : i++;\n        if (fn(array[ii], ii, this) === false) {\n          break;\n        }\n      }\n      return i;\n    };\n\n    ArraySeq.prototype.__iterator = function __iterator (type, reverse) {\n      var array = this._array;\n      var size = array.length;\n      var i = 0;\n      return new Iterator(function () {\n        if (i === size) {\n          return iteratorDone();\n        }\n        var ii = reverse ? size - ++i : i++;\n        return iteratorValue(type, ii, array[ii]);\n      });\n    };\n\n    return ArraySeq;\n  }(IndexedSeq));\n\n  var ObjectSeq = /*@__PURE__*/(function (KeyedSeq) {\n    function ObjectSeq(object) {\n      var keys = Object.keys(object);\n      this._object = object;\n      this._keys = keys;\n      this.size = keys.length;\n    }\n\n    if ( KeyedSeq ) ObjectSeq.__proto__ = KeyedSeq;\n    ObjectSeq.prototype = Object.create( KeyedSeq && KeyedSeq.prototype );\n    ObjectSeq.prototype.constructor = ObjectSeq;\n\n    ObjectSeq.prototype.get = function get (key, notSetValue) {\n      if (notSetValue !== undefined && !this.has(key)) {\n        return notSetValue;\n      }\n      return this._object[key];\n    };\n\n    ObjectSeq.prototype.has = function has (key) {\n      return hasOwnProperty.call(this._object, key);\n    };\n\n    ObjectSeq.prototype.__iterate = function __iterate (fn, reverse) {\n      var object = this._object;\n      var keys = this._keys;\n      var size = keys.length;\n      var i = 0;\n      while (i !== size) {\n        var key = keys[reverse ? size - ++i : i++];\n        if (fn(object[key], key, this) === false) {\n          break;\n        }\n      }\n      return i;\n    };\n\n    ObjectSeq.prototype.__iterator = function __iterator (type, reverse) {\n      var object = this._object;\n      var keys = this._keys;\n      var size = keys.length;\n      var i = 0;\n      return new Iterator(function () {\n        if (i === size) {\n          return iteratorDone();\n        }\n        var key = keys[reverse ? size - ++i : i++];\n        return iteratorValue(type, key, object[key]);\n      });\n    };\n\n    return ObjectSeq;\n  }(KeyedSeq));\n  ObjectSeq.prototype[IS_ORDERED_SYMBOL] = true;\n\n  var CollectionSeq = /*@__PURE__*/(function (IndexedSeq) {\n    function CollectionSeq(collection) {\n      this._collection = collection;\n      this.size = collection.length || collection.size;\n    }\n\n    if ( IndexedSeq ) CollectionSeq.__proto__ = IndexedSeq;\n    CollectionSeq.prototype = Object.create( IndexedSeq && IndexedSeq.prototype );\n    CollectionSeq.prototype.constructor = CollectionSeq;\n\n    CollectionSeq.prototype.__iterateUncached = function __iterateUncached (fn, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var collection = this._collection;\n      var iterator = getIterator(collection);\n      var iterations = 0;\n      if (isIterator(iterator)) {\n        var step;\n        while (!(step = iterator.next()).done) {\n          if (fn(step.value, iterations++, this) === false) {\n            break;\n          }\n        }\n      }\n      return iterations;\n    };\n\n    CollectionSeq.prototype.__iteratorUncached = function __iteratorUncached (type, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var collection = this._collection;\n      var iterator = getIterator(collection);\n      if (!isIterator(iterator)) {\n        return new Iterator(iteratorDone);\n      }\n      var iterations = 0;\n      return new Iterator(function () {\n        var step = iterator.next();\n        return step.done ? step : iteratorValue(type, iterations++, step.value);\n      });\n    };\n\n    return CollectionSeq;\n  }(IndexedSeq));\n\n  // # pragma Helper functions\n\n  var EMPTY_SEQ;\n\n  function emptySequence() {\n    return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));\n  }\n\n  function keyedSeqFromValue(value) {\n    var seq = Array.isArray(value)\n      ? new ArraySeq(value)\n      : hasIterator(value)\n      ? new CollectionSeq(value)\n      : undefined;\n    if (seq) {\n      return seq.fromEntrySeq();\n    }\n    if (typeof value === 'object') {\n      return new ObjectSeq(value);\n    }\n    throw new TypeError(\n      'Expected Array or collection object of [k, v] entries, or keyed object: ' +\n        value\n    );\n  }\n\n  function indexedSeqFromValue(value) {\n    var seq = maybeIndexedSeqFromValue(value);\n    if (seq) {\n      return seq;\n    }\n    throw new TypeError(\n      'Expected Array or collection object of values: ' + value\n    );\n  }\n\n  function seqFromValue(value) {\n    var seq = maybeIndexedSeqFromValue(value);\n    if (seq) {\n      return seq;\n    }\n    if (typeof value === 'object') {\n      return new ObjectSeq(value);\n    }\n    throw new TypeError(\n      'Expected Array or collection object of values, or keyed object: ' + value\n    );\n  }\n\n  function maybeIndexedSeqFromValue(value) {\n    return isArrayLike(value)\n      ? new ArraySeq(value)\n      : hasIterator(value)\n      ? new CollectionSeq(value)\n      : undefined;\n  }\n\n  var IS_MAP_SYMBOL = '@@__IMMUTABLE_MAP__@@';\n\n  function isMap(maybeMap) {\n    return Boolean(maybeMap && maybeMap[IS_MAP_SYMBOL]);\n  }\n\n  function isOrderedMap(maybeOrderedMap) {\n    return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);\n  }\n\n  function isValueObject(maybeValue) {\n    return Boolean(\n      maybeValue &&\n        typeof maybeValue.equals === 'function' &&\n        typeof maybeValue.hashCode === 'function'\n    );\n  }\n\n  /**\n   * An extension of the \"same-value\" algorithm as [described for use by ES6 Map\n   * and Set](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Key_equality)\n   *\n   * NaN is considered the same as NaN, however -0 and 0 are considered the same\n   * value, which is different from the algorithm described by\n   * [`Object.is`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n   *\n   * This is extended further to allow Objects to describe the values they\n   * represent, by way of `valueOf` or `equals` (and `hashCode`).\n   *\n   * Note: because of this extension, the key equality of Immutable.Map and the\n   * value equality of Immutable.Set will differ from ES6 Map and Set.\n   *\n   * ### Defining custom values\n   *\n   * The easiest way to describe the value an object represents is by implementing\n   * `valueOf`. For example, `Date` represents a value by returning a unix\n   * timestamp for `valueOf`:\n   *\n   *     var date1 = new Date(1234567890000); // Fri Feb 13 2009 ...\n   *     var date2 = new Date(1234567890000);\n   *     date1.valueOf(); // 1234567890000\n   *     assert( date1 !== date2 );\n   *     assert( Immutable.is( date1, date2 ) );\n   *\n   * Note: overriding `valueOf` may have other implications if you use this object\n   * where JavaScript expects a primitive, such as implicit string coercion.\n   *\n   * For more complex types, especially collections, implementing `valueOf` may\n   * not be performant. An alternative is to implement `equals` and `hashCode`.\n   *\n   * `equals` takes another object, presumably of similar type, and returns true\n   * if it is equal. Equality is symmetrical, so the same result should be\n   * returned if this and the argument are flipped.\n   *\n   *     assert( a.equals(b) === b.equals(a) );\n   *\n   * `hashCode` returns a 32bit integer number representing the object which will\n   * be used to determine how to store the value object in a Map or Set. You must\n   * provide both or neither methods, one must not exist without the other.\n   *\n   * Also, an important relationship between these methods must be upheld: if two\n   * values are equal, they *must* return the same hashCode. If the values are not\n   * equal, they might have the same hashCode; this is called a hash collision,\n   * and while undesirable for performance reasons, it is acceptable.\n   *\n   *     if (a.equals(b)) {\n   *       assert( a.hashCode() === b.hashCode() );\n   *     }\n   *\n   * All Immutable collections are Value Objects: they implement `equals()`\n   * and `hashCode()`.\n   */\n  function is(valueA, valueB) {\n    if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n      return true;\n    }\n    if (!valueA || !valueB) {\n      return false;\n    }\n    if (\n      typeof valueA.valueOf === 'function' &&\n      typeof valueB.valueOf === 'function'\n    ) {\n      valueA = valueA.valueOf();\n      valueB = valueB.valueOf();\n      if (valueA === valueB || (valueA !== valueA && valueB !== valueB)) {\n        return true;\n      }\n      if (!valueA || !valueB) {\n        return false;\n      }\n    }\n    return !!(\n      isValueObject(valueA) &&\n      isValueObject(valueB) &&\n      valueA.equals(valueB)\n    );\n  }\n\n  var imul =\n    typeof Math.imul === 'function' && Math.imul(0xffffffff, 2) === -2\n      ? Math.imul\n      : function imul(a, b) {\n          a |= 0; // int\n          b |= 0; // int\n          var c = a & 0xffff;\n          var d = b & 0xffff;\n          // Shift by 0 fixes the sign on the high part.\n          return (c * d + ((((a >>> 16) * d + c * (b >>> 16)) << 16) >>> 0)) | 0; // int\n        };\n\n  // v8 has an optimization for storing 31-bit signed numbers.\n  // Values which have either 00 or 11 as the high order bits qualify.\n  // This function drops the highest order bit in a signed number, maintaining\n  // the sign bit.\n  function smi(i32) {\n    return ((i32 >>> 1) & 0x40000000) | (i32 & 0xbfffffff);\n  }\n\n  var defaultValueOf = Object.prototype.valueOf;\n\n  function hash(o) {\n    if (o == null) {\n      return hashNullish(o);\n    }\n\n    if (typeof o.hashCode === 'function') {\n      // Drop any high bits from accidentally long hash codes.\n      return smi(o.hashCode(o));\n    }\n\n    var v = valueOf(o);\n\n    if (v == null) {\n      return hashNullish(v);\n    }\n\n    switch (typeof v) {\n      case 'boolean':\n        // The hash values for built-in constants are a 1 value for each 5-byte\n        // shift region expect for the first, which encodes the value. This\n        // reduces the odds of a hash collision for these common values.\n        return v ? 0x42108421 : 0x42108420;\n      case 'number':\n        return hashNumber(v);\n      case 'string':\n        return v.length > STRING_HASH_CACHE_MIN_STRLEN\n          ? cachedHashString(v)\n          : hashString(v);\n      case 'object':\n      case 'function':\n        return hashJSObj(v);\n      case 'symbol':\n        return hashSymbol(v);\n      default:\n        if (typeof v.toString === 'function') {\n          return hashString(v.toString());\n        }\n        throw new Error('Value type ' + typeof v + ' cannot be hashed.');\n    }\n  }\n\n  function hashNullish(nullish) {\n    return nullish === null ? 0x42108422 : /* undefined */ 0x42108423;\n  }\n\n  // Compress arbitrarily large numbers into smi hashes.\n  function hashNumber(n) {\n    if (n !== n || n === Infinity) {\n      return 0;\n    }\n    var hash = n | 0;\n    if (hash !== n) {\n      hash ^= n * 0xffffffff;\n    }\n    while (n > 0xffffffff) {\n      n /= 0xffffffff;\n      hash ^= n;\n    }\n    return smi(hash);\n  }\n\n  function cachedHashString(string) {\n    var hashed = stringHashCache[string];\n    if (hashed === undefined) {\n      hashed = hashString(string);\n      if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {\n        STRING_HASH_CACHE_SIZE = 0;\n        stringHashCache = {};\n      }\n      STRING_HASH_CACHE_SIZE++;\n      stringHashCache[string] = hashed;\n    }\n    return hashed;\n  }\n\n  // http://jsperf.com/hashing-strings\n  function hashString(string) {\n    // This is the hash from JVM\n    // The hash code for a string is computed as\n    // s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],\n    // where s[i] is the ith character of the string and n is the length of\n    // the string. We \"mod\" the result to make it between 0 (inclusive) and 2^31\n    // (exclusive) by dropping high bits.\n    var hashed = 0;\n    for (var ii = 0; ii < string.length; ii++) {\n      hashed = (31 * hashed + string.charCodeAt(ii)) | 0;\n    }\n    return smi(hashed);\n  }\n\n  function hashSymbol(sym) {\n    var hashed = symbolMap[sym];\n    if (hashed !== undefined) {\n      return hashed;\n    }\n\n    hashed = nextHash();\n\n    symbolMap[sym] = hashed;\n\n    return hashed;\n  }\n\n  function hashJSObj(obj) {\n    var hashed;\n    if (usingWeakMap) {\n      hashed = weakMap.get(obj);\n      if (hashed !== undefined) {\n        return hashed;\n      }\n    }\n\n    hashed = obj[UID_HASH_KEY];\n    if (hashed !== undefined) {\n      return hashed;\n    }\n\n    if (!canDefineProperty) {\n      hashed = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];\n      if (hashed !== undefined) {\n        return hashed;\n      }\n\n      hashed = getIENodeHash(obj);\n      if (hashed !== undefined) {\n        return hashed;\n      }\n    }\n\n    hashed = nextHash();\n\n    if (usingWeakMap) {\n      weakMap.set(obj, hashed);\n    } else if (isExtensible !== undefined && isExtensible(obj) === false) {\n      throw new Error('Non-extensible objects are not allowed as keys.');\n    } else if (canDefineProperty) {\n      Object.defineProperty(obj, UID_HASH_KEY, {\n        enumerable: false,\n        configurable: false,\n        writable: false,\n        value: hashed,\n      });\n    } else if (\n      obj.propertyIsEnumerable !== undefined &&\n      obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable\n    ) {\n      // Since we can't define a non-enumerable property on the object\n      // we'll hijack one of the less-used non-enumerable properties to\n      // save our hash on it. Since this is a function it will not show up in\n      // `JSON.stringify` which is what we want.\n      obj.propertyIsEnumerable = function () {\n        return this.constructor.prototype.propertyIsEnumerable.apply(\n          this,\n          arguments\n        );\n      };\n      obj.propertyIsEnumerable[UID_HASH_KEY] = hashed;\n    } else if (obj.nodeType !== undefined) {\n      // At this point we couldn't get the IE `uniqueID` to use as a hash\n      // and we couldn't use a non-enumerable property to exploit the\n      // dontEnum bug so we simply add the `UID_HASH_KEY` on the node\n      // itself.\n      obj[UID_HASH_KEY] = hashed;\n    } else {\n      throw new Error('Unable to set a non-enumerable property on object.');\n    }\n\n    return hashed;\n  }\n\n  // Get references to ES5 object methods.\n  var isExtensible = Object.isExtensible;\n\n  // True if Object.defineProperty works as expected. IE8 fails this test.\n  var canDefineProperty = (function () {\n    try {\n      Object.defineProperty({}, '@', {});\n      return true;\n    } catch (e) {\n      return false;\n    }\n  })();\n\n  // IE has a `uniqueID` property on DOM nodes. We can construct the hash from it\n  // and avoid memory leaks from the IE cloneNode bug.\n  function getIENodeHash(node) {\n    if (node && node.nodeType > 0) {\n      switch (node.nodeType) {\n        case 1: // Element\n          return node.uniqueID;\n        case 9: // Document\n          return node.documentElement && node.documentElement.uniqueID;\n      }\n    }\n  }\n\n  function valueOf(obj) {\n    return obj.valueOf !== defaultValueOf && typeof obj.valueOf === 'function'\n      ? obj.valueOf(obj)\n      : obj;\n  }\n\n  function nextHash() {\n    var nextHash = ++_objHashUID;\n    if (_objHashUID & 0x40000000) {\n      _objHashUID = 0;\n    }\n    return nextHash;\n  }\n\n  // If possible, use a WeakMap.\n  var usingWeakMap = typeof WeakMap === 'function';\n  var weakMap;\n  if (usingWeakMap) {\n    weakMap = new WeakMap();\n  }\n\n  var symbolMap = Object.create(null);\n\n  var _objHashUID = 0;\n\n  var UID_HASH_KEY = '__immutablehash__';\n  if (typeof Symbol === 'function') {\n    UID_HASH_KEY = Symbol(UID_HASH_KEY);\n  }\n\n  var STRING_HASH_CACHE_MIN_STRLEN = 16;\n  var STRING_HASH_CACHE_MAX_SIZE = 255;\n  var STRING_HASH_CACHE_SIZE = 0;\n  var stringHashCache = {};\n\n  var ToKeyedSequence = /*@__PURE__*/(function (KeyedSeq$$1) {\n    function ToKeyedSequence(indexed, useKeys) {\n      this._iter = indexed;\n      this._useKeys = useKeys;\n      this.size = indexed.size;\n    }\n\n    if ( KeyedSeq$$1 ) ToKeyedSequence.__proto__ = KeyedSeq$$1;\n    ToKeyedSequence.prototype = Object.create( KeyedSeq$$1 && KeyedSeq$$1.prototype );\n    ToKeyedSequence.prototype.constructor = ToKeyedSequence;\n\n    ToKeyedSequence.prototype.get = function get (key, notSetValue) {\n      return this._iter.get(key, notSetValue);\n    };\n\n    ToKeyedSequence.prototype.has = function has (key) {\n      return this._iter.has(key);\n    };\n\n    ToKeyedSequence.prototype.valueSeq = function valueSeq () {\n      return this._iter.valueSeq();\n    };\n\n    ToKeyedSequence.prototype.reverse = function reverse () {\n      var this$1 = this;\n\n      var reversedSequence = reverseFactory(this, true);\n      if (!this._useKeys) {\n        reversedSequence.valueSeq = function () { return this$1._iter.toSeq().reverse(); };\n      }\n      return reversedSequence;\n    };\n\n    ToKeyedSequence.prototype.map = function map (mapper, context) {\n      var this$1 = this;\n\n      var mappedSequence = mapFactory(this, mapper, context);\n      if (!this._useKeys) {\n        mappedSequence.valueSeq = function () { return this$1._iter.toSeq().map(mapper, context); };\n      }\n      return mappedSequence;\n    };\n\n    ToKeyedSequence.prototype.__iterate = function __iterate (fn, reverse) {\n      var this$1 = this;\n\n      return this._iter.__iterate(function (v, k) { return fn(v, k, this$1); }, reverse);\n    };\n\n    ToKeyedSequence.prototype.__iterator = function __iterator (type, reverse) {\n      return this._iter.__iterator(type, reverse);\n    };\n\n    return ToKeyedSequence;\n  }(KeyedSeq));\n  ToKeyedSequence.prototype[IS_ORDERED_SYMBOL] = true;\n\n  var ToIndexedSequence = /*@__PURE__*/(function (IndexedSeq$$1) {\n    function ToIndexedSequence(iter) {\n      this._iter = iter;\n      this.size = iter.size;\n    }\n\n    if ( IndexedSeq$$1 ) ToIndexedSequence.__proto__ = IndexedSeq$$1;\n    ToIndexedSequence.prototype = Object.create( IndexedSeq$$1 && IndexedSeq$$1.prototype );\n    ToIndexedSequence.prototype.constructor = ToIndexedSequence;\n\n    ToIndexedSequence.prototype.includes = function includes (value) {\n      return this._iter.includes(value);\n    };\n\n    ToIndexedSequence.prototype.__iterate = function __iterate (fn, reverse) {\n      var this$1 = this;\n\n      var i = 0;\n      reverse && ensureSize(this);\n      return this._iter.__iterate(\n        function (v) { return fn(v, reverse ? this$1.size - ++i : i++, this$1); },\n        reverse\n      );\n    };\n\n    ToIndexedSequence.prototype.__iterator = function __iterator (type, reverse) {\n      var this$1 = this;\n\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      var i = 0;\n      reverse && ensureSize(this);\n      return new Iterator(function () {\n        var step = iterator.next();\n        return step.done\n          ? step\n          : iteratorValue(\n              type,\n              reverse ? this$1.size - ++i : i++,\n              step.value,\n              step\n            );\n      });\n    };\n\n    return ToIndexedSequence;\n  }(IndexedSeq));\n\n  var ToSetSequence = /*@__PURE__*/(function (SetSeq$$1) {\n    function ToSetSequence(iter) {\n      this._iter = iter;\n      this.size = iter.size;\n    }\n\n    if ( SetSeq$$1 ) ToSetSequence.__proto__ = SetSeq$$1;\n    ToSetSequence.prototype = Object.create( SetSeq$$1 && SetSeq$$1.prototype );\n    ToSetSequence.prototype.constructor = ToSetSequence;\n\n    ToSetSequence.prototype.has = function has (key) {\n      return this._iter.includes(key);\n    };\n\n    ToSetSequence.prototype.__iterate = function __iterate (fn, reverse) {\n      var this$1 = this;\n\n      return this._iter.__iterate(function (v) { return fn(v, v, this$1); }, reverse);\n    };\n\n    ToSetSequence.prototype.__iterator = function __iterator (type, reverse) {\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      return new Iterator(function () {\n        var step = iterator.next();\n        return step.done\n          ? step\n          : iteratorValue(type, step.value, step.value, step);\n      });\n    };\n\n    return ToSetSequence;\n  }(SetSeq));\n\n  var FromEntriesSequence = /*@__PURE__*/(function (KeyedSeq$$1) {\n    function FromEntriesSequence(entries) {\n      this._iter = entries;\n      this.size = entries.size;\n    }\n\n    if ( KeyedSeq$$1 ) FromEntriesSequence.__proto__ = KeyedSeq$$1;\n    FromEntriesSequence.prototype = Object.create( KeyedSeq$$1 && KeyedSeq$$1.prototype );\n    FromEntriesSequence.prototype.constructor = FromEntriesSequence;\n\n    FromEntriesSequence.prototype.entrySeq = function entrySeq () {\n      return this._iter.toSeq();\n    };\n\n    FromEntriesSequence.prototype.__iterate = function __iterate (fn, reverse) {\n      var this$1 = this;\n\n      return this._iter.__iterate(function (entry) {\n        // Check if entry exists first so array access doesn't throw for holes\n        // in the parent iteration.\n        if (entry) {\n          validateEntry(entry);\n          var indexedCollection = isCollection(entry);\n          return fn(\n            indexedCollection ? entry.get(1) : entry[1],\n            indexedCollection ? entry.get(0) : entry[0],\n            this$1\n          );\n        }\n      }, reverse);\n    };\n\n    FromEntriesSequence.prototype.__iterator = function __iterator (type, reverse) {\n      var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);\n      return new Iterator(function () {\n        while (true) {\n          var step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n          var entry = step.value;\n          // Check if entry exists first so array access doesn't throw for holes\n          // in the parent iteration.\n          if (entry) {\n            validateEntry(entry);\n            var indexedCollection = isCollection(entry);\n            return iteratorValue(\n              type,\n              indexedCollection ? entry.get(0) : entry[0],\n              indexedCollection ? entry.get(1) : entry[1],\n              step\n            );\n          }\n        }\n      });\n    };\n\n    return FromEntriesSequence;\n  }(KeyedSeq));\n\n  ToIndexedSequence.prototype.cacheResult = ToKeyedSequence.prototype.cacheResult = ToSetSequence.prototype.cacheResult = FromEntriesSequence.prototype.cacheResult = cacheResultThrough;\n\n  function flipFactory(collection) {\n    var flipSequence = makeSequence(collection);\n    flipSequence._iter = collection;\n    flipSequence.size = collection.size;\n    flipSequence.flip = function () { return collection; };\n    flipSequence.reverse = function () {\n      var reversedSequence = collection.reverse.apply(this); // super.reverse()\n      reversedSequence.flip = function () { return collection.reverse(); };\n      return reversedSequence;\n    };\n    flipSequence.has = function (key) { return collection.includes(key); };\n    flipSequence.includes = function (key) { return collection.has(key); };\n    flipSequence.cacheResult = cacheResultThrough;\n    flipSequence.__iterateUncached = function (fn, reverse) {\n      var this$1 = this;\n\n      return collection.__iterate(function (v, k) { return fn(k, v, this$1) !== false; }, reverse);\n    };\n    flipSequence.__iteratorUncached = function (type, reverse) {\n      if (type === ITERATE_ENTRIES) {\n        var iterator = collection.__iterator(type, reverse);\n        return new Iterator(function () {\n          var step = iterator.next();\n          if (!step.done) {\n            var k = step.value[0];\n            step.value[0] = step.value[1];\n            step.value[1] = k;\n          }\n          return step;\n        });\n      }\n      return collection.__iterator(\n        type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES,\n        reverse\n      );\n    };\n    return flipSequence;\n  }\n\n  function mapFactory(collection, mapper, context) {\n    var mappedSequence = makeSequence(collection);\n    mappedSequence.size = collection.size;\n    mappedSequence.has = function (key) { return collection.has(key); };\n    mappedSequence.get = function (key, notSetValue) {\n      var v = collection.get(key, NOT_SET);\n      return v === NOT_SET\n        ? notSetValue\n        : mapper.call(context, v, key, collection);\n    };\n    mappedSequence.__iterateUncached = function (fn, reverse) {\n      var this$1 = this;\n\n      return collection.__iterate(\n        function (v, k, c) { return fn(mapper.call(context, v, k, c), k, this$1) !== false; },\n        reverse\n      );\n    };\n    mappedSequence.__iteratorUncached = function (type, reverse) {\n      var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);\n      return new Iterator(function () {\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        var key = entry[0];\n        return iteratorValue(\n          type,\n          key,\n          mapper.call(context, entry[1], key, collection),\n          step\n        );\n      });\n    };\n    return mappedSequence;\n  }\n\n  function reverseFactory(collection, useKeys) {\n    var this$1 = this;\n\n    var reversedSequence = makeSequence(collection);\n    reversedSequence._iter = collection;\n    reversedSequence.size = collection.size;\n    reversedSequence.reverse = function () { return collection; };\n    if (collection.flip) {\n      reversedSequence.flip = function () {\n        var flipSequence = flipFactory(collection);\n        flipSequence.reverse = function () { return collection.flip(); };\n        return flipSequence;\n      };\n    }\n    reversedSequence.get = function (key, notSetValue) { return collection.get(useKeys ? key : -1 - key, notSetValue); };\n    reversedSequence.has = function (key) { return collection.has(useKeys ? key : -1 - key); };\n    reversedSequence.includes = function (value) { return collection.includes(value); };\n    reversedSequence.cacheResult = cacheResultThrough;\n    reversedSequence.__iterate = function (fn, reverse) {\n      var this$1 = this;\n\n      var i = 0;\n      reverse && ensureSize(collection);\n      return collection.__iterate(\n        function (v, k) { return fn(v, useKeys ? k : reverse ? this$1.size - ++i : i++, this$1); },\n        !reverse\n      );\n    };\n    reversedSequence.__iterator = function (type, reverse) {\n      var i = 0;\n      reverse && ensureSize(collection);\n      var iterator = collection.__iterator(ITERATE_ENTRIES, !reverse);\n      return new Iterator(function () {\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        return iteratorValue(\n          type,\n          useKeys ? entry[0] : reverse ? this$1.size - ++i : i++,\n          entry[1],\n          step\n        );\n      });\n    };\n    return reversedSequence;\n  }\n\n  function filterFactory(collection, predicate, context, useKeys) {\n    var filterSequence = makeSequence(collection);\n    if (useKeys) {\n      filterSequence.has = function (key) {\n        var v = collection.get(key, NOT_SET);\n        return v !== NOT_SET && !!predicate.call(context, v, key, collection);\n      };\n      filterSequence.get = function (key, notSetValue) {\n        var v = collection.get(key, NOT_SET);\n        return v !== NOT_SET && predicate.call(context, v, key, collection)\n          ? v\n          : notSetValue;\n      };\n    }\n    filterSequence.__iterateUncached = function (fn, reverse) {\n      var this$1 = this;\n\n      var iterations = 0;\n      collection.__iterate(function (v, k, c) {\n        if (predicate.call(context, v, k, c)) {\n          iterations++;\n          return fn(v, useKeys ? k : iterations - 1, this$1);\n        }\n      }, reverse);\n      return iterations;\n    };\n    filterSequence.__iteratorUncached = function (type, reverse) {\n      var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);\n      var iterations = 0;\n      return new Iterator(function () {\n        while (true) {\n          var step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n          var entry = step.value;\n          var key = entry[0];\n          var value = entry[1];\n          if (predicate.call(context, value, key, collection)) {\n            return iteratorValue(type, useKeys ? key : iterations++, value, step);\n          }\n        }\n      });\n    };\n    return filterSequence;\n  }\n\n  function countByFactory(collection, grouper, context) {\n    var groups = Map().asMutable();\n    collection.__iterate(function (v, k) {\n      groups.update(grouper.call(context, v, k, collection), 0, function (a) { return a + 1; });\n    });\n    return groups.asImmutable();\n  }\n\n  function groupByFactory(collection, grouper, context) {\n    var isKeyedIter = isKeyed(collection);\n    var groups = (isOrdered(collection) ? OrderedMap() : Map()).asMutable();\n    collection.__iterate(function (v, k) {\n      groups.update(\n        grouper.call(context, v, k, collection),\n        function (a) { return ((a = a || []), a.push(isKeyedIter ? [k, v] : v), a); }\n      );\n    });\n    var coerce = collectionClass(collection);\n    return groups.map(function (arr) { return reify(collection, coerce(arr)); }).asImmutable();\n  }\n\n  function sliceFactory(collection, begin, end, useKeys) {\n    var originalSize = collection.size;\n\n    if (wholeSlice(begin, end, originalSize)) {\n      return collection;\n    }\n\n    var resolvedBegin = resolveBegin(begin, originalSize);\n    var resolvedEnd = resolveEnd(end, originalSize);\n\n    // begin or end will be NaN if they were provided as negative numbers and\n    // this collection's size is unknown. In that case, cache first so there is\n    // a known size and these do not resolve to NaN.\n    if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {\n      return sliceFactory(collection.toSeq().cacheResult(), begin, end, useKeys);\n    }\n\n    // Note: resolvedEnd is undefined when the original sequence's length is\n    // unknown and this slice did not supply an end and should contain all\n    // elements after resolvedBegin.\n    // In that case, resolvedSize will be NaN and sliceSize will remain undefined.\n    var resolvedSize = resolvedEnd - resolvedBegin;\n    var sliceSize;\n    if (resolvedSize === resolvedSize) {\n      sliceSize = resolvedSize < 0 ? 0 : resolvedSize;\n    }\n\n    var sliceSeq = makeSequence(collection);\n\n    // If collection.size is undefined, the size of the realized sliceSeq is\n    // unknown at this point unless the number of items to slice is 0\n    sliceSeq.size =\n      sliceSize === 0 ? sliceSize : (collection.size && sliceSize) || undefined;\n\n    if (!useKeys && isSeq(collection) && sliceSize >= 0) {\n      sliceSeq.get = function (index, notSetValue) {\n        index = wrapIndex(this, index);\n        return index >= 0 && index < sliceSize\n          ? collection.get(index + resolvedBegin, notSetValue)\n          : notSetValue;\n      };\n    }\n\n    sliceSeq.__iterateUncached = function (fn, reverse) {\n      var this$1 = this;\n\n      if (sliceSize === 0) {\n        return 0;\n      }\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var skipped = 0;\n      var isSkipping = true;\n      var iterations = 0;\n      collection.__iterate(function (v, k) {\n        if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {\n          iterations++;\n          return (\n            fn(v, useKeys ? k : iterations - 1, this$1) !== false &&\n            iterations !== sliceSize\n          );\n        }\n      });\n      return iterations;\n    };\n\n    sliceSeq.__iteratorUncached = function (type, reverse) {\n      if (sliceSize !== 0 && reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      // Don't bother instantiating parent iterator if taking 0.\n      if (sliceSize === 0) {\n        return new Iterator(iteratorDone);\n      }\n      var iterator = collection.__iterator(type, reverse);\n      var skipped = 0;\n      var iterations = 0;\n      return new Iterator(function () {\n        while (skipped++ < resolvedBegin) {\n          iterator.next();\n        }\n        if (++iterations > sliceSize) {\n          return iteratorDone();\n        }\n        var step = iterator.next();\n        if (useKeys || type === ITERATE_VALUES || step.done) {\n          return step;\n        }\n        if (type === ITERATE_KEYS) {\n          return iteratorValue(type, iterations - 1, undefined, step);\n        }\n        return iteratorValue(type, iterations - 1, step.value[1], step);\n      });\n    };\n\n    return sliceSeq;\n  }\n\n  function takeWhileFactory(collection, predicate, context) {\n    var takeSequence = makeSequence(collection);\n    takeSequence.__iterateUncached = function (fn, reverse) {\n      var this$1 = this;\n\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var iterations = 0;\n      collection.__iterate(\n        function (v, k, c) { return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$1); }\n      );\n      return iterations;\n    };\n    takeSequence.__iteratorUncached = function (type, reverse) {\n      var this$1 = this;\n\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);\n      var iterating = true;\n      return new Iterator(function () {\n        if (!iterating) {\n          return iteratorDone();\n        }\n        var step = iterator.next();\n        if (step.done) {\n          return step;\n        }\n        var entry = step.value;\n        var k = entry[0];\n        var v = entry[1];\n        if (!predicate.call(context, v, k, this$1)) {\n          iterating = false;\n          return iteratorDone();\n        }\n        return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);\n      });\n    };\n    return takeSequence;\n  }\n\n  function skipWhileFactory(collection, predicate, context, useKeys) {\n    var skipSequence = makeSequence(collection);\n    skipSequence.__iterateUncached = function (fn, reverse) {\n      var this$1 = this;\n\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var isSkipping = true;\n      var iterations = 0;\n      collection.__iterate(function (v, k, c) {\n        if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {\n          iterations++;\n          return fn(v, useKeys ? k : iterations - 1, this$1);\n        }\n      });\n      return iterations;\n    };\n    skipSequence.__iteratorUncached = function (type, reverse) {\n      var this$1 = this;\n\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = collection.__iterator(ITERATE_ENTRIES, reverse);\n      var skipping = true;\n      var iterations = 0;\n      return new Iterator(function () {\n        var step;\n        var k;\n        var v;\n        do {\n          step = iterator.next();\n          if (step.done) {\n            if (useKeys || type === ITERATE_VALUES) {\n              return step;\n            }\n            if (type === ITERATE_KEYS) {\n              return iteratorValue(type, iterations++, undefined, step);\n            }\n            return iteratorValue(type, iterations++, step.value[1], step);\n          }\n          var entry = step.value;\n          k = entry[0];\n          v = entry[1];\n          skipping && (skipping = predicate.call(context, v, k, this$1));\n        } while (skipping);\n        return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);\n      });\n    };\n    return skipSequence;\n  }\n\n  function concatFactory(collection, values) {\n    var isKeyedCollection = isKeyed(collection);\n    var iters = [collection]\n      .concat(values)\n      .map(function (v) {\n        if (!isCollection(v)) {\n          v = isKeyedCollection\n            ? keyedSeqFromValue(v)\n            : indexedSeqFromValue(Array.isArray(v) ? v : [v]);\n        } else if (isKeyedCollection) {\n          v = KeyedCollection(v);\n        }\n        return v;\n      })\n      .filter(function (v) { return v.size !== 0; });\n\n    if (iters.length === 0) {\n      return collection;\n    }\n\n    if (iters.length === 1) {\n      var singleton = iters[0];\n      if (\n        singleton === collection ||\n        (isKeyedCollection && isKeyed(singleton)) ||\n        (isIndexed(collection) && isIndexed(singleton))\n      ) {\n        return singleton;\n      }\n    }\n\n    var concatSeq = new ArraySeq(iters);\n    if (isKeyedCollection) {\n      concatSeq = concatSeq.toKeyedSeq();\n    } else if (!isIndexed(collection)) {\n      concatSeq = concatSeq.toSetSeq();\n    }\n    concatSeq = concatSeq.flatten(true);\n    concatSeq.size = iters.reduce(function (sum, seq) {\n      if (sum !== undefined) {\n        var size = seq.size;\n        if (size !== undefined) {\n          return sum + size;\n        }\n      }\n    }, 0);\n    return concatSeq;\n  }\n\n  function flattenFactory(collection, depth, useKeys) {\n    var flatSequence = makeSequence(collection);\n    flatSequence.__iterateUncached = function (fn, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterate(fn, reverse);\n      }\n      var iterations = 0;\n      var stopped = false;\n      function flatDeep(iter, currentDepth) {\n        iter.__iterate(function (v, k) {\n          if ((!depth || currentDepth < depth) && isCollection(v)) {\n            flatDeep(v, currentDepth + 1);\n          } else {\n            iterations++;\n            if (fn(v, useKeys ? k : iterations - 1, flatSequence) === false) {\n              stopped = true;\n            }\n          }\n          return !stopped;\n        }, reverse);\n      }\n      flatDeep(collection, 0);\n      return iterations;\n    };\n    flatSequence.__iteratorUncached = function (type, reverse) {\n      if (reverse) {\n        return this.cacheResult().__iterator(type, reverse);\n      }\n      var iterator = collection.__iterator(type, reverse);\n      var stack = [];\n      var iterations = 0;\n      return new Iterator(function () {\n        while (iterator) {\n          var step = iterator.next();\n          if (step.done !== false) {\n            iterator = stack.pop();\n            continue;\n          }\n          var v = step.value;\n          if (type === ITERATE_ENTRIES) {\n            v = v[1];\n          }\n          if ((!depth || stack.length < depth) && isCollection(v)) {\n            stack.push(iterator);\n            iterator = v.__iterator(type, reverse);\n          } else {\n            return useKeys ? step : iteratorValue(type, iterations++, v, step);\n          }\n        }\n        return iteratorDone();\n      });\n    };\n    return flatSequence;\n  }\n\n  function flatMapFactory(collection, mapper, context) {\n    var coerce = collectionClass(collection);\n    return collection\n      .toSeq()\n      .map(function (v, k) { return coerce(mapper.call(context, v, k, collection)); })\n      .flatten(true);\n  }\n\n  function interposeFactory(collection, separator) {\n    var interposedSequence = makeSequence(collection);\n    interposedSequence.size = collection.size && collection.size * 2 - 1;\n    interposedSequence.__iterateUncached = function (fn, reverse) {\n      var this$1 = this;\n\n      var iterations = 0;\n      collection.__iterate(\n        function (v) { return (!iterations || fn(separator, iterations++, this$1) !== false) &&\n          fn(v, iterations++, this$1) !== false; },\n        reverse\n      );\n      return iterations;\n    };\n    interposedSequence.__iteratorUncached = function (type, reverse) {\n      var iterator = collection.__iterator(ITERATE_VALUES, reverse);\n      var iterations = 0;\n      var step;\n      return new Iterator(function () {\n        if (!step || iterations % 2) {\n          step = iterator.next();\n          if (step.done) {\n            return step;\n          }\n        }\n        return iterations % 2\n          ? iteratorValue(type, iterations++, separator)\n          : iteratorValue(type, iterations++, step.value, step);\n      });\n    };\n    return interposedSequence;\n  }\n\n  function sortFactory(collection, comparator, mapper) {\n    if (!comparator) {\n      comparator = defaultComparator;\n    }\n    var isKeyedCollection = isKeyed(collection);\n    var index = 0;\n    var entries = collection\n      .toSeq()\n      .map(function (v, k) { return [k, v, index++, mapper ? mapper(v, k, collection) : v]; })\n      .valueSeq()\n      .toArray();\n    entries\n      .sort(function (a, b) { return comparator(a[3], b[3]) || a[2] - b[2]; })\n      .forEach(\n        isKeyedCollection\n          ? function (v, i) {\n              entries[i].length = 2;\n            }\n          : function (v, i) {\n              entries[i] = v[1];\n            }\n      );\n    return isKeyedCollection\n      ? KeyedSeq(entries)\n      : isIndexed(collection)\n      ? IndexedSeq(entries)\n      : SetSeq(entries);\n  }\n\n  function maxFactory(collection, comparator, mapper) {\n    if (!comparator) {\n      comparator = defaultComparator;\n    }\n    if (mapper) {\n      var entry = collection\n        .toSeq()\n        .map(function (v, k) { return [v, mapper(v, k, collection)]; })\n        .reduce(function (a, b) { return (maxCompare(comparator, a[1], b[1]) ? b : a); });\n      return entry && entry[0];\n    }\n    return collection.reduce(function (a, b) { return (maxCompare(comparator, a, b) ? b : a); });\n  }\n\n  function maxCompare(comparator, a, b) {\n    var comp = comparator(b, a);\n    // b is considered the new max if the comparator declares them equal, but\n    // they are not equal and b is in fact a nullish value.\n    return (\n      (comp === 0 && b !== a && (b === undefined || b === null || b !== b)) ||\n      comp > 0\n    );\n  }\n\n  function zipWithFactory(keyIter, zipper, iters, zipAll) {\n    var zipSequence = makeSequence(keyIter);\n    var sizes = new ArraySeq(iters).map(function (i) { return i.size; });\n    zipSequence.size = zipAll ? sizes.max() : sizes.min();\n    // Note: this a generic base implementation of __iterate in terms of\n    // __iterator which may be more generically useful in the future.\n    zipSequence.__iterate = function (fn, reverse) {\n      /* generic:\n      var iterator = this.__iterator(ITERATE_ENTRIES, reverse);\n      var step;\n      var iterations = 0;\n      while (!(step = iterator.next()).done) {\n        iterations++;\n        if (fn(step.value[1], step.value[0], this) === false) {\n          break;\n        }\n      }\n      return iterations;\n      */\n      // indexed:\n      var iterator = this.__iterator(ITERATE_VALUES, reverse);\n      var step;\n      var iterations = 0;\n      while (!(step = iterator.next()).done) {\n        if (fn(step.value, iterations++, this) === false) {\n          break;\n        }\n      }\n      return iterations;\n    };\n    zipSequence.__iteratorUncached = function (type, reverse) {\n      var iterators = iters.map(\n        function (i) { return ((i = Collection(i)), getIterator(reverse ? i.reverse() : i)); }\n      );\n      var iterations = 0;\n      var isDone = false;\n      return new Iterator(function () {\n        var steps;\n        if (!isDone) {\n          steps = iterators.map(function (i) { return i.next(); });\n          isDone = zipAll\n            ? steps.every(function (s) { return s.done; })\n            : steps.some(function (s) { return s.done; });\n        }\n        if (isDone) {\n          return iteratorDone();\n        }\n        return iteratorValue(\n          type,\n          iterations++,\n          zipper.apply(\n            null,\n            steps.map(function (s) { return s.value; })\n          )\n        );\n      });\n    };\n    return zipSequence;\n  }\n\n  // #pragma Helper Functions\n\n  function reify(iter, seq) {\n    return iter === seq ? iter : isSeq(iter) ? seq : iter.constructor(seq);\n  }\n\n  function validateEntry(entry) {\n    if (entry !== Object(entry)) {\n      throw new TypeError('Expected [K, V] tuple: ' + entry);\n    }\n  }\n\n  function collectionClass(collection) {\n    return isKeyed(collection)\n      ? KeyedCollection\n      : isIndexed(collection)\n      ? IndexedCollection\n      : SetCollection;\n  }\n\n  function makeSequence(collection) {\n    return Object.create(\n      (isKeyed(collection)\n        ? KeyedSeq\n        : isIndexed(collection)\n        ? IndexedSeq\n        : SetSeq\n      ).prototype\n    );\n  }\n\n  function cacheResultThrough() {\n    if (this._iter.cacheResult) {\n      this._iter.cacheResult();\n      this.size = this._iter.size;\n      return this;\n    }\n    return Seq.prototype.cacheResult.call(this);\n  }\n\n  function defaultComparator(a, b) {\n    if (a === undefined && b === undefined) {\n      return 0;\n    }\n\n    if (a === undefined) {\n      return 1;\n    }\n\n    if (b === undefined) {\n      return -1;\n    }\n\n    return a > b ? 1 : a < b ? -1 : 0;\n  }\n\n  // http://jsperf.com/copy-array-inline\n  function arrCopy(arr, offset) {\n    offset = offset || 0;\n    var len = Math.max(0, arr.length - offset);\n    var newArr = new Array(len);\n    for (var ii = 0; ii < len; ii++) {\n      newArr[ii] = arr[ii + offset];\n    }\n    return newArr;\n  }\n\n  function invariant(condition, error) {\n    if (!condition) { throw new Error(error); }\n  }\n\n  function assertNotInfinite(size) {\n    invariant(\n      size !== Infinity,\n      'Cannot perform this action with an infinite size.'\n    );\n  }\n\n  function coerceKeyPath(keyPath) {\n    if (isArrayLike(keyPath) && typeof keyPath !== 'string') {\n      return keyPath;\n    }\n    if (isOrdered(keyPath)) {\n      return keyPath.toArray();\n    }\n    throw new TypeError(\n      'Invalid keyPath: expected Ordered Collection or Array: ' + keyPath\n    );\n  }\n\n  function isPlainObj(value) {\n    return (\n      value &&\n      (typeof value.constructor !== 'function' ||\n        value.constructor.name === 'Object')\n    );\n  }\n\n  /**\n   * Returns true if the value is a potentially-persistent data structure, either\n   * provided by Immutable.js or a plain Array or Object.\n   */\n  function isDataStructure(value) {\n    return (\n      typeof value === 'object' &&\n      (isImmutable(value) || Array.isArray(value) || isPlainObj(value))\n    );\n  }\n\n  /**\n   * Converts a value to a string, adding quotes if a string was provided.\n   */\n  function quoteString(value) {\n    try {\n      return typeof value === 'string' ? JSON.stringify(value) : String(value);\n    } catch (_ignoreError) {\n      return JSON.stringify(value);\n    }\n  }\n\n  function has(collection, key) {\n    return isImmutable(collection)\n      ? collection.has(key)\n      : isDataStructure(collection) && hasOwnProperty.call(collection, key);\n  }\n\n  function get(collection, key, notSetValue) {\n    return isImmutable(collection)\n      ? collection.get(key, notSetValue)\n      : !has(collection, key)\n      ? notSetValue\n      : typeof collection.get === 'function'\n      ? collection.get(key)\n      : collection[key];\n  }\n\n  function shallowCopy(from) {\n    if (Array.isArray(from)) {\n      return arrCopy(from);\n    }\n    var to = {};\n    for (var key in from) {\n      if (hasOwnProperty.call(from, key)) {\n        to[key] = from[key];\n      }\n    }\n    return to;\n  }\n\n  function remove(collection, key) {\n    if (!isDataStructure(collection)) {\n      throw new TypeError(\n        'Cannot update non-data-structure value: ' + collection\n      );\n    }\n    if (isImmutable(collection)) {\n      if (!collection.remove) {\n        throw new TypeError(\n          'Cannot update immutable value without .remove() method: ' + collection\n        );\n      }\n      return collection.remove(key);\n    }\n    if (!hasOwnProperty.call(collection, key)) {\n      return collection;\n    }\n    var collectionCopy = shallowCopy(collection);\n    if (Array.isArray(collectionCopy)) {\n      collectionCopy.splice(key, 1);\n    } else {\n      delete collectionCopy[key];\n    }\n    return collectionCopy;\n  }\n\n  function set(collection, key, value) {\n    if (!isDataStructure(collection)) {\n      throw new TypeError(\n        'Cannot update non-data-structure value: ' + collection\n      );\n    }\n    if (isImmutable(collection)) {\n      if (!collection.set) {\n        throw new TypeError(\n          'Cannot update immutable value without .set() method: ' + collection\n        );\n      }\n      return collection.set(key, value);\n    }\n    if (hasOwnProperty.call(collection, key) && value === collection[key]) {\n      return collection;\n    }\n    var collectionCopy = shallowCopy(collection);\n    collectionCopy[key] = value;\n    return collectionCopy;\n  }\n\n  function updateIn(collection, keyPath, notSetValue, updater) {\n    if (!updater) {\n      updater = notSetValue;\n      notSetValue = undefined;\n    }\n    var updatedValue = updateInDeeply(\n      isImmutable(collection),\n      collection,\n      coerceKeyPath(keyPath),\n      0,\n      notSetValue,\n      updater\n    );\n    return updatedValue === NOT_SET ? notSetValue : updatedValue;\n  }\n\n  function updateInDeeply(\n    inImmutable,\n    existing,\n    keyPath,\n    i,\n    notSetValue,\n    updater\n  ) {\n    var wasNotSet = existing === NOT_SET;\n    if (i === keyPath.length) {\n      var existingValue = wasNotSet ? notSetValue : existing;\n      var newValue = updater(existingValue);\n      return newValue === existingValue ? existing : newValue;\n    }\n    if (!wasNotSet && !isDataStructure(existing)) {\n      throw new TypeError(\n        'Cannot update within non-data-structure value in path [' +\n          keyPath.slice(0, i).map(quoteString) +\n          ']: ' +\n          existing\n      );\n    }\n    var key = keyPath[i];\n    var nextExisting = wasNotSet ? NOT_SET : get(existing, key, NOT_SET);\n    var nextUpdated = updateInDeeply(\n      nextExisting === NOT_SET ? inImmutable : isImmutable(nextExisting),\n      nextExisting,\n      keyPath,\n      i + 1,\n      notSetValue,\n      updater\n    );\n    return nextUpdated === nextExisting\n      ? existing\n      : nextUpdated === NOT_SET\n      ? remove(existing, key)\n      : set(\n          wasNotSet ? (inImmutable ? emptyMap() : {}) : existing,\n          key,\n          nextUpdated\n        );\n  }\n\n  function setIn(collection, keyPath, value) {\n    return updateIn(collection, keyPath, NOT_SET, function () { return value; });\n  }\n\n  function setIn$1(keyPath, v) {\n    return setIn(this, keyPath, v);\n  }\n\n  function removeIn(collection, keyPath) {\n    return updateIn(collection, keyPath, function () { return NOT_SET; });\n  }\n\n  function deleteIn(keyPath) {\n    return removeIn(this, keyPath);\n  }\n\n  function update(collection, key, notSetValue, updater) {\n    return updateIn(collection, [key], notSetValue, updater);\n  }\n\n  function update$1(key, notSetValue, updater) {\n    return arguments.length === 1\n      ? key(this)\n      : update(this, key, notSetValue, updater);\n  }\n\n  function updateIn$1(keyPath, notSetValue, updater) {\n    return updateIn(this, keyPath, notSetValue, updater);\n  }\n\n  function merge() {\n    var iters = [], len = arguments.length;\n    while ( len-- ) iters[ len ] = arguments[ len ];\n\n    return mergeIntoKeyedWith(this, iters);\n  }\n\n  function mergeWith(merger) {\n    var iters = [], len = arguments.length - 1;\n    while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];\n\n    if (typeof merger !== 'function') {\n      throw new TypeError('Invalid merger function: ' + merger);\n    }\n    return mergeIntoKeyedWith(this, iters, merger);\n  }\n\n  function mergeIntoKeyedWith(collection, collections, merger) {\n    var iters = [];\n    for (var ii = 0; ii < collections.length; ii++) {\n      var collection$1 = KeyedCollection(collections[ii]);\n      if (collection$1.size !== 0) {\n        iters.push(collection$1);\n      }\n    }\n    if (iters.length === 0) {\n      return collection;\n    }\n    if (\n      collection.toSeq().size === 0 &&\n      !collection.__ownerID &&\n      iters.length === 1\n    ) {\n      return collection.constructor(iters[0]);\n    }\n    return collection.withMutations(function (collection) {\n      var mergeIntoCollection = merger\n        ? function (value, key) {\n            update(collection, key, NOT_SET, function (oldVal) { return oldVal === NOT_SET ? value : merger(oldVal, value, key); }\n            );\n          }\n        : function (value, key) {\n            collection.set(key, value);\n          };\n      for (var ii = 0; ii < iters.length; ii++) {\n        iters[ii].forEach(mergeIntoCollection);\n      }\n    });\n  }\n\n  function merge$1(collection) {\n    var sources = [], len = arguments.length - 1;\n    while ( len-- > 0 ) sources[ len ] = arguments[ len + 1 ];\n\n    return mergeWithSources(collection, sources);\n  }\n\n  function mergeWith$1(merger, collection) {\n    var sources = [], len = arguments.length - 2;\n    while ( len-- > 0 ) sources[ len ] = arguments[ len + 2 ];\n\n    return mergeWithSources(collection, sources, merger);\n  }\n\n  function mergeDeep(collection) {\n    var sources = [], len = arguments.length - 1;\n    while ( len-- > 0 ) sources[ len ] = arguments[ len + 1 ];\n\n    return mergeDeepWithSources(collection, sources);\n  }\n\n  function mergeDeepWith(merger, collection) {\n    var sources = [], len = arguments.length - 2;\n    while ( len-- > 0 ) sources[ len ] = arguments[ len + 2 ];\n\n    return mergeDeepWithSources(collection, sources, merger);\n  }\n\n  function mergeDeepWithSources(collection, sources, merger) {\n    return mergeWithSources(collection, sources, deepMergerWith(merger));\n  }\n\n  function mergeWithSources(collection, sources, merger) {\n    if (!isDataStructure(collection)) {\n      throw new TypeError(\n        'Cannot merge into non-data-structure value: ' + collection\n      );\n    }\n    if (isImmutable(collection)) {\n      return typeof merger === 'function' && collection.mergeWith\n        ? collection.mergeWith.apply(collection, [ merger ].concat( sources ))\n        : collection.merge\n        ? collection.merge.apply(collection, sources)\n        : collection.concat.apply(collection, sources);\n    }\n    var isArray = Array.isArray(collection);\n    var merged = collection;\n    var Collection$$1 = isArray ? IndexedCollection : KeyedCollection;\n    var mergeItem = isArray\n      ? function (value) {\n          // Copy on write\n          if (merged === collection) {\n            merged = shallowCopy(merged);\n          }\n          merged.push(value);\n        }\n      : function (value, key) {\n          var hasVal = hasOwnProperty.call(merged, key);\n          var nextVal =\n            hasVal && merger ? merger(merged[key], value, key) : value;\n          if (!hasVal || nextVal !== merged[key]) {\n            // Copy on write\n            if (merged === collection) {\n              merged = shallowCopy(merged);\n            }\n            merged[key] = nextVal;\n          }\n        };\n    for (var i = 0; i < sources.length; i++) {\n      Collection$$1(sources[i]).forEach(mergeItem);\n    }\n    return merged;\n  }\n\n  function deepMergerWith(merger) {\n    function deepMerger(oldValue, newValue, key) {\n      return isDataStructure(oldValue) && isDataStructure(newValue)\n        ? mergeWithSources(oldValue, [newValue], deepMerger)\n        : merger\n        ? merger(oldValue, newValue, key)\n        : newValue;\n    }\n    return deepMerger;\n  }\n\n  function mergeDeep$1() {\n    var iters = [], len = arguments.length;\n    while ( len-- ) iters[ len ] = arguments[ len ];\n\n    return mergeDeepWithSources(this, iters);\n  }\n\n  function mergeDeepWith$1(merger) {\n    var iters = [], len = arguments.length - 1;\n    while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];\n\n    return mergeDeepWithSources(this, iters, merger);\n  }\n\n  function mergeIn(keyPath) {\n    var iters = [], len = arguments.length - 1;\n    while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];\n\n    return updateIn(this, keyPath, emptyMap(), function (m) { return mergeWithSources(m, iters); });\n  }\n\n  function mergeDeepIn(keyPath) {\n    var iters = [], len = arguments.length - 1;\n    while ( len-- > 0 ) iters[ len ] = arguments[ len + 1 ];\n\n    return updateIn(this, keyPath, emptyMap(), function (m) { return mergeDeepWithSources(m, iters); }\n    );\n  }\n\n  function withMutations(fn) {\n    var mutable = this.asMutable();\n    fn(mutable);\n    return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;\n  }\n\n  function asMutable() {\n    return this.__ownerID ? this : this.__ensureOwner(new OwnerID());\n  }\n\n  function asImmutable() {\n    return this.__ensureOwner();\n  }\n\n  function wasAltered() {\n    return this.__altered;\n  }\n\n  var Map = /*@__PURE__*/(function (KeyedCollection$$1) {\n    function Map(value) {\n      return value === null || value === undefined\n        ? emptyMap()\n        : isMap(value) && !isOrdered(value)\n        ? value\n        : emptyMap().withMutations(function (map) {\n            var iter = KeyedCollection$$1(value);\n            assertNotInfinite(iter.size);\n            iter.forEach(function (v, k) { return map.set(k, v); });\n          });\n    }\n\n    if ( KeyedCollection$$1 ) Map.__proto__ = KeyedCollection$$1;\n    Map.prototype = Object.create( KeyedCollection$$1 && KeyedCollection$$1.prototype );\n    Map.prototype.constructor = Map;\n\n    Map.of = function of () {\n      var keyValues = [], len = arguments.length;\n      while ( len-- ) keyValues[ len ] = arguments[ len ];\n\n      return emptyMap().withMutations(function (map) {\n        for (var i = 0; i < keyValues.length; i += 2) {\n          if (i + 1 >= keyValues.length) {\n            throw new Error('Missing value for key: ' + keyValues[i]);\n          }\n          map.set(keyValues[i], keyValues[i + 1]);\n        }\n      });\n    };\n\n    Map.prototype.toString = function toString () {\n      return this.__toString('Map {', '}');\n    };\n\n    // @pragma Access\n\n    Map.prototype.get = function get (k, notSetValue) {\n      return this._root\n        ? this._root.get(0, undefined, k, notSetValue)\n        : notSetValue;\n    };\n\n    // @pragma Modification\n\n    Map.prototype.set = function set (k, v) {\n      return updateMap(this, k, v);\n    };\n\n    Map.prototype.remove = function remove (k) {\n      return updateMap(this, k, NOT_SET);\n    };\n\n    Map.prototype.deleteAll = function deleteAll (keys) {\n      var collection = Collection(keys);\n\n      if (collection.size === 0) {\n        return this;\n      }\n\n      return this.withMutations(function (map) {\n        collection.forEach(function (key) { return map.remove(key); });\n      });\n    };\n\n    Map.prototype.clear = function clear () {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = 0;\n        this._root = null;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return emptyMap();\n    };\n\n    // @pragma Composition\n\n    Map.prototype.sort = function sort (comparator) {\n      // Late binding\n      return OrderedMap(sortFactory(this, comparator));\n    };\n\n    Map.prototype.sortBy = function sortBy (mapper, comparator) {\n      // Late binding\n      return OrderedMap(sortFactory(this, comparator, mapper));\n    };\n\n    Map.prototype.map = function map (mapper, context) {\n      var this$1 = this;\n\n      return this.withMutations(function (map) {\n        map.forEach(function (value, key) {\n          map.set(key, mapper.call(context, value, key, this$1));\n        });\n      });\n    };\n\n    // @pragma Mutability\n\n    Map.prototype.__iterator = function __iterator (type, reverse) {\n      return new MapIterator(this, type, reverse);\n    };\n\n    Map.prototype.__iterate = function __iterate (fn, reverse) {\n      var this$1 = this;\n\n      var iterations = 0;\n      this._root &&\n        this._root.iterate(function (entry) {\n          iterations++;\n          return fn(entry[1], entry[0], this$1);\n        }, reverse);\n      return iterations;\n    };\n\n    Map.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      if (!ownerID) {\n        if (this.size === 0) {\n          return emptyMap();\n        }\n        this.__ownerID = ownerID;\n        this.__altered = false;\n        return this;\n      }\n      return makeMap(this.size, this._root, ownerID, this.__hash);\n    };\n\n    return Map;\n  }(KeyedCollection));\n\n  Map.isMap = isMap;\n\n  var MapPrototype = Map.prototype;\n  MapPrototype[IS_MAP_SYMBOL] = true;\n  MapPrototype[DELETE] = MapPrototype.remove;\n  MapPrototype.removeAll = MapPrototype.deleteAll;\n  MapPrototype.setIn = setIn$1;\n  MapPrototype.removeIn = MapPrototype.deleteIn = deleteIn;\n  MapPrototype.update = update$1;\n  MapPrototype.updateIn = updateIn$1;\n  MapPrototype.merge = MapPrototype.concat = merge;\n  MapPrototype.mergeWith = mergeWith;\n  MapPrototype.mergeDeep = mergeDeep$1;\n  MapPrototype.mergeDeepWith = mergeDeepWith$1;\n  MapPrototype.mergeIn = mergeIn;\n  MapPrototype.mergeDeepIn = mergeDeepIn;\n  MapPrototype.withMutations = withMutations;\n  MapPrototype.wasAltered = wasAltered;\n  MapPrototype.asImmutable = asImmutable;\n  MapPrototype['@@transducer/init'] = MapPrototype.asMutable = asMutable;\n  MapPrototype['@@transducer/step'] = function (result, arr) {\n    return result.set(arr[0], arr[1]);\n  };\n  MapPrototype['@@transducer/result'] = function (obj) {\n    return obj.asImmutable();\n  };\n\n  // #pragma Trie Nodes\n\n  var ArrayMapNode = function ArrayMapNode(ownerID, entries) {\n    this.ownerID = ownerID;\n    this.entries = entries;\n  };\n\n  ArrayMapNode.prototype.get = function get (shift, keyHash, key, notSetValue) {\n    var entries = this.entries;\n    for (var ii = 0, len = entries.length; ii < len; ii++) {\n      if (is(key, entries[ii][0])) {\n        return entries[ii][1];\n      }\n    }\n    return notSetValue;\n  };\n\n  ArrayMapNode.prototype.update = function update (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n    var removed = value === NOT_SET;\n\n    var entries = this.entries;\n    var idx = 0;\n    var len = entries.length;\n    for (; idx < len; idx++) {\n      if (is(key, entries[idx][0])) {\n        break;\n      }\n    }\n    var exists = idx < len;\n\n    if (exists ? entries[idx][1] === value : removed) {\n      return this;\n    }\n\n    SetRef(didAlter);\n    (removed || !exists) && SetRef(didChangeSize);\n\n    if (removed && entries.length === 1) {\n      return; // undefined\n    }\n\n    if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {\n      return createNodes(ownerID, entries, key, value);\n    }\n\n    var isEditable = ownerID && ownerID === this.ownerID;\n    var newEntries = isEditable ? entries : arrCopy(entries);\n\n    if (exists) {\n      if (removed) {\n        idx === len - 1\n          ? newEntries.pop()\n          : (newEntries[idx] = newEntries.pop());\n      } else {\n        newEntries[idx] = [key, value];\n      }\n    } else {\n      newEntries.push([key, value]);\n    }\n\n    if (isEditable) {\n      this.entries = newEntries;\n      return this;\n    }\n\n    return new ArrayMapNode(ownerID, newEntries);\n  };\n\n  var BitmapIndexedNode = function BitmapIndexedNode(ownerID, bitmap, nodes) {\n    this.ownerID = ownerID;\n    this.bitmap = bitmap;\n    this.nodes = nodes;\n  };\n\n  BitmapIndexedNode.prototype.get = function get (shift, keyHash, key, notSetValue) {\n    if (keyHash === undefined) {\n      keyHash = hash(key);\n    }\n    var bit = 1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK);\n    var bitmap = this.bitmap;\n    return (bitmap & bit) === 0\n      ? notSetValue\n      : this.nodes[popCount(bitmap & (bit - 1))].get(\n          shift + SHIFT,\n          keyHash,\n          key,\n          notSetValue\n        );\n  };\n\n  BitmapIndexedNode.prototype.update = function update (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n    if (keyHash === undefined) {\n      keyHash = hash(key);\n    }\n    var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n    var bit = 1 << keyHashFrag;\n    var bitmap = this.bitmap;\n    var exists = (bitmap & bit) !== 0;\n\n    if (!exists && value === NOT_SET) {\n      return this;\n    }\n\n    var idx = popCount(bitmap & (bit - 1));\n    var nodes = this.nodes;\n    var node = exists ? nodes[idx] : undefined;\n    var newNode = updateNode(\n      node,\n      ownerID,\n      shift + SHIFT,\n      keyHash,\n      key,\n      value,\n      didChangeSize,\n      didAlter\n    );\n\n    if (newNode === node) {\n      return this;\n    }\n\n    if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {\n      return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);\n    }\n\n    if (\n      exists &&\n      !newNode &&\n      nodes.length === 2 &&\n      isLeafNode(nodes[idx ^ 1])\n    ) {\n      return nodes[idx ^ 1];\n    }\n\n    if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {\n      return newNode;\n    }\n\n    var isEditable = ownerID && ownerID === this.ownerID;\n    var newBitmap = exists ? (newNode ? bitmap : bitmap ^ bit) : bitmap | bit;\n    var newNodes = exists\n      ? newNode\n        ? setAt(nodes, idx, newNode, isEditable)\n        : spliceOut(nodes, idx, isEditable)\n      : spliceIn(nodes, idx, newNode, isEditable);\n\n    if (isEditable) {\n      this.bitmap = newBitmap;\n      this.nodes = newNodes;\n      return this;\n    }\n\n    return new BitmapIndexedNode(ownerID, newBitmap, newNodes);\n  };\n\n  var HashArrayMapNode = function HashArrayMapNode(ownerID, count, nodes) {\n    this.ownerID = ownerID;\n    this.count = count;\n    this.nodes = nodes;\n  };\n\n  HashArrayMapNode.prototype.get = function get (shift, keyHash, key, notSetValue) {\n    if (keyHash === undefined) {\n      keyHash = hash(key);\n    }\n    var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n    var node = this.nodes[idx];\n    return node\n      ? node.get(shift + SHIFT, keyHash, key, notSetValue)\n      : notSetValue;\n  };\n\n  HashArrayMapNode.prototype.update = function update (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n    if (keyHash === undefined) {\n      keyHash = hash(key);\n    }\n    var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n    var removed = value === NOT_SET;\n    var nodes = this.nodes;\n    var node = nodes[idx];\n\n    if (removed && !node) {\n      return this;\n    }\n\n    var newNode = updateNode(\n      node,\n      ownerID,\n      shift + SHIFT,\n      keyHash,\n      key,\n      value,\n      didChangeSize,\n      didAlter\n    );\n    if (newNode === node) {\n      return this;\n    }\n\n    var newCount = this.count;\n    if (!node) {\n      newCount++;\n    } else if (!newNode) {\n      newCount--;\n      if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {\n        return packNodes(ownerID, nodes, newCount, idx);\n      }\n    }\n\n    var isEditable = ownerID && ownerID === this.ownerID;\n    var newNodes = setAt(nodes, idx, newNode, isEditable);\n\n    if (isEditable) {\n      this.count = newCount;\n      this.nodes = newNodes;\n      return this;\n    }\n\n    return new HashArrayMapNode(ownerID, newCount, newNodes);\n  };\n\n  var HashCollisionNode = function HashCollisionNode(ownerID, keyHash, entries) {\n    this.ownerID = ownerID;\n    this.keyHash = keyHash;\n    this.entries = entries;\n  };\n\n  HashCollisionNode.prototype.get = function get (shift, keyHash, key, notSetValue) {\n    var entries = this.entries;\n    for (var ii = 0, len = entries.length; ii < len; ii++) {\n      if (is(key, entries[ii][0])) {\n        return entries[ii][1];\n      }\n    }\n    return notSetValue;\n  };\n\n  HashCollisionNode.prototype.update = function update (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n    if (keyHash === undefined) {\n      keyHash = hash(key);\n    }\n\n    var removed = value === NOT_SET;\n\n    if (keyHash !== this.keyHash) {\n      if (removed) {\n        return this;\n      }\n      SetRef(didAlter);\n      SetRef(didChangeSize);\n      return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);\n    }\n\n    var entries = this.entries;\n    var idx = 0;\n    var len = entries.length;\n    for (; idx < len; idx++) {\n      if (is(key, entries[idx][0])) {\n        break;\n      }\n    }\n    var exists = idx < len;\n\n    if (exists ? entries[idx][1] === value : removed) {\n      return this;\n    }\n\n    SetRef(didAlter);\n    (removed || !exists) && SetRef(didChangeSize);\n\n    if (removed && len === 2) {\n      return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);\n    }\n\n    var isEditable = ownerID && ownerID === this.ownerID;\n    var newEntries = isEditable ? entries : arrCopy(entries);\n\n    if (exists) {\n      if (removed) {\n        idx === len - 1\n          ? newEntries.pop()\n          : (newEntries[idx] = newEntries.pop());\n      } else {\n        newEntries[idx] = [key, value];\n      }\n    } else {\n      newEntries.push([key, value]);\n    }\n\n    if (isEditable) {\n      this.entries = newEntries;\n      return this;\n    }\n\n    return new HashCollisionNode(ownerID, this.keyHash, newEntries);\n  };\n\n  var ValueNode = function ValueNode(ownerID, keyHash, entry) {\n    this.ownerID = ownerID;\n    this.keyHash = keyHash;\n    this.entry = entry;\n  };\n\n  ValueNode.prototype.get = function get (shift, keyHash, key, notSetValue) {\n    return is(key, this.entry[0]) ? this.entry[1] : notSetValue;\n  };\n\n  ValueNode.prototype.update = function update (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {\n    var removed = value === NOT_SET;\n    var keyMatch = is(key, this.entry[0]);\n    if (keyMatch ? value === this.entry[1] : removed) {\n      return this;\n    }\n\n    SetRef(didAlter);\n\n    if (removed) {\n      SetRef(didChangeSize);\n      return; // undefined\n    }\n\n    if (keyMatch) {\n      if (ownerID && ownerID === this.ownerID) {\n        this.entry[1] = value;\n        return this;\n      }\n      return new ValueNode(ownerID, this.keyHash, [key, value]);\n    }\n\n    SetRef(didChangeSize);\n    return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);\n  };\n\n  // #pragma Iterators\n\n  ArrayMapNode.prototype.iterate = HashCollisionNode.prototype.iterate = function (\n    fn,\n    reverse\n  ) {\n    var entries = this.entries;\n    for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {\n      if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {\n        return false;\n      }\n    }\n  };\n\n  BitmapIndexedNode.prototype.iterate = HashArrayMapNode.prototype.iterate = function (\n    fn,\n    reverse\n  ) {\n    var nodes = this.nodes;\n    for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {\n      var node = nodes[reverse ? maxIndex - ii : ii];\n      if (node && node.iterate(fn, reverse) === false) {\n        return false;\n      }\n    }\n  };\n\n  // eslint-disable-next-line no-unused-vars\n  ValueNode.prototype.iterate = function (fn, reverse) {\n    return fn(this.entry);\n  };\n\n  var MapIterator = /*@__PURE__*/(function (Iterator$$1) {\n    function MapIterator(map, type, reverse) {\n      this._type = type;\n      this._reverse = reverse;\n      this._stack = map._root && mapIteratorFrame(map._root);\n    }\n\n    if ( Iterator$$1 ) MapIterator.__proto__ = Iterator$$1;\n    MapIterator.prototype = Object.create( Iterator$$1 && Iterator$$1.prototype );\n    MapIterator.prototype.constructor = MapIterator;\n\n    MapIterator.prototype.next = function next () {\n      var type = this._type;\n      var stack = this._stack;\n      while (stack) {\n        var node = stack.node;\n        var index = stack.index++;\n        var maxIndex = (void 0);\n        if (node.entry) {\n          if (index === 0) {\n            return mapIteratorValue(type, node.entry);\n          }\n        } else if (node.entries) {\n          maxIndex = node.entries.length - 1;\n          if (index <= maxIndex) {\n            return mapIteratorValue(\n              type,\n              node.entries[this._reverse ? maxIndex - index : index]\n            );\n          }\n        } else {\n          maxIndex = node.nodes.length - 1;\n          if (index <= maxIndex) {\n            var subNode = node.nodes[this._reverse ? maxIndex - index : index];\n            if (subNode) {\n              if (subNode.entry) {\n                return mapIteratorValue(type, subNode.entry);\n              }\n              stack = this._stack = mapIteratorFrame(subNode, stack);\n            }\n            continue;\n          }\n        }\n        stack = this._stack = this._stack.__prev;\n      }\n      return iteratorDone();\n    };\n\n    return MapIterator;\n  }(Iterator));\n\n  function mapIteratorValue(type, entry) {\n    return iteratorValue(type, entry[0], entry[1]);\n  }\n\n  function mapIteratorFrame(node, prev) {\n    return {\n      node: node,\n      index: 0,\n      __prev: prev,\n    };\n  }\n\n  function makeMap(size, root, ownerID, hash$$1) {\n    var map = Object.create(MapPrototype);\n    map.size = size;\n    map._root = root;\n    map.__ownerID = ownerID;\n    map.__hash = hash$$1;\n    map.__altered = false;\n    return map;\n  }\n\n  var EMPTY_MAP;\n  function emptyMap() {\n    return EMPTY_MAP || (EMPTY_MAP = makeMap(0));\n  }\n\n  function updateMap(map, k, v) {\n    var newRoot;\n    var newSize;\n    if (!map._root) {\n      if (v === NOT_SET) {\n        return map;\n      }\n      newSize = 1;\n      newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);\n    } else {\n      var didChangeSize = MakeRef();\n      var didAlter = MakeRef();\n      newRoot = updateNode(\n        map._root,\n        map.__ownerID,\n        0,\n        undefined,\n        k,\n        v,\n        didChangeSize,\n        didAlter\n      );\n      if (!didAlter.value) {\n        return map;\n      }\n      newSize = map.size + (didChangeSize.value ? (v === NOT_SET ? -1 : 1) : 0);\n    }\n    if (map.__ownerID) {\n      map.size = newSize;\n      map._root = newRoot;\n      map.__hash = undefined;\n      map.__altered = true;\n      return map;\n    }\n    return newRoot ? makeMap(newSize, newRoot) : emptyMap();\n  }\n\n  function updateNode(\n    node,\n    ownerID,\n    shift,\n    keyHash,\n    key,\n    value,\n    didChangeSize,\n    didAlter\n  ) {\n    if (!node) {\n      if (value === NOT_SET) {\n        return node;\n      }\n      SetRef(didAlter);\n      SetRef(didChangeSize);\n      return new ValueNode(ownerID, keyHash, [key, value]);\n    }\n    return node.update(\n      ownerID,\n      shift,\n      keyHash,\n      key,\n      value,\n      didChangeSize,\n      didAlter\n    );\n  }\n\n  function isLeafNode(node) {\n    return (\n      node.constructor === ValueNode || node.constructor === HashCollisionNode\n    );\n  }\n\n  function mergeIntoNode(node, ownerID, shift, keyHash, entry) {\n    if (node.keyHash === keyHash) {\n      return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);\n    }\n\n    var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;\n    var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;\n\n    var newNode;\n    var nodes =\n      idx1 === idx2\n        ? [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)]\n        : ((newNode = new ValueNode(ownerID, keyHash, entry)),\n          idx1 < idx2 ? [node, newNode] : [newNode, node]);\n\n    return new BitmapIndexedNode(ownerID, (1 << idx1) | (1 << idx2), nodes);\n  }\n\n  function createNodes(ownerID, entries, key, value) {\n    if (!ownerID) {\n      ownerID = new OwnerID();\n    }\n    var node = new ValueNode(ownerID, hash(key), [key, value]);\n    for (var ii = 0; ii < entries.length; ii++) {\n      var entry = entries[ii];\n      node = node.update(ownerID, 0, undefined, entry[0], entry[1]);\n    }\n    return node;\n  }\n\n  function packNodes(ownerID, nodes, count, excluding) {\n    var bitmap = 0;\n    var packedII = 0;\n    var packedNodes = new Array(count);\n    for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {\n      var node = nodes[ii];\n      if (node !== undefined && ii !== excluding) {\n        bitmap |= bit;\n        packedNodes[packedII++] = node;\n      }\n    }\n    return new BitmapIndexedNode(ownerID, bitmap, packedNodes);\n  }\n\n  function expandNodes(ownerID, nodes, bitmap, including, node) {\n    var count = 0;\n    var expandedNodes = new Array(SIZE);\n    for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {\n      expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;\n    }\n    expandedNodes[including] = node;\n    return new HashArrayMapNode(ownerID, count + 1, expandedNodes);\n  }\n\n  function popCount(x) {\n    x -= (x >> 1) & 0x55555555;\n    x = (x & 0x33333333) + ((x >> 2) & 0x33333333);\n    x = (x + (x >> 4)) & 0x0f0f0f0f;\n    x += x >> 8;\n    x += x >> 16;\n    return x & 0x7f;\n  }\n\n  function setAt(array, idx, val, canEdit) {\n    var newArray = canEdit ? array : arrCopy(array);\n    newArray[idx] = val;\n    return newArray;\n  }\n\n  function spliceIn(array, idx, val, canEdit) {\n    var newLen = array.length + 1;\n    if (canEdit && idx + 1 === newLen) {\n      array[idx] = val;\n      return array;\n    }\n    var newArray = new Array(newLen);\n    var after = 0;\n    for (var ii = 0; ii < newLen; ii++) {\n      if (ii === idx) {\n        newArray[ii] = val;\n        after = -1;\n      } else {\n        newArray[ii] = array[ii + after];\n      }\n    }\n    return newArray;\n  }\n\n  function spliceOut(array, idx, canEdit) {\n    var newLen = array.length - 1;\n    if (canEdit && idx === newLen) {\n      array.pop();\n      return array;\n    }\n    var newArray = new Array(newLen);\n    var after = 0;\n    for (var ii = 0; ii < newLen; ii++) {\n      if (ii === idx) {\n        after = 1;\n      }\n      newArray[ii] = array[ii + after];\n    }\n    return newArray;\n  }\n\n  var MAX_ARRAY_MAP_SIZE = SIZE / 4;\n  var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;\n  var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;\n\n  var IS_LIST_SYMBOL = '@@__IMMUTABLE_LIST__@@';\n\n  function isList(maybeList) {\n    return Boolean(maybeList && maybeList[IS_LIST_SYMBOL]);\n  }\n\n  var List = /*@__PURE__*/(function (IndexedCollection$$1) {\n    function List(value) {\n      var empty = emptyList();\n      if (value === null || value === undefined) {\n        return empty;\n      }\n      if (isList(value)) {\n        return value;\n      }\n      var iter = IndexedCollection$$1(value);\n      var size = iter.size;\n      if (size === 0) {\n        return empty;\n      }\n      assertNotInfinite(size);\n      if (size > 0 && size < SIZE) {\n        return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));\n      }\n      return empty.withMutations(function (list) {\n        list.setSize(size);\n        iter.forEach(function (v, i) { return list.set(i, v); });\n      });\n    }\n\n    if ( IndexedCollection$$1 ) List.__proto__ = IndexedCollection$$1;\n    List.prototype = Object.create( IndexedCollection$$1 && IndexedCollection$$1.prototype );\n    List.prototype.constructor = List;\n\n    List.of = function of (/*...values*/) {\n      return this(arguments);\n    };\n\n    List.prototype.toString = function toString () {\n      return this.__toString('List [', ']');\n    };\n\n    // @pragma Access\n\n    List.prototype.get = function get (index, notSetValue) {\n      index = wrapIndex(this, index);\n      if (index >= 0 && index < this.size) {\n        index += this._origin;\n        var node = listNodeFor(this, index);\n        return node && node.array[index & MASK];\n      }\n      return notSetValue;\n    };\n\n    // @pragma Modification\n\n    List.prototype.set = function set (index, value) {\n      return updateList(this, index, value);\n    };\n\n    List.prototype.remove = function remove (index) {\n      return !this.has(index)\n        ? this\n        : index === 0\n        ? this.shift()\n        : index === this.size - 1\n        ? this.pop()\n        : this.splice(index, 1);\n    };\n\n    List.prototype.insert = function insert (index, value) {\n      return this.splice(index, 0, value);\n    };\n\n    List.prototype.clear = function clear () {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = this._origin = this._capacity = 0;\n        this._level = SHIFT;\n        this._root = this._tail = null;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return emptyList();\n    };\n\n    List.prototype.push = function push (/*...values*/) {\n      var values = arguments;\n      var oldSize = this.size;\n      return this.withMutations(function (list) {\n        setListBounds(list, 0, oldSize + values.length);\n        for (var ii = 0; ii < values.length; ii++) {\n          list.set(oldSize + ii, values[ii]);\n        }\n      });\n    };\n\n    List.prototype.pop = function pop () {\n      return setListBounds(this, 0, -1);\n    };\n\n    List.prototype.unshift = function unshift (/*...values*/) {\n      var values = arguments;\n      return this.withMutations(function (list) {\n        setListBounds(list, -values.length);\n        for (var ii = 0; ii < values.length; ii++) {\n          list.set(ii, values[ii]);\n        }\n      });\n    };\n\n    List.prototype.shift = function shift () {\n      return setListBounds(this, 1);\n    };\n\n    // @pragma Composition\n\n    List.prototype.concat = function concat (/*...collections*/) {\n      var arguments$1 = arguments;\n\n      var seqs = [];\n      for (var i = 0; i < arguments.length; i++) {\n        var argument = arguments$1[i];\n        var seq = IndexedCollection$$1(\n          typeof argument !== 'string' && hasIterator(argument)\n            ? argument\n            : [argument]\n        );\n        if (seq.size !== 0) {\n          seqs.push(seq);\n        }\n      }\n      if (seqs.length === 0) {\n        return this;\n      }\n      if (this.size === 0 && !this.__ownerID && seqs.length === 1) {\n        return this.constructor(seqs[0]);\n      }\n      return this.withMutations(function (list) {\n        seqs.forEach(function (seq) { return seq.forEach(function (value) { return list.push(value); }); });\n      });\n    };\n\n    List.prototype.setSize = function setSize (size) {\n      return setListBounds(this, 0, size);\n    };\n\n    List.prototype.map = function map (mapper, context) {\n      var this$1 = this;\n\n      return this.withMutations(function (list) {\n        for (var i = 0; i < this$1.size; i++) {\n          list.set(i, mapper.call(context, list.get(i), i, this$1));\n        }\n      });\n    };\n\n    // @pragma Iteration\n\n    List.prototype.slice = function slice (begin, end) {\n      var size = this.size;\n      if (wholeSlice(begin, end, size)) {\n        return this;\n      }\n      return setListBounds(\n        this,\n        resolveBegin(begin, size),\n        resolveEnd(end, size)\n      );\n    };\n\n    List.prototype.__iterator = function __iterator (type, reverse) {\n      var index = reverse ? this.size : 0;\n      var values = iterateList(this, reverse);\n      return new Iterator(function () {\n        var value = values();\n        return value === DONE\n          ? iteratorDone()\n          : iteratorValue(type, reverse ? --index : index++, value);\n      });\n    };\n\n    List.prototype.__iterate = function __iterate (fn, reverse) {\n      var index = reverse ? this.size : 0;\n      var values = iterateList(this, reverse);\n      var value;\n      while ((value = values()) !== DONE) {\n        if (fn(value, reverse ? --index : index++, this) === false) {\n          break;\n        }\n      }\n      return index;\n    };\n\n    List.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      if (!ownerID) {\n        if (this.size === 0) {\n          return emptyList();\n        }\n        this.__ownerID = ownerID;\n        this.__altered = false;\n        return this;\n      }\n      return makeList(\n        this._origin,\n        this._capacity,\n        this._level,\n        this._root,\n        this._tail,\n        ownerID,\n        this.__hash\n      );\n    };\n\n    return List;\n  }(IndexedCollection));\n\n  List.isList = isList;\n\n  var ListPrototype = List.prototype;\n  ListPrototype[IS_LIST_SYMBOL] = true;\n  ListPrototype[DELETE] = ListPrototype.remove;\n  ListPrototype.merge = ListPrototype.concat;\n  ListPrototype.setIn = setIn$1;\n  ListPrototype.deleteIn = ListPrototype.removeIn = deleteIn;\n  ListPrototype.update = update$1;\n  ListPrototype.updateIn = updateIn$1;\n  ListPrototype.mergeIn = mergeIn;\n  ListPrototype.mergeDeepIn = mergeDeepIn;\n  ListPrototype.withMutations = withMutations;\n  ListPrototype.wasAltered = wasAltered;\n  ListPrototype.asImmutable = asImmutable;\n  ListPrototype['@@transducer/init'] = ListPrototype.asMutable = asMutable;\n  ListPrototype['@@transducer/step'] = function (result, arr) {\n    return result.push(arr);\n  };\n  ListPrototype['@@transducer/result'] = function (obj) {\n    return obj.asImmutable();\n  };\n\n  var VNode = function VNode(array, ownerID) {\n    this.array = array;\n    this.ownerID = ownerID;\n  };\n\n  // TODO: seems like these methods are very similar\n\n  VNode.prototype.removeBefore = function removeBefore (ownerID, level, index) {\n    if (index === level ? 1 << level : this.array.length === 0) {\n      return this;\n    }\n    var originIndex = (index >>> level) & MASK;\n    if (originIndex >= this.array.length) {\n      return new VNode([], ownerID);\n    }\n    var removingFirst = originIndex === 0;\n    var newChild;\n    if (level > 0) {\n      var oldChild = this.array[originIndex];\n      newChild =\n        oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);\n      if (newChild === oldChild && removingFirst) {\n        return this;\n      }\n    }\n    if (removingFirst && !newChild) {\n      return this;\n    }\n    var editable = editableVNode(this, ownerID);\n    if (!removingFirst) {\n      for (var ii = 0; ii < originIndex; ii++) {\n        editable.array[ii] = undefined;\n      }\n    }\n    if (newChild) {\n      editable.array[originIndex] = newChild;\n    }\n    return editable;\n  };\n\n  VNode.prototype.removeAfter = function removeAfter (ownerID, level, index) {\n    if (index === (level ? 1 << level : 0) || this.array.length === 0) {\n      return this;\n    }\n    var sizeIndex = ((index - 1) >>> level) & MASK;\n    if (sizeIndex >= this.array.length) {\n      return this;\n    }\n\n    var newChild;\n    if (level > 0) {\n      var oldChild = this.array[sizeIndex];\n      newChild =\n        oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);\n      if (newChild === oldChild && sizeIndex === this.array.length - 1) {\n        return this;\n      }\n    }\n\n    var editable = editableVNode(this, ownerID);\n    editable.array.splice(sizeIndex + 1);\n    if (newChild) {\n      editable.array[sizeIndex] = newChild;\n    }\n    return editable;\n  };\n\n  var DONE = {};\n\n  function iterateList(list, reverse) {\n    var left = list._origin;\n    var right = list._capacity;\n    var tailPos = getTailOffset(right);\n    var tail = list._tail;\n\n    return iterateNodeOrLeaf(list._root, list._level, 0);\n\n    function iterateNodeOrLeaf(node, level, offset) {\n      return level === 0\n        ? iterateLeaf(node, offset)\n        : iterateNode(node, level, offset);\n    }\n\n    function iterateLeaf(node, offset) {\n      var array = offset === tailPos ? tail && tail.array : node && node.array;\n      var from = offset > left ? 0 : left - offset;\n      var to = right - offset;\n      if (to > SIZE) {\n        to = SIZE;\n      }\n      return function () {\n        if (from === to) {\n          return DONE;\n        }\n        var idx = reverse ? --to : from++;\n        return array && array[idx];\n      };\n    }\n\n    function iterateNode(node, level, offset) {\n      var values;\n      var array = node && node.array;\n      var from = offset > left ? 0 : (left - offset) >> level;\n      var to = ((right - offset) >> level) + 1;\n      if (to > SIZE) {\n        to = SIZE;\n      }\n      return function () {\n        while (true) {\n          if (values) {\n            var value = values();\n            if (value !== DONE) {\n              return value;\n            }\n            values = null;\n          }\n          if (from === to) {\n            return DONE;\n          }\n          var idx = reverse ? --to : from++;\n          values = iterateNodeOrLeaf(\n            array && array[idx],\n            level - SHIFT,\n            offset + (idx << level)\n          );\n        }\n      };\n    }\n  }\n\n  function makeList(origin, capacity, level, root, tail, ownerID, hash) {\n    var list = Object.create(ListPrototype);\n    list.size = capacity - origin;\n    list._origin = origin;\n    list._capacity = capacity;\n    list._level = level;\n    list._root = root;\n    list._tail = tail;\n    list.__ownerID = ownerID;\n    list.__hash = hash;\n    list.__altered = false;\n    return list;\n  }\n\n  var EMPTY_LIST;\n  function emptyList() {\n    return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));\n  }\n\n  function updateList(list, index, value) {\n    index = wrapIndex(list, index);\n\n    if (index !== index) {\n      return list;\n    }\n\n    if (index >= list.size || index < 0) {\n      return list.withMutations(function (list) {\n        index < 0\n          ? setListBounds(list, index).set(0, value)\n          : setListBounds(list, 0, index + 1).set(index, value);\n      });\n    }\n\n    index += list._origin;\n\n    var newTail = list._tail;\n    var newRoot = list._root;\n    var didAlter = MakeRef();\n    if (index >= getTailOffset(list._capacity)) {\n      newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);\n    } else {\n      newRoot = updateVNode(\n        newRoot,\n        list.__ownerID,\n        list._level,\n        index,\n        value,\n        didAlter\n      );\n    }\n\n    if (!didAlter.value) {\n      return list;\n    }\n\n    if (list.__ownerID) {\n      list._root = newRoot;\n      list._tail = newTail;\n      list.__hash = undefined;\n      list.__altered = true;\n      return list;\n    }\n    return makeList(list._origin, list._capacity, list._level, newRoot, newTail);\n  }\n\n  function updateVNode(node, ownerID, level, index, value, didAlter) {\n    var idx = (index >>> level) & MASK;\n    var nodeHas = node && idx < node.array.length;\n    if (!nodeHas && value === undefined) {\n      return node;\n    }\n\n    var newNode;\n\n    if (level > 0) {\n      var lowerNode = node && node.array[idx];\n      var newLowerNode = updateVNode(\n        lowerNode,\n        ownerID,\n        level - SHIFT,\n        index,\n        value,\n        didAlter\n      );\n      if (newLowerNode === lowerNode) {\n        return node;\n      }\n      newNode = editableVNode(node, ownerID);\n      newNode.array[idx] = newLowerNode;\n      return newNode;\n    }\n\n    if (nodeHas && node.array[idx] === value) {\n      return node;\n    }\n\n    if (didAlter) {\n      SetRef(didAlter);\n    }\n\n    newNode = editableVNode(node, ownerID);\n    if (value === undefined && idx === newNode.array.length - 1) {\n      newNode.array.pop();\n    } else {\n      newNode.array[idx] = value;\n    }\n    return newNode;\n  }\n\n  function editableVNode(node, ownerID) {\n    if (ownerID && node && ownerID === node.ownerID) {\n      return node;\n    }\n    return new VNode(node ? node.array.slice() : [], ownerID);\n  }\n\n  function listNodeFor(list, rawIndex) {\n    if (rawIndex >= getTailOffset(list._capacity)) {\n      return list._tail;\n    }\n    if (rawIndex < 1 << (list._level + SHIFT)) {\n      var node = list._root;\n      var level = list._level;\n      while (node && level > 0) {\n        node = node.array[(rawIndex >>> level) & MASK];\n        level -= SHIFT;\n      }\n      return node;\n    }\n  }\n\n  function setListBounds(list, begin, end) {\n    // Sanitize begin & end using this shorthand for ToInt32(argument)\n    // http://www.ecma-international.org/ecma-262/6.0/#sec-toint32\n    if (begin !== undefined) {\n      begin |= 0;\n    }\n    if (end !== undefined) {\n      end |= 0;\n    }\n    var owner = list.__ownerID || new OwnerID();\n    var oldOrigin = list._origin;\n    var oldCapacity = list._capacity;\n    var newOrigin = oldOrigin + begin;\n    var newCapacity =\n      end === undefined\n        ? oldCapacity\n        : end < 0\n        ? oldCapacity + end\n        : oldOrigin + end;\n    if (newOrigin === oldOrigin && newCapacity === oldCapacity) {\n      return list;\n    }\n\n    // If it's going to end after it starts, it's empty.\n    if (newOrigin >= newCapacity) {\n      return list.clear();\n    }\n\n    var newLevel = list._level;\n    var newRoot = list._root;\n\n    // New origin might need creating a higher root.\n    var offsetShift = 0;\n    while (newOrigin + offsetShift < 0) {\n      newRoot = new VNode(\n        newRoot && newRoot.array.length ? [undefined, newRoot] : [],\n        owner\n      );\n      newLevel += SHIFT;\n      offsetShift += 1 << newLevel;\n    }\n    if (offsetShift) {\n      newOrigin += offsetShift;\n      oldOrigin += offsetShift;\n      newCapacity += offsetShift;\n      oldCapacity += offsetShift;\n    }\n\n    var oldTailOffset = getTailOffset(oldCapacity);\n    var newTailOffset = getTailOffset(newCapacity);\n\n    // New size might need creating a higher root.\n    while (newTailOffset >= 1 << (newLevel + SHIFT)) {\n      newRoot = new VNode(\n        newRoot && newRoot.array.length ? [newRoot] : [],\n        owner\n      );\n      newLevel += SHIFT;\n    }\n\n    // Locate or create the new tail.\n    var oldTail = list._tail;\n    var newTail =\n      newTailOffset < oldTailOffset\n        ? listNodeFor(list, newCapacity - 1)\n        : newTailOffset > oldTailOffset\n        ? new VNode([], owner)\n        : oldTail;\n\n    // Merge Tail into tree.\n    if (\n      oldTail &&\n      newTailOffset > oldTailOffset &&\n      newOrigin < oldCapacity &&\n      oldTail.array.length\n    ) {\n      newRoot = editableVNode(newRoot, owner);\n      var node = newRoot;\n      for (var level = newLevel; level > SHIFT; level -= SHIFT) {\n        var idx = (oldTailOffset >>> level) & MASK;\n        node = node.array[idx] = editableVNode(node.array[idx], owner);\n      }\n      node.array[(oldTailOffset >>> SHIFT) & MASK] = oldTail;\n    }\n\n    // If the size has been reduced, there's a chance the tail needs to be trimmed.\n    if (newCapacity < oldCapacity) {\n      newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);\n    }\n\n    // If the new origin is within the tail, then we do not need a root.\n    if (newOrigin >= newTailOffset) {\n      newOrigin -= newTailOffset;\n      newCapacity -= newTailOffset;\n      newLevel = SHIFT;\n      newRoot = null;\n      newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);\n\n      // Otherwise, if the root has been trimmed, garbage collect.\n    } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {\n      offsetShift = 0;\n\n      // Identify the new top root node of the subtree of the old root.\n      while (newRoot) {\n        var beginIndex = (newOrigin >>> newLevel) & MASK;\n        if ((beginIndex !== newTailOffset >>> newLevel) & MASK) {\n          break;\n        }\n        if (beginIndex) {\n          offsetShift += (1 << newLevel) * beginIndex;\n        }\n        newLevel -= SHIFT;\n        newRoot = newRoot.array[beginIndex];\n      }\n\n      // Trim the new sides of the new root.\n      if (newRoot && newOrigin > oldOrigin) {\n        newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);\n      }\n      if (newRoot && newTailOffset < oldTailOffset) {\n        newRoot = newRoot.removeAfter(\n          owner,\n          newLevel,\n          newTailOffset - offsetShift\n        );\n      }\n      if (offsetShift) {\n        newOrigin -= offsetShift;\n        newCapacity -= offsetShift;\n      }\n    }\n\n    if (list.__ownerID) {\n      list.size = newCapacity - newOrigin;\n      list._origin = newOrigin;\n      list._capacity = newCapacity;\n      list._level = newLevel;\n      list._root = newRoot;\n      list._tail = newTail;\n      list.__hash = undefined;\n      list.__altered = true;\n      return list;\n    }\n    return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);\n  }\n\n  function getTailOffset(size) {\n    return size < SIZE ? 0 : ((size - 1) >>> SHIFT) << SHIFT;\n  }\n\n  var OrderedMap = /*@__PURE__*/(function (Map$$1) {\n    function OrderedMap(value) {\n      return value === null || value === undefined\n        ? emptyOrderedMap()\n        : isOrderedMap(value)\n        ? value\n        : emptyOrderedMap().withMutations(function (map) {\n            var iter = KeyedCollection(value);\n            assertNotInfinite(iter.size);\n            iter.forEach(function (v, k) { return map.set(k, v); });\n          });\n    }\n\n    if ( Map$$1 ) OrderedMap.__proto__ = Map$$1;\n    OrderedMap.prototype = Object.create( Map$$1 && Map$$1.prototype );\n    OrderedMap.prototype.constructor = OrderedMap;\n\n    OrderedMap.of = function of (/*...values*/) {\n      return this(arguments);\n    };\n\n    OrderedMap.prototype.toString = function toString () {\n      return this.__toString('OrderedMap {', '}');\n    };\n\n    // @pragma Access\n\n    OrderedMap.prototype.get = function get (k, notSetValue) {\n      var index = this._map.get(k);\n      return index !== undefined ? this._list.get(index)[1] : notSetValue;\n    };\n\n    // @pragma Modification\n\n    OrderedMap.prototype.clear = function clear () {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = 0;\n        this._map.clear();\n        this._list.clear();\n        this.__altered = true;\n        return this;\n      }\n      return emptyOrderedMap();\n    };\n\n    OrderedMap.prototype.set = function set (k, v) {\n      return updateOrderedMap(this, k, v);\n    };\n\n    OrderedMap.prototype.remove = function remove (k) {\n      return updateOrderedMap(this, k, NOT_SET);\n    };\n\n    OrderedMap.prototype.__iterate = function __iterate (fn, reverse) {\n      var this$1 = this;\n\n      return this._list.__iterate(\n        function (entry) { return entry && fn(entry[1], entry[0], this$1); },\n        reverse\n      );\n    };\n\n    OrderedMap.prototype.__iterator = function __iterator (type, reverse) {\n      return this._list.fromEntrySeq().__iterator(type, reverse);\n    };\n\n    OrderedMap.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      var newMap = this._map.__ensureOwner(ownerID);\n      var newList = this._list.__ensureOwner(ownerID);\n      if (!ownerID) {\n        if (this.size === 0) {\n          return emptyOrderedMap();\n        }\n        this.__ownerID = ownerID;\n        this.__altered = false;\n        this._map = newMap;\n        this._list = newList;\n        return this;\n      }\n      return makeOrderedMap(newMap, newList, ownerID, this.__hash);\n    };\n\n    return OrderedMap;\n  }(Map));\n\n  OrderedMap.isOrderedMap = isOrderedMap;\n\n  OrderedMap.prototype[IS_ORDERED_SYMBOL] = true;\n  OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;\n\n  function makeOrderedMap(map, list, ownerID, hash) {\n    var omap = Object.create(OrderedMap.prototype);\n    omap.size = map ? map.size : 0;\n    omap._map = map;\n    omap._list = list;\n    omap.__ownerID = ownerID;\n    omap.__hash = hash;\n    omap.__altered = false;\n    return omap;\n  }\n\n  var EMPTY_ORDERED_MAP;\n  function emptyOrderedMap() {\n    return (\n      EMPTY_ORDERED_MAP ||\n      (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()))\n    );\n  }\n\n  function updateOrderedMap(omap, k, v) {\n    var map = omap._map;\n    var list = omap._list;\n    var i = map.get(k);\n    var has = i !== undefined;\n    var newMap;\n    var newList;\n    if (v === NOT_SET) {\n      // removed\n      if (!has) {\n        return omap;\n      }\n      if (list.size >= SIZE && list.size >= map.size * 2) {\n        newList = list.filter(function (entry, idx) { return entry !== undefined && i !== idx; });\n        newMap = newList\n          .toKeyedSeq()\n          .map(function (entry) { return entry[0]; })\n          .flip()\n          .toMap();\n        if (omap.__ownerID) {\n          newMap.__ownerID = newList.__ownerID = omap.__ownerID;\n        }\n      } else {\n        newMap = map.remove(k);\n        newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);\n      }\n    } else if (has) {\n      if (v === list.get(i)[1]) {\n        return omap;\n      }\n      newMap = map;\n      newList = list.set(i, [k, v]);\n    } else {\n      newMap = map.set(k, list.size);\n      newList = list.set(list.size, [k, v]);\n    }\n    if (omap.__ownerID) {\n      omap.size = newMap.size;\n      omap._map = newMap;\n      omap._list = newList;\n      omap.__hash = undefined;\n      omap.__altered = true;\n      return omap;\n    }\n    return makeOrderedMap(newMap, newList);\n  }\n\n  var IS_STACK_SYMBOL = '@@__IMMUTABLE_STACK__@@';\n\n  function isStack(maybeStack) {\n    return Boolean(maybeStack && maybeStack[IS_STACK_SYMBOL]);\n  }\n\n  var Stack = /*@__PURE__*/(function (IndexedCollection$$1) {\n    function Stack(value) {\n      return value === null || value === undefined\n        ? emptyStack()\n        : isStack(value)\n        ? value\n        : emptyStack().pushAll(value);\n    }\n\n    if ( IndexedCollection$$1 ) Stack.__proto__ = IndexedCollection$$1;\n    Stack.prototype = Object.create( IndexedCollection$$1 && IndexedCollection$$1.prototype );\n    Stack.prototype.constructor = Stack;\n\n    Stack.of = function of (/*...values*/) {\n      return this(arguments);\n    };\n\n    Stack.prototype.toString = function toString () {\n      return this.__toString('Stack [', ']');\n    };\n\n    // @pragma Access\n\n    Stack.prototype.get = function get (index, notSetValue) {\n      var head = this._head;\n      index = wrapIndex(this, index);\n      while (head && index--) {\n        head = head.next;\n      }\n      return head ? head.value : notSetValue;\n    };\n\n    Stack.prototype.peek = function peek () {\n      return this._head && this._head.value;\n    };\n\n    // @pragma Modification\n\n    Stack.prototype.push = function push (/*...values*/) {\n      var arguments$1 = arguments;\n\n      if (arguments.length === 0) {\n        return this;\n      }\n      var newSize = this.size + arguments.length;\n      var head = this._head;\n      for (var ii = arguments.length - 1; ii >= 0; ii--) {\n        head = {\n          value: arguments$1[ii],\n          next: head,\n        };\n      }\n      if (this.__ownerID) {\n        this.size = newSize;\n        this._head = head;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return makeStack(newSize, head);\n    };\n\n    Stack.prototype.pushAll = function pushAll (iter) {\n      iter = IndexedCollection$$1(iter);\n      if (iter.size === 0) {\n        return this;\n      }\n      if (this.size === 0 && isStack(iter)) {\n        return iter;\n      }\n      assertNotInfinite(iter.size);\n      var newSize = this.size;\n      var head = this._head;\n      iter.__iterate(function (value) {\n        newSize++;\n        head = {\n          value: value,\n          next: head,\n        };\n      }, /* reverse */ true);\n      if (this.__ownerID) {\n        this.size = newSize;\n        this._head = head;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return makeStack(newSize, head);\n    };\n\n    Stack.prototype.pop = function pop () {\n      return this.slice(1);\n    };\n\n    Stack.prototype.clear = function clear () {\n      if (this.size === 0) {\n        return this;\n      }\n      if (this.__ownerID) {\n        this.size = 0;\n        this._head = undefined;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return emptyStack();\n    };\n\n    Stack.prototype.slice = function slice (begin, end) {\n      if (wholeSlice(begin, end, this.size)) {\n        return this;\n      }\n      var resolvedBegin = resolveBegin(begin, this.size);\n      var resolvedEnd = resolveEnd(end, this.size);\n      if (resolvedEnd !== this.size) {\n        // super.slice(begin, end);\n        return IndexedCollection$$1.prototype.slice.call(this, begin, end);\n      }\n      var newSize = this.size - resolvedBegin;\n      var head = this._head;\n      while (resolvedBegin--) {\n        head = head.next;\n      }\n      if (this.__ownerID) {\n        this.size = newSize;\n        this._head = head;\n        this.__hash = undefined;\n        this.__altered = true;\n        return this;\n      }\n      return makeStack(newSize, head);\n    };\n\n    // @pragma Mutability\n\n    Stack.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      if (!ownerID) {\n        if (this.size === 0) {\n          return emptyStack();\n        }\n        this.__ownerID = ownerID;\n        this.__altered = false;\n        return this;\n      }\n      return makeStack(this.size, this._head, ownerID, this.__hash);\n    };\n\n    // @pragma Iteration\n\n    Stack.prototype.__iterate = function __iterate (fn, reverse) {\n      var this$1 = this;\n\n      if (reverse) {\n        return new ArraySeq(this.toArray()).__iterate(\n          function (v, k) { return fn(v, k, this$1); },\n          reverse\n        );\n      }\n      var iterations = 0;\n      var node = this._head;\n      while (node) {\n        if (fn(node.value, iterations++, this) === false) {\n          break;\n        }\n        node = node.next;\n      }\n      return iterations;\n    };\n\n    Stack.prototype.__iterator = function __iterator (type, reverse) {\n      if (reverse) {\n        return new ArraySeq(this.toArray()).__iterator(type, reverse);\n      }\n      var iterations = 0;\n      var node = this._head;\n      return new Iterator(function () {\n        if (node) {\n          var value = node.value;\n          node = node.next;\n          return iteratorValue(type, iterations++, value);\n        }\n        return iteratorDone();\n      });\n    };\n\n    return Stack;\n  }(IndexedCollection));\n\n  Stack.isStack = isStack;\n\n  var StackPrototype = Stack.prototype;\n  StackPrototype[IS_STACK_SYMBOL] = true;\n  StackPrototype.shift = StackPrototype.pop;\n  StackPrototype.unshift = StackPrototype.push;\n  StackPrototype.unshiftAll = StackPrototype.pushAll;\n  StackPrototype.withMutations = withMutations;\n  StackPrototype.wasAltered = wasAltered;\n  StackPrototype.asImmutable = asImmutable;\n  StackPrototype['@@transducer/init'] = StackPrototype.asMutable = asMutable;\n  StackPrototype['@@transducer/step'] = function (result, arr) {\n    return result.unshift(arr);\n  };\n  StackPrototype['@@transducer/result'] = function (obj) {\n    return obj.asImmutable();\n  };\n\n  function makeStack(size, head, ownerID, hash) {\n    var map = Object.create(StackPrototype);\n    map.size = size;\n    map._head = head;\n    map.__ownerID = ownerID;\n    map.__hash = hash;\n    map.__altered = false;\n    return map;\n  }\n\n  var EMPTY_STACK;\n  function emptyStack() {\n    return EMPTY_STACK || (EMPTY_STACK = makeStack(0));\n  }\n\n  var IS_SET_SYMBOL = '@@__IMMUTABLE_SET__@@';\n\n  function isSet(maybeSet) {\n    return Boolean(maybeSet && maybeSet[IS_SET_SYMBOL]);\n  }\n\n  function isOrderedSet(maybeOrderedSet) {\n    return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);\n  }\n\n  function deepEqual(a, b) {\n    if (a === b) {\n      return true;\n    }\n\n    if (\n      !isCollection(b) ||\n      (a.size !== undefined && b.size !== undefined && a.size !== b.size) ||\n      (a.__hash !== undefined &&\n        b.__hash !== undefined &&\n        a.__hash !== b.__hash) ||\n      isKeyed(a) !== isKeyed(b) ||\n      isIndexed(a) !== isIndexed(b) ||\n      isOrdered(a) !== isOrdered(b)\n    ) {\n      return false;\n    }\n\n    if (a.size === 0 && b.size === 0) {\n      return true;\n    }\n\n    var notAssociative = !isAssociative(a);\n\n    if (isOrdered(a)) {\n      var entries = a.entries();\n      return (\n        b.every(function (v, k) {\n          var entry = entries.next().value;\n          return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));\n        }) && entries.next().done\n      );\n    }\n\n    var flipped = false;\n\n    if (a.size === undefined) {\n      if (b.size === undefined) {\n        if (typeof a.cacheResult === 'function') {\n          a.cacheResult();\n        }\n      } else {\n        flipped = true;\n        var _ = a;\n        a = b;\n        b = _;\n      }\n    }\n\n    var allEqual = true;\n    var bSize = b.__iterate(function (v, k) {\n      if (\n        notAssociative\n          ? !a.has(v)\n          : flipped\n          ? !is(v, a.get(k, NOT_SET))\n          : !is(a.get(k, NOT_SET), v)\n      ) {\n        allEqual = false;\n        return false;\n      }\n    });\n\n    return allEqual && a.size === bSize;\n  }\n\n  /**\n   * Contributes additional methods to a constructor\n   */\n  function mixin(ctor, methods) {\n    var keyCopier = function (key) {\n      ctor.prototype[key] = methods[key];\n    };\n    Object.keys(methods).forEach(keyCopier);\n    Object.getOwnPropertySymbols &&\n      Object.getOwnPropertySymbols(methods).forEach(keyCopier);\n    return ctor;\n  }\n\n  function toJS(value) {\n    if (!value || typeof value !== 'object') {\n      return value;\n    }\n    if (!isCollection(value)) {\n      if (!isDataStructure(value)) {\n        return value;\n      }\n      value = Seq(value);\n    }\n    if (isKeyed(value)) {\n      var result$1 = {};\n      value.__iterate(function (v, k) {\n        result$1[k] = toJS(v);\n      });\n      return result$1;\n    }\n    var result = [];\n    value.__iterate(function (v) {\n      result.push(toJS(v));\n    });\n    return result;\n  }\n\n  var Set = /*@__PURE__*/(function (SetCollection$$1) {\n    function Set(value) {\n      return value === null || value === undefined\n        ? emptySet()\n        : isSet(value) && !isOrdered(value)\n        ? value\n        : emptySet().withMutations(function (set) {\n            var iter = SetCollection$$1(value);\n            assertNotInfinite(iter.size);\n            iter.forEach(function (v) { return set.add(v); });\n          });\n    }\n\n    if ( SetCollection$$1 ) Set.__proto__ = SetCollection$$1;\n    Set.prototype = Object.create( SetCollection$$1 && SetCollection$$1.prototype );\n    Set.prototype.constructor = Set;\n\n    Set.of = function of (/*...values*/) {\n      return this(arguments);\n    };\n\n    Set.fromKeys = function fromKeys (value) {\n      return this(KeyedCollection(value).keySeq());\n    };\n\n    Set.intersect = function intersect (sets) {\n      sets = Collection(sets).toArray();\n      return sets.length\n        ? SetPrototype.intersect.apply(Set(sets.pop()), sets)\n        : emptySet();\n    };\n\n    Set.union = function union (sets) {\n      sets = Collection(sets).toArray();\n      return sets.length\n        ? SetPrototype.union.apply(Set(sets.pop()), sets)\n        : emptySet();\n    };\n\n    Set.prototype.toString = function toString () {\n      return this.__toString('Set {', '}');\n    };\n\n    // @pragma Access\n\n    Set.prototype.has = function has (value) {\n      return this._map.has(value);\n    };\n\n    // @pragma Modification\n\n    Set.prototype.add = function add (value) {\n      return updateSet(this, this._map.set(value, value));\n    };\n\n    Set.prototype.remove = function remove (value) {\n      return updateSet(this, this._map.remove(value));\n    };\n\n    Set.prototype.clear = function clear () {\n      return updateSet(this, this._map.clear());\n    };\n\n    // @pragma Composition\n\n    Set.prototype.map = function map (mapper, context) {\n      var this$1 = this;\n\n      var removes = [];\n      var adds = [];\n      this.forEach(function (value) {\n        var mapped = mapper.call(context, value, value, this$1);\n        if (mapped !== value) {\n          removes.push(value);\n          adds.push(mapped);\n        }\n      });\n      return this.withMutations(function (set) {\n        removes.forEach(function (value) { return set.remove(value); });\n        adds.forEach(function (value) { return set.add(value); });\n      });\n    };\n\n    Set.prototype.union = function union () {\n      var iters = [], len = arguments.length;\n      while ( len-- ) iters[ len ] = arguments[ len ];\n\n      iters = iters.filter(function (x) { return x.size !== 0; });\n      if (iters.length === 0) {\n        return this;\n      }\n      if (this.size === 0 && !this.__ownerID && iters.length === 1) {\n        return this.constructor(iters[0]);\n      }\n      return this.withMutations(function (set) {\n        for (var ii = 0; ii < iters.length; ii++) {\n          SetCollection$$1(iters[ii]).forEach(function (value) { return set.add(value); });\n        }\n      });\n    };\n\n    Set.prototype.intersect = function intersect () {\n      var iters = [], len = arguments.length;\n      while ( len-- ) iters[ len ] = arguments[ len ];\n\n      if (iters.length === 0) {\n        return this;\n      }\n      iters = iters.map(function (iter) { return SetCollection$$1(iter); });\n      var toRemove = [];\n      this.forEach(function (value) {\n        if (!iters.every(function (iter) { return iter.includes(value); })) {\n          toRemove.push(value);\n        }\n      });\n      return this.withMutations(function (set) {\n        toRemove.forEach(function (value) {\n          set.remove(value);\n        });\n      });\n    };\n\n    Set.prototype.subtract = function subtract () {\n      var iters = [], len = arguments.length;\n      while ( len-- ) iters[ len ] = arguments[ len ];\n\n      if (iters.length === 0) {\n        return this;\n      }\n      iters = iters.map(function (iter) { return SetCollection$$1(iter); });\n      var toRemove = [];\n      this.forEach(function (value) {\n        if (iters.some(function (iter) { return iter.includes(value); })) {\n          toRemove.push(value);\n        }\n      });\n      return this.withMutations(function (set) {\n        toRemove.forEach(function (value) {\n          set.remove(value);\n        });\n      });\n    };\n\n    Set.prototype.sort = function sort (comparator) {\n      // Late binding\n      return OrderedSet(sortFactory(this, comparator));\n    };\n\n    Set.prototype.sortBy = function sortBy (mapper, comparator) {\n      // Late binding\n      return OrderedSet(sortFactory(this, comparator, mapper));\n    };\n\n    Set.prototype.wasAltered = function wasAltered () {\n      return this._map.wasAltered();\n    };\n\n    Set.prototype.__iterate = function __iterate (fn, reverse) {\n      var this$1 = this;\n\n      return this._map.__iterate(function (k) { return fn(k, k, this$1); }, reverse);\n    };\n\n    Set.prototype.__iterator = function __iterator (type, reverse) {\n      return this._map.__iterator(type, reverse);\n    };\n\n    Set.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n      if (ownerID === this.__ownerID) {\n        return this;\n      }\n      var newMap = this._map.__ensureOwner(ownerID);\n      if (!ownerID) {\n        if (this.size === 0) {\n          return this.__empty();\n        }\n        this.__ownerID = ownerID;\n        this._map = newMap;\n        return this;\n      }\n      return this.__make(newMap, ownerID);\n    };\n\n    return Set;\n  }(SetCollection));\n\n  Set.isSet = isSet;\n\n  var SetPrototype = Set.prototype;\n  SetPrototype[IS_SET_SYMBOL] = true;\n  SetPrototype[DELETE] = SetPrototype.remove;\n  SetPrototype.merge = SetPrototype.concat = SetPrototype.union;\n  SetPrototype.withMutations = withMutations;\n  SetPrototype.asImmutable = asImmutable;\n  SetPrototype['@@transducer/init'] = SetPrototype.asMutable = asMutable;\n  SetPrototype['@@transducer/step'] = function (result, arr) {\n    return result.add(arr);\n  };\n  SetPrototype['@@transducer/result'] = function (obj) {\n    return obj.asImmutable();\n  };\n\n  SetPrototype.__empty = emptySet;\n  SetPrototype.__make = makeSet;\n\n  function updateSet(set, newMap) {\n    if (set.__ownerID) {\n      set.size = newMap.size;\n      set._map = newMap;\n      return set;\n    }\n    return newMap === set._map\n      ? set\n      : newMap.size === 0\n      ? set.__empty()\n      : set.__make(newMap);\n  }\n\n  function makeSet(map, ownerID) {\n    var set = Object.create(SetPrototype);\n    set.size = map ? map.size : 0;\n    set._map = map;\n    set.__ownerID = ownerID;\n    return set;\n  }\n\n  var EMPTY_SET;\n  function emptySet() {\n    return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));\n  }\n\n  /**\n   * Returns a lazy seq of nums from start (inclusive) to end\n   * (exclusive), by step, where start defaults to 0, step to 1, and end to\n   * infinity. When start is equal to end, returns empty list.\n   */\n  var Range = /*@__PURE__*/(function (IndexedSeq$$1) {\n    function Range(start, end, step) {\n      if (!(this instanceof Range)) {\n        return new Range(start, end, step);\n      }\n      invariant(step !== 0, 'Cannot step a Range by 0');\n      start = start || 0;\n      if (end === undefined) {\n        end = Infinity;\n      }\n      step = step === undefined ? 1 : Math.abs(step);\n      if (end < start) {\n        step = -step;\n      }\n      this._start = start;\n      this._end = end;\n      this._step = step;\n      this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);\n      if (this.size === 0) {\n        if (EMPTY_RANGE) {\n          return EMPTY_RANGE;\n        }\n        EMPTY_RANGE = this;\n      }\n    }\n\n    if ( IndexedSeq$$1 ) Range.__proto__ = IndexedSeq$$1;\n    Range.prototype = Object.create( IndexedSeq$$1 && IndexedSeq$$1.prototype );\n    Range.prototype.constructor = Range;\n\n    Range.prototype.toString = function toString () {\n      if (this.size === 0) {\n        return 'Range []';\n      }\n      return (\n        'Range [ ' +\n        this._start +\n        '...' +\n        this._end +\n        (this._step !== 1 ? ' by ' + this._step : '') +\n        ' ]'\n      );\n    };\n\n    Range.prototype.get = function get (index, notSetValue) {\n      return this.has(index)\n        ? this._start + wrapIndex(this, index) * this._step\n        : notSetValue;\n    };\n\n    Range.prototype.includes = function includes (searchValue) {\n      var possibleIndex = (searchValue - this._start) / this._step;\n      return (\n        possibleIndex >= 0 &&\n        possibleIndex < this.size &&\n        possibleIndex === Math.floor(possibleIndex)\n      );\n    };\n\n    Range.prototype.slice = function slice (begin, end) {\n      if (wholeSlice(begin, end, this.size)) {\n        return this;\n      }\n      begin = resolveBegin(begin, this.size);\n      end = resolveEnd(end, this.size);\n      if (end <= begin) {\n        return new Range(0, 0);\n      }\n      return new Range(\n        this.get(begin, this._end),\n        this.get(end, this._end),\n        this._step\n      );\n    };\n\n    Range.prototype.indexOf = function indexOf (searchValue) {\n      var offsetValue = searchValue - this._start;\n      if (offsetValue % this._step === 0) {\n        var index = offsetValue / this._step;\n        if (index >= 0 && index < this.size) {\n          return index;\n        }\n      }\n      return -1;\n    };\n\n    Range.prototype.lastIndexOf = function lastIndexOf (searchValue) {\n      return this.indexOf(searchValue);\n    };\n\n    Range.prototype.__iterate = function __iterate (fn, reverse) {\n      var size = this.size;\n      var step = this._step;\n      var value = reverse ? this._start + (size - 1) * step : this._start;\n      var i = 0;\n      while (i !== size) {\n        if (fn(value, reverse ? size - ++i : i++, this) === false) {\n          break;\n        }\n        value += reverse ? -step : step;\n      }\n      return i;\n    };\n\n    Range.prototype.__iterator = function __iterator (type, reverse) {\n      var size = this.size;\n      var step = this._step;\n      var value = reverse ? this._start + (size - 1) * step : this._start;\n      var i = 0;\n      return new Iterator(function () {\n        if (i === size) {\n          return iteratorDone();\n        }\n        var v = value;\n        value += reverse ? -step : step;\n        return iteratorValue(type, reverse ? size - ++i : i++, v);\n      });\n    };\n\n    Range.prototype.equals = function equals (other) {\n      return other instanceof Range\n        ? this._start === other._start &&\n            this._end === other._end &&\n            this._step === other._step\n        : deepEqual(this, other);\n    };\n\n    return Range;\n  }(IndexedSeq));\n\n  var EMPTY_RANGE;\n\n  function getIn(collection, searchKeyPath, notSetValue) {\n    var keyPath = coerceKeyPath(searchKeyPath);\n    var i = 0;\n    while (i !== keyPath.length) {\n      collection = get(collection, keyPath[i++], NOT_SET);\n      if (collection === NOT_SET) {\n        return notSetValue;\n      }\n    }\n    return collection;\n  }\n\n  function getIn$1(searchKeyPath, notSetValue) {\n    return getIn(this, searchKeyPath, notSetValue);\n  }\n\n  function hasIn(collection, keyPath) {\n    return getIn(collection, keyPath, NOT_SET) !== NOT_SET;\n  }\n\n  function hasIn$1(searchKeyPath) {\n    return hasIn(this, searchKeyPath);\n  }\n\n  function toObject() {\n    assertNotInfinite(this.size);\n    var object = {};\n    this.__iterate(function (v, k) {\n      object[k] = v;\n    });\n    return object;\n  }\n\n  // Note: all of these methods are deprecated.\n  Collection.isIterable = isCollection;\n  Collection.isKeyed = isKeyed;\n  Collection.isIndexed = isIndexed;\n  Collection.isAssociative = isAssociative;\n  Collection.isOrdered = isOrdered;\n\n  Collection.Iterator = Iterator;\n\n  mixin(Collection, {\n    // ### Conversion to other types\n\n    toArray: function toArray() {\n      assertNotInfinite(this.size);\n      var array = new Array(this.size || 0);\n      var useTuples = isKeyed(this);\n      var i = 0;\n      this.__iterate(function (v, k) {\n        // Keyed collections produce an array of tuples.\n        array[i++] = useTuples ? [k, v] : v;\n      });\n      return array;\n    },\n\n    toIndexedSeq: function toIndexedSeq() {\n      return new ToIndexedSequence(this);\n    },\n\n    toJS: function toJS$1() {\n      return toJS(this);\n    },\n\n    toKeyedSeq: function toKeyedSeq() {\n      return new ToKeyedSequence(this, true);\n    },\n\n    toMap: function toMap() {\n      // Use Late Binding here to solve the circular dependency.\n      return Map(this.toKeyedSeq());\n    },\n\n    toObject: toObject,\n\n    toOrderedMap: function toOrderedMap() {\n      // Use Late Binding here to solve the circular dependency.\n      return OrderedMap(this.toKeyedSeq());\n    },\n\n    toOrderedSet: function toOrderedSet() {\n      // Use Late Binding here to solve the circular dependency.\n      return OrderedSet(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toSet: function toSet() {\n      // Use Late Binding here to solve the circular dependency.\n      return Set(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toSetSeq: function toSetSeq() {\n      return new ToSetSequence(this);\n    },\n\n    toSeq: function toSeq() {\n      return isIndexed(this)\n        ? this.toIndexedSeq()\n        : isKeyed(this)\n        ? this.toKeyedSeq()\n        : this.toSetSeq();\n    },\n\n    toStack: function toStack() {\n      // Use Late Binding here to solve the circular dependency.\n      return Stack(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    toList: function toList() {\n      // Use Late Binding here to solve the circular dependency.\n      return List(isKeyed(this) ? this.valueSeq() : this);\n    },\n\n    // ### Common JavaScript methods and properties\n\n    toString: function toString() {\n      return '[Collection]';\n    },\n\n    __toString: function __toString(head, tail) {\n      if (this.size === 0) {\n        return head + tail;\n      }\n      return (\n        head +\n        ' ' +\n        this.toSeq().map(this.__toStringMapper).join(', ') +\n        ' ' +\n        tail\n      );\n    },\n\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    concat: function concat() {\n      var values = [], len = arguments.length;\n      while ( len-- ) values[ len ] = arguments[ len ];\n\n      return reify(this, concatFactory(this, values));\n    },\n\n    includes: function includes(searchValue) {\n      return this.some(function (value) { return is(value, searchValue); });\n    },\n\n    entries: function entries() {\n      return this.__iterator(ITERATE_ENTRIES);\n    },\n\n    every: function every(predicate, context) {\n      assertNotInfinite(this.size);\n      var returnValue = true;\n      this.__iterate(function (v, k, c) {\n        if (!predicate.call(context, v, k, c)) {\n          returnValue = false;\n          return false;\n        }\n      });\n      return returnValue;\n    },\n\n    filter: function filter(predicate, context) {\n      return reify(this, filterFactory(this, predicate, context, true));\n    },\n\n    find: function find(predicate, context, notSetValue) {\n      var entry = this.findEntry(predicate, context);\n      return entry ? entry[1] : notSetValue;\n    },\n\n    forEach: function forEach(sideEffect, context) {\n      assertNotInfinite(this.size);\n      return this.__iterate(context ? sideEffect.bind(context) : sideEffect);\n    },\n\n    join: function join(separator) {\n      assertNotInfinite(this.size);\n      separator = separator !== undefined ? '' + separator : ',';\n      var joined = '';\n      var isFirst = true;\n      this.__iterate(function (v) {\n        isFirst ? (isFirst = false) : (joined += separator);\n        joined += v !== null && v !== undefined ? v.toString() : '';\n      });\n      return joined;\n    },\n\n    keys: function keys() {\n      return this.__iterator(ITERATE_KEYS);\n    },\n\n    map: function map(mapper, context) {\n      return reify(this, mapFactory(this, mapper, context));\n    },\n\n    reduce: function reduce$1(reducer, initialReduction, context) {\n      return reduce(\n        this,\n        reducer,\n        initialReduction,\n        context,\n        arguments.length < 2,\n        false\n      );\n    },\n\n    reduceRight: function reduceRight(reducer, initialReduction, context) {\n      return reduce(\n        this,\n        reducer,\n        initialReduction,\n        context,\n        arguments.length < 2,\n        true\n      );\n    },\n\n    reverse: function reverse() {\n      return reify(this, reverseFactory(this, true));\n    },\n\n    slice: function slice(begin, end) {\n      return reify(this, sliceFactory(this, begin, end, true));\n    },\n\n    some: function some(predicate, context) {\n      return !this.every(not(predicate), context);\n    },\n\n    sort: function sort(comparator) {\n      return reify(this, sortFactory(this, comparator));\n    },\n\n    values: function values() {\n      return this.__iterator(ITERATE_VALUES);\n    },\n\n    // ### More sequential methods\n\n    butLast: function butLast() {\n      return this.slice(0, -1);\n    },\n\n    isEmpty: function isEmpty() {\n      return this.size !== undefined ? this.size === 0 : !this.some(function () { return true; });\n    },\n\n    count: function count(predicate, context) {\n      return ensureSize(\n        predicate ? this.toSeq().filter(predicate, context) : this\n      );\n    },\n\n    countBy: function countBy(grouper, context) {\n      return countByFactory(this, grouper, context);\n    },\n\n    equals: function equals(other) {\n      return deepEqual(this, other);\n    },\n\n    entrySeq: function entrySeq() {\n      var collection = this;\n      if (collection._cache) {\n        // We cache as an entries array, so we can just return the cache!\n        return new ArraySeq(collection._cache);\n      }\n      var entriesSequence = collection.toSeq().map(entryMapper).toIndexedSeq();\n      entriesSequence.fromEntrySeq = function () { return collection.toSeq(); };\n      return entriesSequence;\n    },\n\n    filterNot: function filterNot(predicate, context) {\n      return this.filter(not(predicate), context);\n    },\n\n    findEntry: function findEntry(predicate, context, notSetValue) {\n      var found = notSetValue;\n      this.__iterate(function (v, k, c) {\n        if (predicate.call(context, v, k, c)) {\n          found = [k, v];\n          return false;\n        }\n      });\n      return found;\n    },\n\n    findKey: function findKey(predicate, context) {\n      var entry = this.findEntry(predicate, context);\n      return entry && entry[0];\n    },\n\n    findLast: function findLast(predicate, context, notSetValue) {\n      return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);\n    },\n\n    findLastEntry: function findLastEntry(predicate, context, notSetValue) {\n      return this.toKeyedSeq()\n        .reverse()\n        .findEntry(predicate, context, notSetValue);\n    },\n\n    findLastKey: function findLastKey(predicate, context) {\n      return this.toKeyedSeq().reverse().findKey(predicate, context);\n    },\n\n    first: function first(notSetValue) {\n      return this.find(returnTrue, null, notSetValue);\n    },\n\n    flatMap: function flatMap(mapper, context) {\n      return reify(this, flatMapFactory(this, mapper, context));\n    },\n\n    flatten: function flatten(depth) {\n      return reify(this, flattenFactory(this, depth, true));\n    },\n\n    fromEntrySeq: function fromEntrySeq() {\n      return new FromEntriesSequence(this);\n    },\n\n    get: function get(searchKey, notSetValue) {\n      return this.find(function (_, key) { return is(key, searchKey); }, undefined, notSetValue);\n    },\n\n    getIn: getIn$1,\n\n    groupBy: function groupBy(grouper, context) {\n      return groupByFactory(this, grouper, context);\n    },\n\n    has: function has(searchKey) {\n      return this.get(searchKey, NOT_SET) !== NOT_SET;\n    },\n\n    hasIn: hasIn$1,\n\n    isSubset: function isSubset(iter) {\n      iter = typeof iter.includes === 'function' ? iter : Collection(iter);\n      return this.every(function (value) { return iter.includes(value); });\n    },\n\n    isSuperset: function isSuperset(iter) {\n      iter = typeof iter.isSubset === 'function' ? iter : Collection(iter);\n      return iter.isSubset(this);\n    },\n\n    keyOf: function keyOf(searchValue) {\n      return this.findKey(function (value) { return is(value, searchValue); });\n    },\n\n    keySeq: function keySeq() {\n      return this.toSeq().map(keyMapper).toIndexedSeq();\n    },\n\n    last: function last(notSetValue) {\n      return this.toSeq().reverse().first(notSetValue);\n    },\n\n    lastKeyOf: function lastKeyOf(searchValue) {\n      return this.toKeyedSeq().reverse().keyOf(searchValue);\n    },\n\n    max: function max(comparator) {\n      return maxFactory(this, comparator);\n    },\n\n    maxBy: function maxBy(mapper, comparator) {\n      return maxFactory(this, comparator, mapper);\n    },\n\n    min: function min(comparator) {\n      return maxFactory(\n        this,\n        comparator ? neg(comparator) : defaultNegComparator\n      );\n    },\n\n    minBy: function minBy(mapper, comparator) {\n      return maxFactory(\n        this,\n        comparator ? neg(comparator) : defaultNegComparator,\n        mapper\n      );\n    },\n\n    rest: function rest() {\n      return this.slice(1);\n    },\n\n    skip: function skip(amount) {\n      return amount === 0 ? this : this.slice(Math.max(0, amount));\n    },\n\n    skipLast: function skipLast(amount) {\n      return amount === 0 ? this : this.slice(0, -Math.max(0, amount));\n    },\n\n    skipWhile: function skipWhile(predicate, context) {\n      return reify(this, skipWhileFactory(this, predicate, context, true));\n    },\n\n    skipUntil: function skipUntil(predicate, context) {\n      return this.skipWhile(not(predicate), context);\n    },\n\n    sortBy: function sortBy(mapper, comparator) {\n      return reify(this, sortFactory(this, comparator, mapper));\n    },\n\n    take: function take(amount) {\n      return this.slice(0, Math.max(0, amount));\n    },\n\n    takeLast: function takeLast(amount) {\n      return this.slice(-Math.max(0, amount));\n    },\n\n    takeWhile: function takeWhile(predicate, context) {\n      return reify(this, takeWhileFactory(this, predicate, context));\n    },\n\n    takeUntil: function takeUntil(predicate, context) {\n      return this.takeWhile(not(predicate), context);\n    },\n\n    update: function update(fn) {\n      return fn(this);\n    },\n\n    valueSeq: function valueSeq() {\n      return this.toIndexedSeq();\n    },\n\n    // ### Hashable Object\n\n    hashCode: function hashCode() {\n      return this.__hash || (this.__hash = hashCollection(this));\n    },\n\n    // ### Internal\n\n    // abstract __iterate(fn, reverse)\n\n    // abstract __iterator(type, reverse)\n  });\n\n  var CollectionPrototype = Collection.prototype;\n  CollectionPrototype[IS_COLLECTION_SYMBOL] = true;\n  CollectionPrototype[ITERATOR_SYMBOL] = CollectionPrototype.values;\n  CollectionPrototype.toJSON = CollectionPrototype.toArray;\n  CollectionPrototype.__toStringMapper = quoteString;\n  CollectionPrototype.inspect = CollectionPrototype.toSource = function () {\n    return this.toString();\n  };\n  CollectionPrototype.chain = CollectionPrototype.flatMap;\n  CollectionPrototype.contains = CollectionPrototype.includes;\n\n  mixin(KeyedCollection, {\n    // ### More sequential methods\n\n    flip: function flip() {\n      return reify(this, flipFactory(this));\n    },\n\n    mapEntries: function mapEntries(mapper, context) {\n      var this$1 = this;\n\n      var iterations = 0;\n      return reify(\n        this,\n        this.toSeq()\n          .map(function (v, k) { return mapper.call(context, [k, v], iterations++, this$1); })\n          .fromEntrySeq()\n      );\n    },\n\n    mapKeys: function mapKeys(mapper, context) {\n      var this$1 = this;\n\n      return reify(\n        this,\n        this.toSeq()\n          .flip()\n          .map(function (k, v) { return mapper.call(context, k, v, this$1); })\n          .flip()\n      );\n    },\n  });\n\n  var KeyedCollectionPrototype = KeyedCollection.prototype;\n  KeyedCollectionPrototype[IS_KEYED_SYMBOL] = true;\n  KeyedCollectionPrototype[ITERATOR_SYMBOL] = CollectionPrototype.entries;\n  KeyedCollectionPrototype.toJSON = toObject;\n  KeyedCollectionPrototype.__toStringMapper = function (v, k) { return quoteString(k) + ': ' + quoteString(v); };\n\n  mixin(IndexedCollection, {\n    // ### Conversion to other types\n\n    toKeyedSeq: function toKeyedSeq() {\n      return new ToKeyedSequence(this, false);\n    },\n\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    filter: function filter(predicate, context) {\n      return reify(this, filterFactory(this, predicate, context, false));\n    },\n\n    findIndex: function findIndex(predicate, context) {\n      var entry = this.findEntry(predicate, context);\n      return entry ? entry[0] : -1;\n    },\n\n    indexOf: function indexOf(searchValue) {\n      var key = this.keyOf(searchValue);\n      return key === undefined ? -1 : key;\n    },\n\n    lastIndexOf: function lastIndexOf(searchValue) {\n      var key = this.lastKeyOf(searchValue);\n      return key === undefined ? -1 : key;\n    },\n\n    reverse: function reverse() {\n      return reify(this, reverseFactory(this, false));\n    },\n\n    slice: function slice(begin, end) {\n      return reify(this, sliceFactory(this, begin, end, false));\n    },\n\n    splice: function splice(index, removeNum /*, ...values*/) {\n      var numArgs = arguments.length;\n      removeNum = Math.max(removeNum || 0, 0);\n      if (numArgs === 0 || (numArgs === 2 && !removeNum)) {\n        return this;\n      }\n      // If index is negative, it should resolve relative to the size of the\n      // collection. However size may be expensive to compute if not cached, so\n      // only call count() if the number is in fact negative.\n      index = resolveBegin(index, index < 0 ? this.count() : this.size);\n      var spliced = this.slice(0, index);\n      return reify(\n        this,\n        numArgs === 1\n          ? spliced\n          : spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum))\n      );\n    },\n\n    // ### More collection methods\n\n    findLastIndex: function findLastIndex(predicate, context) {\n      var entry = this.findLastEntry(predicate, context);\n      return entry ? entry[0] : -1;\n    },\n\n    first: function first(notSetValue) {\n      return this.get(0, notSetValue);\n    },\n\n    flatten: function flatten(depth) {\n      return reify(this, flattenFactory(this, depth, false));\n    },\n\n    get: function get(index, notSetValue) {\n      index = wrapIndex(this, index);\n      return index < 0 ||\n        this.size === Infinity ||\n        (this.size !== undefined && index > this.size)\n        ? notSetValue\n        : this.find(function (_, key) { return key === index; }, undefined, notSetValue);\n    },\n\n    has: function has(index) {\n      index = wrapIndex(this, index);\n      return (\n        index >= 0 &&\n        (this.size !== undefined\n          ? this.size === Infinity || index < this.size\n          : this.indexOf(index) !== -1)\n      );\n    },\n\n    interpose: function interpose(separator) {\n      return reify(this, interposeFactory(this, separator));\n    },\n\n    interleave: function interleave(/*...collections*/) {\n      var collections = [this].concat(arrCopy(arguments));\n      var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, collections);\n      var interleaved = zipped.flatten(true);\n      if (zipped.size) {\n        interleaved.size = zipped.size * collections.length;\n      }\n      return reify(this, interleaved);\n    },\n\n    keySeq: function keySeq() {\n      return Range(0, this.size);\n    },\n\n    last: function last(notSetValue) {\n      return this.get(-1, notSetValue);\n    },\n\n    skipWhile: function skipWhile(predicate, context) {\n      return reify(this, skipWhileFactory(this, predicate, context, false));\n    },\n\n    zip: function zip(/*, ...collections */) {\n      var collections = [this].concat(arrCopy(arguments));\n      return reify(this, zipWithFactory(this, defaultZipper, collections));\n    },\n\n    zipAll: function zipAll(/*, ...collections */) {\n      var collections = [this].concat(arrCopy(arguments));\n      return reify(this, zipWithFactory(this, defaultZipper, collections, true));\n    },\n\n    zipWith: function zipWith(zipper /*, ...collections */) {\n      var collections = arrCopy(arguments);\n      collections[0] = this;\n      return reify(this, zipWithFactory(this, zipper, collections));\n    },\n  });\n\n  var IndexedCollectionPrototype = IndexedCollection.prototype;\n  IndexedCollectionPrototype[IS_INDEXED_SYMBOL] = true;\n  IndexedCollectionPrototype[IS_ORDERED_SYMBOL] = true;\n\n  mixin(SetCollection, {\n    // ### ES6 Collection methods (ES6 Array and Map)\n\n    get: function get(value, notSetValue) {\n      return this.has(value) ? value : notSetValue;\n    },\n\n    includes: function includes(value) {\n      return this.has(value);\n    },\n\n    // ### More sequential methods\n\n    keySeq: function keySeq() {\n      return this.valueSeq();\n    },\n  });\n\n  SetCollection.prototype.has = CollectionPrototype.includes;\n  SetCollection.prototype.contains = SetCollection.prototype.includes;\n\n  // Mixin subclasses\n\n  mixin(KeyedSeq, KeyedCollection.prototype);\n  mixin(IndexedSeq, IndexedCollection.prototype);\n  mixin(SetSeq, SetCollection.prototype);\n\n  // #pragma Helper functions\n\n  function reduce(collection, reducer, reduction, context, useFirst, reverse) {\n    assertNotInfinite(collection.size);\n    collection.__iterate(function (v, k, c) {\n      if (useFirst) {\n        useFirst = false;\n        reduction = v;\n      } else {\n        reduction = reducer.call(context, reduction, v, k, c);\n      }\n    }, reverse);\n    return reduction;\n  }\n\n  function keyMapper(v, k) {\n    return k;\n  }\n\n  function entryMapper(v, k) {\n    return [k, v];\n  }\n\n  function not(predicate) {\n    return function () {\n      return !predicate.apply(this, arguments);\n    };\n  }\n\n  function neg(predicate) {\n    return function () {\n      return -predicate.apply(this, arguments);\n    };\n  }\n\n  function defaultZipper() {\n    return arrCopy(arguments);\n  }\n\n  function defaultNegComparator(a, b) {\n    return a < b ? 1 : a > b ? -1 : 0;\n  }\n\n  function hashCollection(collection) {\n    if (collection.size === Infinity) {\n      return 0;\n    }\n    var ordered = isOrdered(collection);\n    var keyed = isKeyed(collection);\n    var h = ordered ? 1 : 0;\n    var size = collection.__iterate(\n      keyed\n        ? ordered\n          ? function (v, k) {\n              h = (31 * h + hashMerge(hash(v), hash(k))) | 0;\n            }\n          : function (v, k) {\n              h = (h + hashMerge(hash(v), hash(k))) | 0;\n            }\n        : ordered\n        ? function (v) {\n            h = (31 * h + hash(v)) | 0;\n          }\n        : function (v) {\n            h = (h + hash(v)) | 0;\n          }\n    );\n    return murmurHashOfSize(size, h);\n  }\n\n  function murmurHashOfSize(size, h) {\n    h = imul(h, 0xcc9e2d51);\n    h = imul((h << 15) | (h >>> -15), 0x1b873593);\n    h = imul((h << 13) | (h >>> -13), 5);\n    h = ((h + 0xe6546b64) | 0) ^ size;\n    h = imul(h ^ (h >>> 16), 0x85ebca6b);\n    h = imul(h ^ (h >>> 13), 0xc2b2ae35);\n    h = smi(h ^ (h >>> 16));\n    return h;\n  }\n\n  function hashMerge(a, b) {\n    return (a ^ (b + 0x9e3779b9 + (a << 6) + (a >> 2))) | 0; // int\n  }\n\n  var OrderedSet = /*@__PURE__*/(function (Set$$1) {\n    function OrderedSet(value) {\n      return value === null || value === undefined\n        ? emptyOrderedSet()\n        : isOrderedSet(value)\n        ? value\n        : emptyOrderedSet().withMutations(function (set) {\n            var iter = SetCollection(value);\n            assertNotInfinite(iter.size);\n            iter.forEach(function (v) { return set.add(v); });\n          });\n    }\n\n    if ( Set$$1 ) OrderedSet.__proto__ = Set$$1;\n    OrderedSet.prototype = Object.create( Set$$1 && Set$$1.prototype );\n    OrderedSet.prototype.constructor = OrderedSet;\n\n    OrderedSet.of = function of (/*...values*/) {\n      return this(arguments);\n    };\n\n    OrderedSet.fromKeys = function fromKeys (value) {\n      return this(KeyedCollection(value).keySeq());\n    };\n\n    OrderedSet.prototype.toString = function toString () {\n      return this.__toString('OrderedSet {', '}');\n    };\n\n    return OrderedSet;\n  }(Set));\n\n  OrderedSet.isOrderedSet = isOrderedSet;\n\n  var OrderedSetPrototype = OrderedSet.prototype;\n  OrderedSetPrototype[IS_ORDERED_SYMBOL] = true;\n  OrderedSetPrototype.zip = IndexedCollectionPrototype.zip;\n  OrderedSetPrototype.zipWith = IndexedCollectionPrototype.zipWith;\n\n  OrderedSetPrototype.__empty = emptyOrderedSet;\n  OrderedSetPrototype.__make = makeOrderedSet;\n\n  function makeOrderedSet(map, ownerID) {\n    var set = Object.create(OrderedSetPrototype);\n    set.size = map ? map.size : 0;\n    set._map = map;\n    set.__ownerID = ownerID;\n    return set;\n  }\n\n  var EMPTY_ORDERED_SET;\n  function emptyOrderedSet() {\n    return (\n      EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()))\n    );\n  }\n\n  var Record = function Record(defaultValues, name) {\n    var hasInitialized;\n\n    var RecordType = function Record(values) {\n      var this$1 = this;\n\n      if (values instanceof RecordType) {\n        return values;\n      }\n      if (!(this instanceof RecordType)) {\n        return new RecordType(values);\n      }\n      if (!hasInitialized) {\n        hasInitialized = true;\n        var keys = Object.keys(defaultValues);\n        var indices = (RecordTypePrototype._indices = {});\n        // Deprecated: left to attempt not to break any external code which\n        // relies on a ._name property existing on record instances.\n        // Use Record.getDescriptiveName() instead\n        RecordTypePrototype._name = name;\n        RecordTypePrototype._keys = keys;\n        RecordTypePrototype._defaultValues = defaultValues;\n        for (var i = 0; i < keys.length; i++) {\n          var propName = keys[i];\n          indices[propName] = i;\n          if (RecordTypePrototype[propName]) {\n            /* eslint-disable no-console */\n            typeof console === 'object' &&\n              console.warn &&\n              console.warn(\n                'Cannot define ' +\n                  recordName(this) +\n                  ' with property \"' +\n                  propName +\n                  '\" since that property name is part of the Record API.'\n              );\n            /* eslint-enable no-console */\n          } else {\n            setProp(RecordTypePrototype, propName);\n          }\n        }\n      }\n      this.__ownerID = undefined;\n      this._values = List().withMutations(function (l) {\n        l.setSize(this$1._keys.length);\n        KeyedCollection(values).forEach(function (v, k) {\n          l.set(this$1._indices[k], v === this$1._defaultValues[k] ? undefined : v);\n        });\n      });\n      return this;\n    };\n\n    var RecordTypePrototype = (RecordType.prototype = Object.create(\n      RecordPrototype\n    ));\n    RecordTypePrototype.constructor = RecordType;\n\n    if (name) {\n      RecordType.displayName = name;\n    }\n\n    return RecordType;\n  };\n\n  Record.prototype.toString = function toString () {\n    var str = recordName(this) + ' { ';\n    var keys = this._keys;\n    var k;\n    for (var i = 0, l = keys.length; i !== l; i++) {\n      k = keys[i];\n      str += (i ? ', ' : '') + k + ': ' + quoteString(this.get(k));\n    }\n    return str + ' }';\n  };\n\n  Record.prototype.equals = function equals (other) {\n    return (\n      this === other ||\n      (other &&\n        this._keys === other._keys &&\n        recordSeq(this).equals(recordSeq(other)))\n    );\n  };\n\n  Record.prototype.hashCode = function hashCode () {\n    return recordSeq(this).hashCode();\n  };\n\n  // @pragma Access\n\n  Record.prototype.has = function has (k) {\n    return this._indices.hasOwnProperty(k);\n  };\n\n  Record.prototype.get = function get (k, notSetValue) {\n    if (!this.has(k)) {\n      return notSetValue;\n    }\n    var index = this._indices[k];\n    var value = this._values.get(index);\n    return value === undefined ? this._defaultValues[k] : value;\n  };\n\n  // @pragma Modification\n\n  Record.prototype.set = function set (k, v) {\n    if (this.has(k)) {\n      var newValues = this._values.set(\n        this._indices[k],\n        v === this._defaultValues[k] ? undefined : v\n      );\n      if (newValues !== this._values && !this.__ownerID) {\n        return makeRecord(this, newValues);\n      }\n    }\n    return this;\n  };\n\n  Record.prototype.remove = function remove (k) {\n    return this.set(k);\n  };\n\n  Record.prototype.clear = function clear () {\n    var newValues = this._values.clear().setSize(this._keys.length);\n    return this.__ownerID ? this : makeRecord(this, newValues);\n  };\n\n  Record.prototype.wasAltered = function wasAltered () {\n    return this._values.wasAltered();\n  };\n\n  Record.prototype.toSeq = function toSeq () {\n    return recordSeq(this);\n  };\n\n  Record.prototype.toJS = function toJS$1 () {\n    return toJS(this);\n  };\n\n  Record.prototype.entries = function entries () {\n    return this.__iterator(ITERATE_ENTRIES);\n  };\n\n  Record.prototype.__iterator = function __iterator (type, reverse) {\n    return recordSeq(this).__iterator(type, reverse);\n  };\n\n  Record.prototype.__iterate = function __iterate (fn, reverse) {\n    return recordSeq(this).__iterate(fn, reverse);\n  };\n\n  Record.prototype.__ensureOwner = function __ensureOwner (ownerID) {\n    if (ownerID === this.__ownerID) {\n      return this;\n    }\n    var newValues = this._values.__ensureOwner(ownerID);\n    if (!ownerID) {\n      this.__ownerID = ownerID;\n      this._values = newValues;\n      return this;\n    }\n    return makeRecord(this, newValues, ownerID);\n  };\n\n  Record.isRecord = isRecord;\n  Record.getDescriptiveName = recordName;\n  var RecordPrototype = Record.prototype;\n  RecordPrototype[IS_RECORD_SYMBOL] = true;\n  RecordPrototype[DELETE] = RecordPrototype.remove;\n  RecordPrototype.deleteIn = RecordPrototype.removeIn = deleteIn;\n  RecordPrototype.getIn = getIn$1;\n  RecordPrototype.hasIn = CollectionPrototype.hasIn;\n  RecordPrototype.merge = merge;\n  RecordPrototype.mergeWith = mergeWith;\n  RecordPrototype.mergeIn = mergeIn;\n  RecordPrototype.mergeDeep = mergeDeep$1;\n  RecordPrototype.mergeDeepWith = mergeDeepWith$1;\n  RecordPrototype.mergeDeepIn = mergeDeepIn;\n  RecordPrototype.setIn = setIn$1;\n  RecordPrototype.update = update$1;\n  RecordPrototype.updateIn = updateIn$1;\n  RecordPrototype.withMutations = withMutations;\n  RecordPrototype.asMutable = asMutable;\n  RecordPrototype.asImmutable = asImmutable;\n  RecordPrototype[ITERATOR_SYMBOL] = RecordPrototype.entries;\n  RecordPrototype.toJSON = RecordPrototype.toObject =\n    CollectionPrototype.toObject;\n  RecordPrototype.inspect = RecordPrototype.toSource = function () {\n    return this.toString();\n  };\n\n  function makeRecord(likeRecord, values, ownerID) {\n    var record = Object.create(Object.getPrototypeOf(likeRecord));\n    record._values = values;\n    record.__ownerID = ownerID;\n    return record;\n  }\n\n  function recordName(record) {\n    return record.constructor.displayName || record.constructor.name || 'Record';\n  }\n\n  function recordSeq(record) {\n    return keyedSeqFromValue(record._keys.map(function (k) { return [k, record.get(k)]; }));\n  }\n\n  function setProp(prototype, name) {\n    try {\n      Object.defineProperty(prototype, name, {\n        get: function () {\n          return this.get(name);\n        },\n        set: function (value) {\n          invariant(this.__ownerID, 'Cannot set on an immutable record.');\n          this.set(name, value);\n        },\n      });\n    } catch (error) {\n      // Object.defineProperty failed. Probably IE8.\n    }\n  }\n\n  /**\n   * Returns a lazy Seq of `value` repeated `times` times. When `times` is\n   * undefined, returns an infinite sequence of `value`.\n   */\n  var Repeat = /*@__PURE__*/(function (IndexedSeq$$1) {\n    function Repeat(value, times) {\n      if (!(this instanceof Repeat)) {\n        return new Repeat(value, times);\n      }\n      this._value = value;\n      this.size = times === undefined ? Infinity : Math.max(0, times);\n      if (this.size === 0) {\n        if (EMPTY_REPEAT) {\n          return EMPTY_REPEAT;\n        }\n        EMPTY_REPEAT = this;\n      }\n    }\n\n    if ( IndexedSeq$$1 ) Repeat.__proto__ = IndexedSeq$$1;\n    Repeat.prototype = Object.create( IndexedSeq$$1 && IndexedSeq$$1.prototype );\n    Repeat.prototype.constructor = Repeat;\n\n    Repeat.prototype.toString = function toString () {\n      if (this.size === 0) {\n        return 'Repeat []';\n      }\n      return 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';\n    };\n\n    Repeat.prototype.get = function get (index, notSetValue) {\n      return this.has(index) ? this._value : notSetValue;\n    };\n\n    Repeat.prototype.includes = function includes (searchValue) {\n      return is(this._value, searchValue);\n    };\n\n    Repeat.prototype.slice = function slice (begin, end) {\n      var size = this.size;\n      return wholeSlice(begin, end, size)\n        ? this\n        : new Repeat(\n            this._value,\n            resolveEnd(end, size) - resolveBegin(begin, size)\n          );\n    };\n\n    Repeat.prototype.reverse = function reverse () {\n      return this;\n    };\n\n    Repeat.prototype.indexOf = function indexOf (searchValue) {\n      if (is(this._value, searchValue)) {\n        return 0;\n      }\n      return -1;\n    };\n\n    Repeat.prototype.lastIndexOf = function lastIndexOf (searchValue) {\n      if (is(this._value, searchValue)) {\n        return this.size;\n      }\n      return -1;\n    };\n\n    Repeat.prototype.__iterate = function __iterate (fn, reverse) {\n      var size = this.size;\n      var i = 0;\n      while (i !== size) {\n        if (fn(this._value, reverse ? size - ++i : i++, this) === false) {\n          break;\n        }\n      }\n      return i;\n    };\n\n    Repeat.prototype.__iterator = function __iterator (type, reverse) {\n      var this$1 = this;\n\n      var size = this.size;\n      var i = 0;\n      return new Iterator(function () { return i === size\n          ? iteratorDone()\n          : iteratorValue(type, reverse ? size - ++i : i++, this$1._value); }\n      );\n    };\n\n    Repeat.prototype.equals = function equals (other) {\n      return other instanceof Repeat\n        ? is(this._value, other._value)\n        : deepEqual(other);\n    };\n\n    return Repeat;\n  }(IndexedSeq));\n\n  var EMPTY_REPEAT;\n\n  function fromJS(value, converter) {\n    return fromJSWith(\n      [],\n      converter || defaultConverter,\n      value,\n      '',\n      converter && converter.length > 2 ? [] : undefined,\n      { '': value }\n    );\n  }\n\n  function fromJSWith(stack, converter, value, key, keyPath, parentValue) {\n    var toSeq = Array.isArray(value)\n      ? IndexedSeq\n      : isPlainObj(value)\n      ? KeyedSeq\n      : null;\n    if (toSeq) {\n      if (~stack.indexOf(value)) {\n        throw new TypeError('Cannot convert circular structure to Immutable');\n      }\n      stack.push(value);\n      keyPath && key !== '' && keyPath.push(key);\n      var converted = converter.call(\n        parentValue,\n        key,\n        toSeq(value).map(function (v, k) { return fromJSWith(stack, converter, v, k, keyPath, value); }\n        ),\n        keyPath && keyPath.slice()\n      );\n      stack.pop();\n      keyPath && keyPath.pop();\n      return converted;\n    }\n    return value;\n  }\n\n  function defaultConverter(k, v) {\n    return isKeyed(v) ? v.toMap() : v.toList();\n  }\n\n  var version = \"4.0.0-rc.12\";\n\n  var Immutable = {\n    version: version,\n\n    Collection: Collection,\n    // Note: Iterable is deprecated\n    Iterable: Collection,\n\n    Seq: Seq,\n    Map: Map,\n    OrderedMap: OrderedMap,\n    List: List,\n    Stack: Stack,\n    Set: Set,\n    OrderedSet: OrderedSet,\n\n    Record: Record,\n    Range: Range,\n    Repeat: Repeat,\n\n    is: is,\n    fromJS: fromJS,\n    hash: hash,\n\n    isImmutable: isImmutable,\n    isCollection: isCollection,\n    isKeyed: isKeyed,\n    isIndexed: isIndexed,\n    isAssociative: isAssociative,\n    isOrdered: isOrdered,\n    isValueObject: isValueObject,\n    isSeq: isSeq,\n    isList: isList,\n    isMap: isMap,\n    isOrderedMap: isOrderedMap,\n    isStack: isStack,\n    isSet: isSet,\n    isOrderedSet: isOrderedSet,\n    isRecord: isRecord,\n\n    get: get,\n    getIn: getIn,\n    has: has,\n    hasIn: hasIn,\n    merge: merge$1,\n    mergeDeep: mergeDeep,\n    mergeWith: mergeWith$1,\n    mergeDeepWith: mergeDeepWith,\n    remove: remove,\n    removeIn: removeIn,\n    set: set,\n    setIn: setIn,\n    update: update,\n    updateIn: updateIn,\n  };\n\n  // Note: Iterable is deprecated\n  var Iterable = Collection;\n\n  exports.default = Immutable;\n  exports.version = version;\n  exports.Collection = Collection;\n  exports.Iterable = Iterable;\n  exports.Seq = Seq;\n  exports.Map = Map;\n  exports.OrderedMap = OrderedMap;\n  exports.List = List;\n  exports.Stack = Stack;\n  exports.Set = Set;\n  exports.OrderedSet = OrderedSet;\n  exports.Record = Record;\n  exports.Range = Range;\n  exports.Repeat = Repeat;\n  exports.is = is;\n  exports.fromJS = fromJS;\n  exports.hash = hash;\n  exports.isImmutable = isImmutable;\n  exports.isCollection = isCollection;\n  exports.isKeyed = isKeyed;\n  exports.isIndexed = isIndexed;\n  exports.isAssociative = isAssociative;\n  exports.isOrdered = isOrdered;\n  exports.isValueObject = isValueObject;\n  exports.isSeq = isSeq;\n  exports.isList = isList;\n  exports.isMap = isMap;\n  exports.isOrderedMap = isOrderedMap;\n  exports.isStack = isStack;\n  exports.isSet = isSet;\n  exports.isOrderedSet = isOrderedSet;\n  exports.isRecord = isRecord;\n  exports.get = get;\n  exports.getIn = getIn;\n  exports.has = has;\n  exports.hasIn = hasIn;\n  exports.merge = merge$1;\n  exports.mergeDeep = mergeDeep;\n  exports.mergeWith = mergeWith$1;\n  exports.mergeDeepWith = mergeDeepWith;\n  exports.remove = remove;\n  exports.removeIn = removeIn;\n  exports.set = set;\n  exports.setIn = setIn;\n  exports.update = update;\n  exports.updateIn = updateIn;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nmodule.exports = _inheritsLoose;","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar resolvePathname = _interopDefault(require('resolve-pathname'));\nvar valueEqual = _interopDefault(require('value-equal'));\nvar warning = _interopDefault(require('tiny-warning'));\nvar invariant = _interopDefault(require('tiny-invariant'));\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction addLeadingSlash(path) {\n  return path.charAt(0) === '/' ? path : '/' + path;\n}\nfunction stripLeadingSlash(path) {\n  return path.charAt(0) === '/' ? path.substr(1) : path;\n}\nfunction hasBasename(path, prefix) {\n  return path.toLowerCase().indexOf(prefix.toLowerCase()) === 0 && '/?#'.indexOf(path.charAt(prefix.length)) !== -1;\n}\nfunction stripBasename(path, prefix) {\n  return hasBasename(path, prefix) ? path.substr(prefix.length) : path;\n}\nfunction stripTrailingSlash(path) {\n  return path.charAt(path.length - 1) === '/' ? path.slice(0, -1) : path;\n}\nfunction parsePath(path) {\n  var pathname = path || '/';\n  var search = '';\n  var hash = '';\n  var hashIndex = pathname.indexOf('#');\n\n  if (hashIndex !== -1) {\n    hash = pathname.substr(hashIndex);\n    pathname = pathname.substr(0, hashIndex);\n  }\n\n  var searchIndex = pathname.indexOf('?');\n\n  if (searchIndex !== -1) {\n    search = pathname.substr(searchIndex);\n    pathname = pathname.substr(0, searchIndex);\n  }\n\n  return {\n    pathname: pathname,\n    search: search === '?' ? '' : search,\n    hash: hash === '#' ? '' : hash\n  };\n}\nfunction createPath(location) {\n  var pathname = location.pathname,\n      search = location.search,\n      hash = location.hash;\n  var path = pathname || '/';\n  if (search && search !== '?') path += search.charAt(0) === '?' ? search : \"?\" + search;\n  if (hash && hash !== '#') path += hash.charAt(0) === '#' ? hash : \"#\" + hash;\n  return path;\n}\n\nfunction createLocation(path, state, key, currentLocation) {\n  var location;\n\n  if (typeof path === 'string') {\n    // Two-arg form: push(path, state)\n    location = parsePath(path);\n    location.state = state;\n  } else {\n    // One-arg form: push(location)\n    location = _extends({}, path);\n    if (location.pathname === undefined) location.pathname = '';\n\n    if (location.search) {\n      if (location.search.charAt(0) !== '?') location.search = '?' + location.search;\n    } else {\n      location.search = '';\n    }\n\n    if (location.hash) {\n      if (location.hash.charAt(0) !== '#') location.hash = '#' + location.hash;\n    } else {\n      location.hash = '';\n    }\n\n    if (state !== undefined && location.state === undefined) location.state = state;\n  }\n\n  try {\n    location.pathname = decodeURI(location.pathname);\n  } catch (e) {\n    if (e instanceof URIError) {\n      throw new URIError('Pathname \"' + location.pathname + '\" could not be decoded. ' + 'This is likely caused by an invalid percent-encoding.');\n    } else {\n      throw e;\n    }\n  }\n\n  if (key) location.key = key;\n\n  if (currentLocation) {\n    // Resolve incomplete/relative pathname relative to current location.\n    if (!location.pathname) {\n      location.pathname = currentLocation.pathname;\n    } else if (location.pathname.charAt(0) !== '/') {\n      location.pathname = resolvePathname(location.pathname, currentLocation.pathname);\n    }\n  } else {\n    // When there is no prior location and pathname is empty, set it to /\n    if (!location.pathname) {\n      location.pathname = '/';\n    }\n  }\n\n  return location;\n}\nfunction locationsAreEqual(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && a.key === b.key && valueEqual(a.state, b.state);\n}\n\nfunction createTransitionManager() {\n  var prompt = null;\n\n  function setPrompt(nextPrompt) {\n    warning(prompt == null, 'A history supports only one prompt at a time');\n    prompt = nextPrompt;\n    return function () {\n      if (prompt === nextPrompt) prompt = null;\n    };\n  }\n\n  function confirmTransitionTo(location, action, getUserConfirmation, callback) {\n    // TODO: If another transition starts while we're still confirming\n    // the previous one, we may end up in a weird state. Figure out the\n    // best way to handle this.\n    if (prompt != null) {\n      var result = typeof prompt === 'function' ? prompt(location, action) : prompt;\n\n      if (typeof result === 'string') {\n        if (typeof getUserConfirmation === 'function') {\n          getUserConfirmation(result, callback);\n        } else {\n          warning(false, 'A history needs a getUserConfirmation function in order to use a prompt message');\n          callback(true);\n        }\n      } else {\n        // Return false from a transition hook to cancel the transition.\n        callback(result !== false);\n      }\n    } else {\n      callback(true);\n    }\n  }\n\n  var listeners = [];\n\n  function appendListener(fn) {\n    var isActive = true;\n\n    function listener() {\n      if (isActive) fn.apply(void 0, arguments);\n    }\n\n    listeners.push(listener);\n    return function () {\n      isActive = false;\n      listeners = listeners.filter(function (item) {\n        return item !== listener;\n      });\n    };\n  }\n\n  function notifyListeners() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    listeners.forEach(function (listener) {\n      return listener.apply(void 0, args);\n    });\n  }\n\n  return {\n    setPrompt: setPrompt,\n    confirmTransitionTo: confirmTransitionTo,\n    appendListener: appendListener,\n    notifyListeners: notifyListeners\n  };\n}\n\nvar canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);\nfunction getConfirmation(message, callback) {\n  callback(window.confirm(message)); // eslint-disable-line no-alert\n}\n/**\n * Returns true if the HTML5 history API is supported. Taken from Modernizr.\n *\n * https://github.com/Modernizr/Modernizr/blob/master/LICENSE\n * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js\n * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586\n */\n\nfunction supportsHistory() {\n  var ua = window.navigator.userAgent;\n  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) return false;\n  return window.history && 'pushState' in window.history;\n}\n/**\n * Returns true if browser fires popstate on hash change.\n * IE10 and IE11 do not.\n */\n\nfunction supportsPopStateOnHashChange() {\n  return window.navigator.userAgent.indexOf('Trident') === -1;\n}\n/**\n * Returns false if using go(n) with hash history causes a full page reload.\n */\n\nfunction supportsGoWithoutReloadUsingHash() {\n  return window.navigator.userAgent.indexOf('Firefox') === -1;\n}\n/**\n * Returns true if a given popstate event is an extraneous WebKit event.\n * Accounts for the fact that Chrome on iOS fires real popstate events\n * containing undefined state when pressing the back button.\n */\n\nfunction isExtraneousPopstateEvent(event) {\n  return event.state === undefined && navigator.userAgent.indexOf('CriOS') === -1;\n}\n\nvar PopStateEvent = 'popstate';\nvar HashChangeEvent = 'hashchange';\n\nfunction getHistoryState() {\n  try {\n    return window.history.state || {};\n  } catch (e) {\n    // IE 11 sometimes throws when accessing window.history.state\n    // See https://github.com/ReactTraining/history/pull/289\n    return {};\n  }\n}\n/**\n * Creates a history object that uses the HTML5 history API including\n * pushState, replaceState, and the popstate event.\n */\n\n\nfunction createBrowserHistory(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  !canUseDOM ? invariant(false, 'Browser history needs a DOM') : void 0;\n  var globalHistory = window.history;\n  var canUseHistory = supportsHistory();\n  var needsHashChangeListener = !supportsPopStateOnHashChange();\n  var _props = props,\n      _props$forceRefresh = _props.forceRefresh,\n      forceRefresh = _props$forceRefresh === void 0 ? false : _props$forceRefresh,\n      _props$getUserConfirm = _props.getUserConfirmation,\n      getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm,\n      _props$keyLength = _props.keyLength,\n      keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;\n  var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : '';\n\n  function getDOMLocation(historyState) {\n    var _ref = historyState || {},\n        key = _ref.key,\n        state = _ref.state;\n\n    var _window$location = window.location,\n        pathname = _window$location.pathname,\n        search = _window$location.search,\n        hash = _window$location.hash;\n    var path = pathname + search + hash;\n    warning(!basename || hasBasename(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path \"' + path + '\" to begin with \"' + basename + '\".');\n    if (basename) path = stripBasename(path, basename);\n    return createLocation(path, state, key);\n  }\n\n  function createKey() {\n    return Math.random().toString(36).substr(2, keyLength);\n  }\n\n  var transitionManager = createTransitionManager();\n\n  function setState(nextState) {\n    _extends(history, nextState);\n\n    history.length = globalHistory.length;\n    transitionManager.notifyListeners(history.location, history.action);\n  }\n\n  function handlePopState(event) {\n    // Ignore extraneous popstate events in WebKit.\n    if (isExtraneousPopstateEvent(event)) return;\n    handlePop(getDOMLocation(event.state));\n  }\n\n  function handleHashChange() {\n    handlePop(getDOMLocation(getHistoryState()));\n  }\n\n  var forceNextPop = false;\n\n  function handlePop(location) {\n    if (forceNextPop) {\n      forceNextPop = false;\n      setState();\n    } else {\n      var action = 'POP';\n      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n        if (ok) {\n          setState({\n            action: action,\n            location: location\n          });\n        } else {\n          revertPop(location);\n        }\n      });\n    }\n  }\n\n  function revertPop(fromLocation) {\n    var toLocation = history.location; // TODO: We could probably make this more reliable by\n    // keeping a list of keys we've seen in sessionStorage.\n    // Instead, we just default to 0 for keys we don't know.\n\n    var toIndex = allKeys.indexOf(toLocation.key);\n    if (toIndex === -1) toIndex = 0;\n    var fromIndex = allKeys.indexOf(fromLocation.key);\n    if (fromIndex === -1) fromIndex = 0;\n    var delta = toIndex - fromIndex;\n\n    if (delta) {\n      forceNextPop = true;\n      go(delta);\n    }\n  }\n\n  var initialLocation = getDOMLocation(getHistoryState());\n  var allKeys = [initialLocation.key]; // Public interface\n\n  function createHref(location) {\n    return basename + createPath(location);\n  }\n\n  function push(path, state) {\n    warning(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored');\n    var action = 'PUSH';\n    var location = createLocation(path, state, createKey(), history.location);\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (!ok) return;\n      var href = createHref(location);\n      var key = location.key,\n          state = location.state;\n\n      if (canUseHistory) {\n        globalHistory.pushState({\n          key: key,\n          state: state\n        }, null, href);\n\n        if (forceRefresh) {\n          window.location.href = href;\n        } else {\n          var prevIndex = allKeys.indexOf(history.location.key);\n          var nextKeys = allKeys.slice(0, prevIndex + 1);\n          nextKeys.push(location.key);\n          allKeys = nextKeys;\n          setState({\n            action: action,\n            location: location\n          });\n        }\n      } else {\n        warning(state === undefined, 'Browser history cannot push state in browsers that do not support HTML5 history');\n        window.location.href = href;\n      }\n    });\n  }\n\n  function replace(path, state) {\n    warning(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored');\n    var action = 'REPLACE';\n    var location = createLocation(path, state, createKey(), history.location);\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (!ok) return;\n      var href = createHref(location);\n      var key = location.key,\n          state = location.state;\n\n      if (canUseHistory) {\n        globalHistory.replaceState({\n          key: key,\n          state: state\n        }, null, href);\n\n        if (forceRefresh) {\n          window.location.replace(href);\n        } else {\n          var prevIndex = allKeys.indexOf(history.location.key);\n          if (prevIndex !== -1) allKeys[prevIndex] = location.key;\n          setState({\n            action: action,\n            location: location\n          });\n        }\n      } else {\n        warning(state === undefined, 'Browser history cannot replace state in browsers that do not support HTML5 history');\n        window.location.replace(href);\n      }\n    });\n  }\n\n  function go(n) {\n    globalHistory.go(n);\n  }\n\n  function goBack() {\n    go(-1);\n  }\n\n  function goForward() {\n    go(1);\n  }\n\n  var listenerCount = 0;\n\n  function checkDOMListeners(delta) {\n    listenerCount += delta;\n\n    if (listenerCount === 1 && delta === 1) {\n      window.addEventListener(PopStateEvent, handlePopState);\n      if (needsHashChangeListener) window.addEventListener(HashChangeEvent, handleHashChange);\n    } else if (listenerCount === 0) {\n      window.removeEventListener(PopStateEvent, handlePopState);\n      if (needsHashChangeListener) window.removeEventListener(HashChangeEvent, handleHashChange);\n    }\n  }\n\n  var isBlocked = false;\n\n  function block(prompt) {\n    if (prompt === void 0) {\n      prompt = false;\n    }\n\n    var unblock = transitionManager.setPrompt(prompt);\n\n    if (!isBlocked) {\n      checkDOMListeners(1);\n      isBlocked = true;\n    }\n\n    return function () {\n      if (isBlocked) {\n        isBlocked = false;\n        checkDOMListeners(-1);\n      }\n\n      return unblock();\n    };\n  }\n\n  function listen(listener) {\n    var unlisten = transitionManager.appendListener(listener);\n    checkDOMListeners(1);\n    return function () {\n      checkDOMListeners(-1);\n      unlisten();\n    };\n  }\n\n  var history = {\n    length: globalHistory.length,\n    action: 'POP',\n    location: initialLocation,\n    createHref: createHref,\n    push: push,\n    replace: replace,\n    go: go,\n    goBack: goBack,\n    goForward: goForward,\n    block: block,\n    listen: listen\n  };\n  return history;\n}\n\nvar HashChangeEvent$1 = 'hashchange';\nvar HashPathCoders = {\n  hashbang: {\n    encodePath: function encodePath(path) {\n      return path.charAt(0) === '!' ? path : '!/' + stripLeadingSlash(path);\n    },\n    decodePath: function decodePath(path) {\n      return path.charAt(0) === '!' ? path.substr(1) : path;\n    }\n  },\n  noslash: {\n    encodePath: stripLeadingSlash,\n    decodePath: addLeadingSlash\n  },\n  slash: {\n    encodePath: addLeadingSlash,\n    decodePath: addLeadingSlash\n  }\n};\n\nfunction stripHash(url) {\n  var hashIndex = url.indexOf('#');\n  return hashIndex === -1 ? url : url.slice(0, hashIndex);\n}\n\nfunction getHashPath() {\n  // We can't use window.location.hash here because it's not\n  // consistent across browsers - Firefox will pre-decode it!\n  var href = window.location.href;\n  var hashIndex = href.indexOf('#');\n  return hashIndex === -1 ? '' : href.substring(hashIndex + 1);\n}\n\nfunction pushHashPath(path) {\n  window.location.hash = path;\n}\n\nfunction replaceHashPath(path) {\n  window.location.replace(stripHash(window.location.href) + '#' + path);\n}\n\nfunction createHashHistory(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  !canUseDOM ? invariant(false, 'Hash history needs a DOM') : void 0;\n  var globalHistory = window.history;\n  var canGoWithoutReload = supportsGoWithoutReloadUsingHash();\n  var _props = props,\n      _props$getUserConfirm = _props.getUserConfirmation,\n      getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm,\n      _props$hashType = _props.hashType,\n      hashType = _props$hashType === void 0 ? 'slash' : _props$hashType;\n  var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : '';\n  var _HashPathCoders$hashT = HashPathCoders[hashType],\n      encodePath = _HashPathCoders$hashT.encodePath,\n      decodePath = _HashPathCoders$hashT.decodePath;\n\n  function getDOMLocation() {\n    var path = decodePath(getHashPath());\n    warning(!basename || hasBasename(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path \"' + path + '\" to begin with \"' + basename + '\".');\n    if (basename) path = stripBasename(path, basename);\n    return createLocation(path);\n  }\n\n  var transitionManager = createTransitionManager();\n\n  function setState(nextState) {\n    _extends(history, nextState);\n\n    history.length = globalHistory.length;\n    transitionManager.notifyListeners(history.location, history.action);\n  }\n\n  var forceNextPop = false;\n  var ignorePath = null;\n\n  function locationsAreEqual$$1(a, b) {\n    return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash;\n  }\n\n  function handleHashChange() {\n    var path = getHashPath();\n    var encodedPath = encodePath(path);\n\n    if (path !== encodedPath) {\n      // Ensure we always have a properly-encoded hash.\n      replaceHashPath(encodedPath);\n    } else {\n      var location = getDOMLocation();\n      var prevLocation = history.location;\n      if (!forceNextPop && locationsAreEqual$$1(prevLocation, location)) return; // A hashchange doesn't always == location change.\n\n      if (ignorePath === createPath(location)) return; // Ignore this change; we already setState in push/replace.\n\n      ignorePath = null;\n      handlePop(location);\n    }\n  }\n\n  function handlePop(location) {\n    if (forceNextPop) {\n      forceNextPop = false;\n      setState();\n    } else {\n      var action = 'POP';\n      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n        if (ok) {\n          setState({\n            action: action,\n            location: location\n          });\n        } else {\n          revertPop(location);\n        }\n      });\n    }\n  }\n\n  function revertPop(fromLocation) {\n    var toLocation = history.location; // TODO: We could probably make this more reliable by\n    // keeping a list of paths we've seen in sessionStorage.\n    // Instead, we just default to 0 for paths we don't know.\n\n    var toIndex = allPaths.lastIndexOf(createPath(toLocation));\n    if (toIndex === -1) toIndex = 0;\n    var fromIndex = allPaths.lastIndexOf(createPath(fromLocation));\n    if (fromIndex === -1) fromIndex = 0;\n    var delta = toIndex - fromIndex;\n\n    if (delta) {\n      forceNextPop = true;\n      go(delta);\n    }\n  } // Ensure the hash is encoded properly before doing anything else.\n\n\n  var path = getHashPath();\n  var encodedPath = encodePath(path);\n  if (path !== encodedPath) replaceHashPath(encodedPath);\n  var initialLocation = getDOMLocation();\n  var allPaths = [createPath(initialLocation)]; // Public interface\n\n  function createHref(location) {\n    var baseTag = document.querySelector('base');\n    var href = '';\n\n    if (baseTag && baseTag.getAttribute('href')) {\n      href = stripHash(window.location.href);\n    }\n\n    return href + '#' + encodePath(basename + createPath(location));\n  }\n\n  function push(path, state) {\n    warning(state === undefined, 'Hash history cannot push state; it is ignored');\n    var action = 'PUSH';\n    var location = createLocation(path, undefined, undefined, history.location);\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (!ok) return;\n      var path = createPath(location);\n      var encodedPath = encodePath(basename + path);\n      var hashChanged = getHashPath() !== encodedPath;\n\n      if (hashChanged) {\n        // We cannot tell if a hashchange was caused by a PUSH, so we'd\n        // rather setState here and ignore the hashchange. The caveat here\n        // is that other hash histories in the page will consider it a POP.\n        ignorePath = path;\n        pushHashPath(encodedPath);\n        var prevIndex = allPaths.lastIndexOf(createPath(history.location));\n        var nextPaths = allPaths.slice(0, prevIndex + 1);\n        nextPaths.push(path);\n        allPaths = nextPaths;\n        setState({\n          action: action,\n          location: location\n        });\n      } else {\n        warning(false, 'Hash history cannot PUSH the same path; a new entry will not be added to the history stack');\n        setState();\n      }\n    });\n  }\n\n  function replace(path, state) {\n    warning(state === undefined, 'Hash history cannot replace state; it is ignored');\n    var action = 'REPLACE';\n    var location = createLocation(path, undefined, undefined, history.location);\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (!ok) return;\n      var path = createPath(location);\n      var encodedPath = encodePath(basename + path);\n      var hashChanged = getHashPath() !== encodedPath;\n\n      if (hashChanged) {\n        // We cannot tell if a hashchange was caused by a REPLACE, so we'd\n        // rather setState here and ignore the hashchange. The caveat here\n        // is that other hash histories in the page will consider it a POP.\n        ignorePath = path;\n        replaceHashPath(encodedPath);\n      }\n\n      var prevIndex = allPaths.indexOf(createPath(history.location));\n      if (prevIndex !== -1) allPaths[prevIndex] = path;\n      setState({\n        action: action,\n        location: location\n      });\n    });\n  }\n\n  function go(n) {\n    warning(canGoWithoutReload, 'Hash history go(n) causes a full page reload in this browser');\n    globalHistory.go(n);\n  }\n\n  function goBack() {\n    go(-1);\n  }\n\n  function goForward() {\n    go(1);\n  }\n\n  var listenerCount = 0;\n\n  function checkDOMListeners(delta) {\n    listenerCount += delta;\n\n    if (listenerCount === 1 && delta === 1) {\n      window.addEventListener(HashChangeEvent$1, handleHashChange);\n    } else if (listenerCount === 0) {\n      window.removeEventListener(HashChangeEvent$1, handleHashChange);\n    }\n  }\n\n  var isBlocked = false;\n\n  function block(prompt) {\n    if (prompt === void 0) {\n      prompt = false;\n    }\n\n    var unblock = transitionManager.setPrompt(prompt);\n\n    if (!isBlocked) {\n      checkDOMListeners(1);\n      isBlocked = true;\n    }\n\n    return function () {\n      if (isBlocked) {\n        isBlocked = false;\n        checkDOMListeners(-1);\n      }\n\n      return unblock();\n    };\n  }\n\n  function listen(listener) {\n    var unlisten = transitionManager.appendListener(listener);\n    checkDOMListeners(1);\n    return function () {\n      checkDOMListeners(-1);\n      unlisten();\n    };\n  }\n\n  var history = {\n    length: globalHistory.length,\n    action: 'POP',\n    location: initialLocation,\n    createHref: createHref,\n    push: push,\n    replace: replace,\n    go: go,\n    goBack: goBack,\n    goForward: goForward,\n    block: block,\n    listen: listen\n  };\n  return history;\n}\n\nfunction clamp(n, lowerBound, upperBound) {\n  return Math.min(Math.max(n, lowerBound), upperBound);\n}\n/**\n * Creates a history object that stores locations in memory.\n */\n\n\nfunction createMemoryHistory(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var _props = props,\n      getUserConfirmation = _props.getUserConfirmation,\n      _props$initialEntries = _props.initialEntries,\n      initialEntries = _props$initialEntries === void 0 ? ['/'] : _props$initialEntries,\n      _props$initialIndex = _props.initialIndex,\n      initialIndex = _props$initialIndex === void 0 ? 0 : _props$initialIndex,\n      _props$keyLength = _props.keyLength,\n      keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;\n  var transitionManager = createTransitionManager();\n\n  function setState(nextState) {\n    _extends(history, nextState);\n\n    history.length = history.entries.length;\n    transitionManager.notifyListeners(history.location, history.action);\n  }\n\n  function createKey() {\n    return Math.random().toString(36).substr(2, keyLength);\n  }\n\n  var index = clamp(initialIndex, 0, initialEntries.length - 1);\n  var entries = initialEntries.map(function (entry) {\n    return typeof entry === 'string' ? createLocation(entry, undefined, createKey()) : createLocation(entry, undefined, entry.key || createKey());\n  }); // Public interface\n\n  var createHref = createPath;\n\n  function push(path, state) {\n    warning(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored');\n    var action = 'PUSH';\n    var location = createLocation(path, state, createKey(), history.location);\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (!ok) return;\n      var prevIndex = history.index;\n      var nextIndex = prevIndex + 1;\n      var nextEntries = history.entries.slice(0);\n\n      if (nextEntries.length > nextIndex) {\n        nextEntries.splice(nextIndex, nextEntries.length - nextIndex, location);\n      } else {\n        nextEntries.push(location);\n      }\n\n      setState({\n        action: action,\n        location: location,\n        index: nextIndex,\n        entries: nextEntries\n      });\n    });\n  }\n\n  function replace(path, state) {\n    warning(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored');\n    var action = 'REPLACE';\n    var location = createLocation(path, state, createKey(), history.location);\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (!ok) return;\n      history.entries[history.index] = location;\n      setState({\n        action: action,\n        location: location\n      });\n    });\n  }\n\n  function go(n) {\n    var nextIndex = clamp(history.index + n, 0, history.entries.length - 1);\n    var action = 'POP';\n    var location = history.entries[nextIndex];\n    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {\n      if (ok) {\n        setState({\n          action: action,\n          location: location,\n          index: nextIndex\n        });\n      } else {\n        // Mimic the behavior of DOM histories by\n        // causing a render after a cancelled POP.\n        setState();\n      }\n    });\n  }\n\n  function goBack() {\n    go(-1);\n  }\n\n  function goForward() {\n    go(1);\n  }\n\n  function canGo(n) {\n    var nextIndex = history.index + n;\n    return nextIndex >= 0 && nextIndex < history.entries.length;\n  }\n\n  function block(prompt) {\n    if (prompt === void 0) {\n      prompt = false;\n    }\n\n    return transitionManager.setPrompt(prompt);\n  }\n\n  function listen(listener) {\n    return transitionManager.appendListener(listener);\n  }\n\n  var history = {\n    length: entries.length,\n    action: 'POP',\n    location: entries[index],\n    index: index,\n    entries: entries,\n    createHref: createHref,\n    push: push,\n    replace: replace,\n    go: go,\n    goBack: goBack,\n    goForward: goForward,\n    canGo: canGo,\n    block: block,\n    listen: listen\n  };\n  return history;\n}\n\nexports.createBrowserHistory = createBrowserHistory;\nexports.createHashHistory = createHashHistory;\nexports.createMemoryHistory = createMemoryHistory;\nexports.createLocation = createLocation;\nexports.locationsAreEqual = locationsAreEqual;\nexports.parsePath = parsePath;\nexports.createPath = createPath;\n","\"use strict\";function _interopDefault(t){return t&&\"object\"==typeof t&&\"default\"in t?t.default:t}Object.defineProperty(exports,\"__esModule\",{value:!0});var resolvePathname=_interopDefault(require(\"resolve-pathname\")),valueEqual=_interopDefault(require(\"value-equal\"));require(\"tiny-warning\");var invariant=_interopDefault(require(\"tiny-invariant\"));function _extends(){return(_extends=Object.assign||function(t){for(var n=1;n<arguments.length;n++){var e=arguments[n];for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&(t[a]=e[a])}return t}).apply(this,arguments)}function addLeadingSlash(t){return\"/\"===t.charAt(0)?t:\"/\"+t}function stripLeadingSlash(t){return\"/\"===t.charAt(0)?t.substr(1):t}function hasBasename(t,n){return 0===t.toLowerCase().indexOf(n.toLowerCase())&&-1!==\"/?#\".indexOf(t.charAt(n.length))}function stripBasename(t,n){return hasBasename(t,n)?t.substr(n.length):t}function stripTrailingSlash(t){return\"/\"===t.charAt(t.length-1)?t.slice(0,-1):t}function parsePath(t){var n=t||\"/\",e=\"\",a=\"\",r=n.indexOf(\"#\");-1!==r&&(a=n.substr(r),n=n.substr(0,r));var o=n.indexOf(\"?\");return-1!==o&&(e=n.substr(o),n=n.substr(0,o)),{pathname:n,search:\"?\"===e?\"\":e,hash:\"#\"===a?\"\":a}}function createPath(t){var n=t.pathname,e=t.search,a=t.hash,r=n||\"/\";return e&&\"?\"!==e&&(r+=\"?\"===e.charAt(0)?e:\"?\"+e),a&&\"#\"!==a&&(r+=\"#\"===a.charAt(0)?a:\"#\"+a),r}function createLocation(t,n,e,a){var r;\"string\"==typeof t?(r=parsePath(t)).state=n:(void 0===(r=_extends({},t)).pathname&&(r.pathname=\"\"),r.search?\"?\"!==r.search.charAt(0)&&(r.search=\"?\"+r.search):r.search=\"\",r.hash?\"#\"!==r.hash.charAt(0)&&(r.hash=\"#\"+r.hash):r.hash=\"\",void 0!==n&&void 0===r.state&&(r.state=n));try{r.pathname=decodeURI(r.pathname)}catch(t){throw t instanceof URIError?new URIError('Pathname \"'+r.pathname+'\" could not be decoded. This is likely caused by an invalid percent-encoding.'):t}return e&&(r.key=e),a?r.pathname?\"/\"!==r.pathname.charAt(0)&&(r.pathname=resolvePathname(r.pathname,a.pathname)):r.pathname=a.pathname:r.pathname||(r.pathname=\"/\"),r}function locationsAreEqual(t,n){return t.pathname===n.pathname&&t.search===n.search&&t.hash===n.hash&&t.key===n.key&&valueEqual(t.state,n.state)}function createTransitionManager(){var o=null;var a=[];return{setPrompt:function(t){return o=t,function(){o===t&&(o=null)}},confirmTransitionTo:function(t,n,e,a){if(null!=o){var r=\"function\"==typeof o?o(t,n):o;\"string\"==typeof r?\"function\"==typeof e?e(r,a):a(!0):a(!1!==r)}else a(!0)},appendListener:function(t){var n=!0;function e(){n&&t.apply(void 0,arguments)}return a.push(e),function(){n=!1,a=a.filter(function(t){return t!==e})}},notifyListeners:function(){for(var t=arguments.length,n=new Array(t),e=0;e<t;e++)n[e]=arguments[e];a.forEach(function(t){return t.apply(void 0,n)})}}}var canUseDOM=!(\"undefined\"==typeof window||!window.document||!window.document.createElement);function getConfirmation(t,n){n(window.confirm(t))}function supportsHistory(){var t=window.navigator.userAgent;return(-1===t.indexOf(\"Android 2.\")&&-1===t.indexOf(\"Android 4.0\")||-1===t.indexOf(\"Mobile Safari\")||-1!==t.indexOf(\"Chrome\")||-1!==t.indexOf(\"Windows Phone\"))&&(window.history&&\"pushState\"in window.history)}function supportsPopStateOnHashChange(){return-1===window.navigator.userAgent.indexOf(\"Trident\")}function supportsGoWithoutReloadUsingHash(){return-1===window.navigator.userAgent.indexOf(\"Firefox\")}function isExtraneousPopstateEvent(t){return void 0===t.state&&-1===navigator.userAgent.indexOf(\"CriOS\")}var PopStateEvent=\"popstate\",HashChangeEvent=\"hashchange\";function getHistoryState(){try{return window.history.state||{}}catch(t){return{}}}function createBrowserHistory(t){void 0===t&&(t={}),canUseDOM||invariant(!1);var s=window.history,c=supportsHistory(),n=!supportsPopStateOnHashChange(),e=t,a=e.forceRefresh,h=void 0!==a&&a,r=e.getUserConfirmation,u=void 0===r?getConfirmation:r,o=e.keyLength,i=void 0===o?6:o,f=t.basename?stripTrailingSlash(addLeadingSlash(t.basename)):\"\";function l(t){var n=t||{},e=n.key,a=n.state,r=window.location,o=r.pathname+r.search+r.hash;return f&&(o=stripBasename(o,f)),createLocation(o,a,e)}function d(){return Math.random().toString(36).substr(2,i)}var v=createTransitionManager();function p(t){_extends(T,t),T.length=s.length,v.notifyListeners(T.location,T.action)}function g(t){isExtraneousPopstateEvent(t)||w(l(t.state))}function P(){w(l(getHistoryState()))}var m=!1;function w(n){if(m)m=!1,p();else{v.confirmTransitionTo(n,\"POP\",u,function(t){t?p({action:\"POP\",location:n}):function(t){var n=T.location,e=H.indexOf(n.key);-1===e&&(e=0);var a=H.indexOf(t.key);-1===a&&(a=0);var r=e-a;r&&(m=!0,L(r))}(n)})}}var y=l(getHistoryState()),H=[y.key];function x(t){return f+createPath(t)}function L(t){s.go(t)}var O=0;function E(t){1===(O+=t)&&1===t?(window.addEventListener(PopStateEvent,g),n&&window.addEventListener(HashChangeEvent,P)):0===O&&(window.removeEventListener(PopStateEvent,g),n&&window.removeEventListener(HashChangeEvent,P))}var S=!1;var T={length:s.length,action:\"POP\",location:y,createHref:x,push:function(t,n){var i=createLocation(t,n,d(),T.location);v.confirmTransitionTo(i,\"PUSH\",u,function(t){if(t){var n=x(i),e=i.key,a=i.state;if(c)if(s.pushState({key:e,state:a},null,n),h)window.location.href=n;else{var r=H.indexOf(T.location.key),o=H.slice(0,r+1);o.push(i.key),H=o,p({action:\"PUSH\",location:i})}else window.location.href=n}})},replace:function(t,n){var o=\"REPLACE\",i=createLocation(t,n,d(),T.location);v.confirmTransitionTo(i,o,u,function(t){if(t){var n=x(i),e=i.key,a=i.state;if(c)if(s.replaceState({key:e,state:a},null,n),h)window.location.replace(n);else{var r=H.indexOf(T.location.key);-1!==r&&(H[r]=i.key),p({action:o,location:i})}else window.location.replace(n)}})},go:L,goBack:function(){L(-1)},goForward:function(){L(1)},block:function(t){void 0===t&&(t=!1);var n=v.setPrompt(t);return S||(E(1),S=!0),function(){return S&&(S=!1,E(-1)),n()}},listen:function(t){var n=v.appendListener(t);return E(1),function(){E(-1),n()}}};return T}var HashChangeEvent$1=\"hashchange\",HashPathCoders={hashbang:{encodePath:function(t){return\"!\"===t.charAt(0)?t:\"!/\"+stripLeadingSlash(t)},decodePath:function(t){return\"!\"===t.charAt(0)?t.substr(1):t}},noslash:{encodePath:stripLeadingSlash,decodePath:addLeadingSlash},slash:{encodePath:addLeadingSlash,decodePath:addLeadingSlash}};function stripHash(t){var n=t.indexOf(\"#\");return-1===n?t:t.slice(0,n)}function getHashPath(){var t=window.location.href,n=t.indexOf(\"#\");return-1===n?\"\":t.substring(n+1)}function pushHashPath(t){window.location.hash=t}function replaceHashPath(t){window.location.replace(stripHash(window.location.href)+\"#\"+t)}function createHashHistory(t){void 0===t&&(t={}),canUseDOM||invariant(!1);var n=window.history,e=(supportsGoWithoutReloadUsingHash(),t),a=e.getUserConfirmation,i=void 0===a?getConfirmation:a,r=e.hashType,o=void 0===r?\"slash\":r,s=t.basename?stripTrailingSlash(addLeadingSlash(t.basename)):\"\",c=HashPathCoders[o],h=c.encodePath,u=c.decodePath;function f(){var t=u(getHashPath());return s&&(t=stripBasename(t,s)),createLocation(t)}var l=createTransitionManager();function d(t){_extends(E,t),E.length=n.length,l.notifyListeners(E.location,E.action)}var v=!1,p=null;function g(){var t=getHashPath(),n=h(t);if(t!==n)replaceHashPath(n);else{var e=f(),a=E.location;if(!v&&function(t,n){return t.pathname===n.pathname&&t.search===n.search&&t.hash===n.hash}(a,e))return;if(p===createPath(e))return;p=null,function(n){if(v)v=!1,d();else{l.confirmTransitionTo(n,\"POP\",i,function(t){t?d({action:\"POP\",location:n}):function(t){var n=E.location,e=y.lastIndexOf(createPath(n));-1===e&&(e=0);var a=y.lastIndexOf(createPath(t));-1===a&&(a=0);var r=e-a;r&&(v=!0,H(r))}(n)})}}(e)}}var P=getHashPath(),m=h(P);P!==m&&replaceHashPath(m);var w=f(),y=[createPath(w)];function H(t){n.go(t)}var x=0;function L(t){1===(x+=t)&&1===t?window.addEventListener(HashChangeEvent$1,g):0===x&&window.removeEventListener(HashChangeEvent$1,g)}var O=!1;var E={length:n.length,action:\"POP\",location:w,createHref:function(t){var n=document.querySelector(\"base\"),e=\"\";return n&&n.getAttribute(\"href\")&&(e=stripHash(window.location.href)),e+\"#\"+h(s+createPath(t))},push:function(t,n){var o=createLocation(t,void 0,void 0,E.location);l.confirmTransitionTo(o,\"PUSH\",i,function(t){if(t){var n=createPath(o),e=h(s+n);if(getHashPath()!==e){p=n,pushHashPath(e);var a=y.lastIndexOf(createPath(E.location)),r=y.slice(0,a+1);r.push(n),y=r,d({action:\"PUSH\",location:o})}else d()}})},replace:function(t,n){var r=\"REPLACE\",o=createLocation(t,void 0,void 0,E.location);l.confirmTransitionTo(o,r,i,function(t){if(t){var n=createPath(o),e=h(s+n);getHashPath()!==e&&(p=n,replaceHashPath(e));var a=y.indexOf(createPath(E.location));-1!==a&&(y[a]=n),d({action:r,location:o})}})},go:H,goBack:function(){H(-1)},goForward:function(){H(1)},block:function(t){void 0===t&&(t=!1);var n=l.setPrompt(t);return O||(L(1),O=!0),function(){return O&&(O=!1,L(-1)),n()}},listen:function(t){var n=l.appendListener(t);return L(1),function(){L(-1),n()}}};return E}function clamp(t,n,e){return Math.min(Math.max(t,n),e)}function createMemoryHistory(t){void 0===t&&(t={});var n=t,r=n.getUserConfirmation,e=n.initialEntries,a=void 0===e?[\"/\"]:e,o=n.initialIndex,i=void 0===o?0:o,s=n.keyLength,c=void 0===s?6:s,h=createTransitionManager();function u(t){_extends(g,t),g.length=g.entries.length,h.notifyListeners(g.location,g.action)}function f(){return Math.random().toString(36).substr(2,c)}var l=clamp(i,0,a.length-1),d=a.map(function(t){return createLocation(t,void 0,\"string\"==typeof t?f():t.key||f())}),v=createPath;function p(t){var n=clamp(g.index+t,0,g.entries.length-1),e=g.entries[n];h.confirmTransitionTo(e,\"POP\",r,function(t){t?u({action:\"POP\",location:e,index:n}):u()})}var g={length:d.length,action:\"POP\",location:d[l],index:l,entries:d,createHref:v,push:function(t,n){var a=createLocation(t,n,f(),g.location);h.confirmTransitionTo(a,\"PUSH\",r,function(t){if(t){var n=g.index+1,e=g.entries.slice(0);e.length>n?e.splice(n,e.length-n,a):e.push(a),u({action:\"PUSH\",location:a,index:n,entries:e})}})},replace:function(t,n){var e=\"REPLACE\",a=createLocation(t,n,f(),g.location);h.confirmTransitionTo(a,e,r,function(t){t&&(g.entries[g.index]=a,u({action:e,location:a}))})},go:p,goBack:function(){p(-1)},goForward:function(){p(1)},canGo:function(t){var n=g.index+t;return 0<=n&&n<g.entries.length},block:function(t){return void 0===t&&(t=!1),h.setPrompt(t)},listen:function(t){return h.appendListener(t)}};return g}exports.createBrowserHistory=createBrowserHistory,exports.createHashHistory=createHashHistory,exports.createMemoryHistory=createMemoryHistory,exports.createLocation=createLocation,exports.locationsAreEqual=locationsAreEqual,exports.parsePath=parsePath,exports.createPath=createPath;\n","'use strict';\n\nif (\"development\" === 'production') {\n  module.exports = require('./cjs/history.min.js');\n} else {\n  module.exports = require('./cjs/history.js');\n}\n","'use strict';\n\nvar reactIs = require('react-is');\n\n/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\nvar REACT_STATICS = {\n  childContextTypes: true,\n  contextType: true,\n  contextTypes: true,\n  defaultProps: true,\n  displayName: true,\n  getDefaultProps: true,\n  getDerivedStateFromError: true,\n  getDerivedStateFromProps: true,\n  mixins: true,\n  propTypes: true,\n  type: true\n};\nvar KNOWN_STATICS = {\n  name: true,\n  length: true,\n  prototype: true,\n  caller: true,\n  callee: true,\n  arguments: true,\n  arity: true\n};\nvar FORWARD_REF_STATICS = {\n  '$$typeof': true,\n  render: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true\n};\nvar MEMO_STATICS = {\n  '$$typeof': true,\n  compare: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true,\n  type: true\n};\nvar TYPE_STATICS = {};\nTYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;\nTYPE_STATICS[reactIs.Memo] = MEMO_STATICS;\n\nfunction getStatics(component) {\n  // React v16.11 and below\n  if (reactIs.isMemo(component)) {\n    return MEMO_STATICS;\n  } // React v16.12 and above\n\n\n  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;\n}\n\nvar defineProperty = Object.defineProperty;\nvar getOwnPropertyNames = Object.getOwnPropertyNames;\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\nvar getPrototypeOf = Object.getPrototypeOf;\nvar objectPrototype = Object.prototype;\nfunction hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {\n  if (typeof sourceComponent !== 'string') {\n    // don't hoist over string (html) components\n    if (objectPrototype) {\n      var inheritedComponent = getPrototypeOf(sourceComponent);\n\n      if (inheritedComponent && inheritedComponent !== objectPrototype) {\n        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);\n      }\n    }\n\n    var keys = getOwnPropertyNames(sourceComponent);\n\n    if (getOwnPropertySymbols) {\n      keys = keys.concat(getOwnPropertySymbols(sourceComponent));\n    }\n\n    var targetStatics = getStatics(targetComponent);\n    var sourceStatics = getStatics(sourceComponent);\n\n    for (var i = 0; i < keys.length; ++i) {\n      var key = keys[i];\n\n      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {\n        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);\n\n        try {\n          // Avoid failures from read-only properties\n          defineProperty(targetComponent, key, descriptor);\n        } catch (e) {}\n      }\n    }\n  }\n\n  return targetComponent;\n}\n\nmodule.exports = hoistNonReactStatics;\n","/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n","var isarray = require('isarray')\n\n/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp\nmodule.exports.parse = parse\nmodule.exports.compile = compile\nmodule.exports.tokensToFunction = tokensToFunction\nmodule.exports.tokensToRegExp = tokensToRegExp\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\", undefined]\n  // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined, undefined]\n  // \"/*\"            => [\"/\", undefined, undefined, undefined, undefined, \"*\"]\n  '([\\\\/.])?(?:(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?|(\\\\*))'\n].join('|'), 'g')\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = []\n  var key = 0\n  var index = 0\n  var path = ''\n  var defaultDelimiter = options && options.delimiter || '/'\n  var res\n\n  while ((res = PATH_REGEXP.exec(str)) != null) {\n    var m = res[0]\n    var escaped = res[1]\n    var offset = res.index\n    path += str.slice(index, offset)\n    index = offset + m.length\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1]\n      continue\n    }\n\n    var next = str[index]\n    var prefix = res[2]\n    var name = res[3]\n    var capture = res[4]\n    var group = res[5]\n    var modifier = res[6]\n    var asterisk = res[7]\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path)\n      path = ''\n    }\n\n    var partial = prefix != null && next != null && next !== prefix\n    var repeat = modifier === '+' || modifier === '*'\n    var optional = modifier === '?' || modifier === '*'\n    var delimiter = res[2] || defaultDelimiter\n    var pattern = capture || group\n\n    tokens.push({\n      name: name || key++,\n      prefix: prefix || '',\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      asterisk: !!asterisk,\n      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')\n    })\n  }\n\n  // Match any characters still remaining.\n  if (index < str.length) {\n    path += str.substr(index)\n  }\n\n  // If the path exists, push it onto the end.\n  if (path) {\n    tokens.push(path)\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options), options)\n}\n\n/**\n * Prettier encoding of URI path segments.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeURIComponentPretty (str) {\n  return encodeURI(str).replace(/[\\/?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeAsterisk (str) {\n  return encodeURI(str).replace(/[?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens, options) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length)\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$', flags(options))\n    }\n  }\n\n  return function (obj, opts) {\n    var path = ''\n    var data = obj || {}\n    var options = opts || {}\n    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i]\n\n      if (typeof token === 'string') {\n        path += token\n\n        continue\n      }\n\n      var value = data[token.name]\n      var segment\n\n      if (value == null) {\n        if (token.optional) {\n          // Prepend partial segment prefixes.\n          if (token.partial) {\n            path += token.prefix\n          }\n\n          continue\n        } else {\n          throw new TypeError('Expected \"' + token.name + '\" to be defined')\n        }\n      }\n\n      if (isarray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but received `' + JSON.stringify(value) + '`')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) {\n            continue\n          } else {\n            throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n          }\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j])\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\", but received `' + JSON.stringify(segment) + '`')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment\n        }\n\n        continue\n      }\n\n      segment = token.asterisk ? encodeAsterisk(value) : encode(value)\n\n      if (!matches[i].test(segment)) {\n        throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but received \"' + segment + '\"')\n      }\n\n      path += token.prefix + segment\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|\\/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$\\/()])/g, '\\\\$1')\n}\n\n/**\n * Attach the keys as a property of the regexp.\n *\n * @param  {!RegExp} re\n * @param  {Array}   keys\n * @return {!RegExp}\n */\nfunction attachKeys (re, keys) {\n  re.keys = keys\n  return re\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options && options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {!Array}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g)\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        asterisk: false,\n        pattern: null\n      })\n    }\n  }\n\n  return attachKeys(path, keys)\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array}   keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = []\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source)\n  }\n\n  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options))\n\n  return attachKeys(regexp, keys)\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {!Array}  keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}          tokens\n * @param  {(Array|Object)=} keys\n * @param  {Object=}         options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options)\n    keys = []\n  }\n\n  options = options || {}\n\n  var strict = options.strict\n  var end = options.end !== false\n  var route = ''\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n\n    if (typeof token === 'string') {\n      route += escapeString(token)\n    } else {\n      var prefix = escapeString(token.prefix)\n      var capture = '(?:' + token.pattern + ')'\n\n      keys.push(token)\n\n      if (token.repeat) {\n        capture += '(?:' + prefix + capture + ')*'\n      }\n\n      if (token.optional) {\n        if (!token.partial) {\n          capture = '(?:' + prefix + '(' + capture + '))?'\n        } else {\n          capture = prefix + '(' + capture + ')?'\n        }\n      } else {\n        capture = prefix + '(' + capture + ')'\n      }\n\n      route += capture\n    }\n  }\n\n  var delimiter = escapeString(options.delimiter || '/')\n  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter\n\n  // In non-strict mode we allow a slash at the end of match. If the path to\n  // match already ends with a slash, we remove it for consistency. The slash\n  // is valid at the end of a path match, not in the middle. This is important\n  // in non-ending mode, where \"/test/\" shouldn't match \"/test//route\".\n  if (!strict) {\n    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?'\n  }\n\n  if (end) {\n    route += '$'\n  } else {\n    // In non-ending mode, we need the capturing groups to match as much as\n    // possible by using a positive lookahead to the end or next path segment.\n    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)'\n  }\n\n  return attachKeys(new RegExp('^' + route, flags(options)), keys)\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {(Array|Object)=}       keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options)\n    keys = []\n  }\n\n  options = options || {}\n\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, /** @type {!Array} */ (keys))\n  }\n\n  if (isarray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)\n}\n","module.exports = Array.isArray || function (arr) {\n  return Object.prototype.toString.call(arr) == '[object Array]';\n};\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar printWarning = function() {};\n\nif (\"development\" !== 'production') {\n  var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n  var loggedTypeFailures = {};\n\n  printWarning = function(text) {\n    var message = 'Warning: ' + text;\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n}\n\n/**\n * Assert that the values match with the type specs.\n * Error messages are memorized and will only be shown once.\n *\n * @param {object} typeSpecs Map of name to a ReactPropType\n * @param {object} values Runtime values that need to be type-checked\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @param {string} componentName Name of the component for error messages.\n * @param {?Function} getStack Returns the component stack.\n * @private\n */\nfunction checkPropTypes(typeSpecs, values, location, componentName, getStack) {\n  if (\"development\" !== 'production') {\n    for (var typeSpecName in typeSpecs) {\n      if (typeSpecs.hasOwnProperty(typeSpecName)) {\n        var error;\n        // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            var err = Error(\n              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +\n              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'\n            );\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);\n        } catch (ex) {\n          error = ex;\n        }\n        if (error && !(error instanceof Error)) {\n          printWarning(\n            (componentName || 'React class') + ': type specification of ' +\n            location + ' `' + typeSpecName + '` is invalid; the type checker ' +\n            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +\n            'You may have forgotten to pass an argument to the type checker ' +\n            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +\n            'shape all require an argument).'\n          )\n\n        }\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error.message] = true;\n\n          var stack = getStack ? getStack() : '';\n\n          printWarning(\n            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')\n          );\n        }\n      }\n    }\n  }\n}\n\nmodule.exports = checkPropTypes;\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim\n  };\n\n  ReactPropTypes.checkPropTypes = emptyFunction;\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar assign = require('object-assign');\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\nvar checkPropTypes = require('./checkPropTypes');\n\nvar printWarning = function() {};\n\nif (\"development\" !== 'production') {\n  printWarning = function(text) {\n    var message = 'Warning: ' + text;\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n}\n\nfunction emptyFunctionThatReturnsNull() {\n  return null;\n}\n\nmodule.exports = function(isValidElement, throwOnDirectAccess) {\n  /* global Symbol */\n  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.\n\n  /**\n   * Returns the iterator method function contained on the iterable object.\n   *\n   * Be sure to invoke the function with the iterable as context:\n   *\n   *     var iteratorFn = getIteratorFn(myIterable);\n   *     if (iteratorFn) {\n   *       var iterator = iteratorFn.call(myIterable);\n   *       ...\n   *     }\n   *\n   * @param {?object} maybeIterable\n   * @return {?function}\n   */\n  function getIteratorFn(maybeIterable) {\n    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);\n    if (typeof iteratorFn === 'function') {\n      return iteratorFn;\n    }\n  }\n\n  /**\n   * Collection of methods that allow declaration and validation of props that are\n   * supplied to React components. Example usage:\n   *\n   *   var Props = require('ReactPropTypes');\n   *   var MyArticle = React.createClass({\n   *     propTypes: {\n   *       // An optional string prop named \"description\".\n   *       description: Props.string,\n   *\n   *       // A required enum prop named \"category\".\n   *       category: Props.oneOf(['News','Photos']).isRequired,\n   *\n   *       // A prop named \"dialog\" that requires an instance of Dialog.\n   *       dialog: Props.instanceOf(Dialog).isRequired\n   *     },\n   *     render: function() { ... }\n   *   });\n   *\n   * A more formal specification of how these methods are used:\n   *\n   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)\n   *   decl := ReactPropTypes.{type}(.isRequired)?\n   *\n   * Each and every declaration produces a function with the same signature. This\n   * allows the creation of custom validation functions. For example:\n   *\n   *  var MyLink = React.createClass({\n   *    propTypes: {\n   *      // An optional string or URI prop named \"href\".\n   *      href: function(props, propName, componentName) {\n   *        var propValue = props[propName];\n   *        if (propValue != null && typeof propValue !== 'string' &&\n   *            !(propValue instanceof URI)) {\n   *          return new Error(\n   *            'Expected a string or an URI for ' + propName + ' in ' +\n   *            componentName\n   *          );\n   *        }\n   *      }\n   *    },\n   *    render: function() {...}\n   *  });\n   *\n   * @internal\n   */\n\n  var ANONYMOUS = '<<anonymous>>';\n\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.\n  var ReactPropTypes = {\n    array: createPrimitiveTypeChecker('array'),\n    bool: createPrimitiveTypeChecker('boolean'),\n    func: createPrimitiveTypeChecker('function'),\n    number: createPrimitiveTypeChecker('number'),\n    object: createPrimitiveTypeChecker('object'),\n    string: createPrimitiveTypeChecker('string'),\n    symbol: createPrimitiveTypeChecker('symbol'),\n\n    any: createAnyTypeChecker(),\n    arrayOf: createArrayOfTypeChecker,\n    element: createElementTypeChecker(),\n    instanceOf: createInstanceTypeChecker,\n    node: createNodeChecker(),\n    objectOf: createObjectOfTypeChecker,\n    oneOf: createEnumTypeChecker,\n    oneOfType: createUnionTypeChecker,\n    shape: createShapeTypeChecker,\n    exact: createStrictShapeTypeChecker,\n  };\n\n  /**\n   * inlined Object.is polyfill to avoid requiring consumers ship their own\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n   */\n  /*eslint-disable no-self-compare*/\n  function is(x, y) {\n    // SameValue algorithm\n    if (x === y) {\n      // Steps 1-5, 7-10\n      // Steps 6.b-6.e: +0 != -0\n      return x !== 0 || 1 / x === 1 / y;\n    } else {\n      // Step 6.a: NaN == NaN\n      return x !== x && y !== y;\n    }\n  }\n  /*eslint-enable no-self-compare*/\n\n  /**\n   * We use an Error-like object for backward compatibility as people may call\n   * PropTypes directly and inspect their output. However, we don't use real\n   * Errors anymore. We don't inspect their stack anyway, and creating them\n   * is prohibitively expensive if they are created too often, such as what\n   * happens in oneOfType() for any type before the one that matched.\n   */\n  function PropTypeError(message) {\n    this.message = message;\n    this.stack = '';\n  }\n  // Make `instanceof Error` still work for returned errors.\n  PropTypeError.prototype = Error.prototype;\n\n  function createChainableTypeChecker(validate) {\n    if (\"development\" !== 'production') {\n      var manualPropTypeCallCache = {};\n      var manualPropTypeWarningCount = 0;\n    }\n    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {\n      componentName = componentName || ANONYMOUS;\n      propFullName = propFullName || propName;\n\n      if (secret !== ReactPropTypesSecret) {\n        if (throwOnDirectAccess) {\n          // New behavior only for users of `prop-types` package\n          var err = new Error(\n            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n            'Use `PropTypes.checkPropTypes()` to call them. ' +\n            'Read more at http://fb.me/use-check-prop-types'\n          );\n          err.name = 'Invariant Violation';\n          throw err;\n        } else if (\"development\" !== 'production' && typeof console !== 'undefined') {\n          // Old behavior for people using React.PropTypes\n          var cacheKey = componentName + ':' + propName;\n          if (\n            !manualPropTypeCallCache[cacheKey] &&\n            // Avoid spamming the console because they are often not actionable except for lib authors\n            manualPropTypeWarningCount < 3\n          ) {\n            printWarning(\n              'You are manually calling a React.PropTypes validation ' +\n              'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +\n              'and will throw in the standalone `prop-types` package. ' +\n              'You may be seeing this warning due to a third-party PropTypes ' +\n              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'\n            );\n            manualPropTypeCallCache[cacheKey] = true;\n            manualPropTypeWarningCount++;\n          }\n        }\n      }\n      if (props[propName] == null) {\n        if (isRequired) {\n          if (props[propName] === null) {\n            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));\n          }\n          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));\n        }\n        return null;\n      } else {\n        return validate(props, propName, componentName, location, propFullName);\n      }\n    }\n\n    var chainedCheckType = checkType.bind(null, false);\n    chainedCheckType.isRequired = checkType.bind(null, true);\n\n    return chainedCheckType;\n  }\n\n  function createPrimitiveTypeChecker(expectedType) {\n    function validate(props, propName, componentName, location, propFullName, secret) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== expectedType) {\n        // `propValue` being instance of, say, date/regexp, pass the 'object'\n        // check, but we can offer a more precise error message here rather than\n        // 'of type `object`'.\n        var preciseType = getPreciseType(propValue);\n\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createAnyTypeChecker() {\n    return createChainableTypeChecker(emptyFunctionThatReturnsNull);\n  }\n\n  function createArrayOfTypeChecker(typeChecker) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (typeof typeChecker !== 'function') {\n        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');\n      }\n      var propValue = props[propName];\n      if (!Array.isArray(propValue)) {\n        var propType = getPropType(propValue);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));\n      }\n      for (var i = 0; i < propValue.length; i++) {\n        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);\n        if (error instanceof Error) {\n          return error;\n        }\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createElementTypeChecker() {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      if (!isValidElement(propValue)) {\n        var propType = getPropType(propValue);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createInstanceTypeChecker(expectedClass) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (!(props[propName] instanceof expectedClass)) {\n        var expectedClassName = expectedClass.name || ANONYMOUS;\n        var actualClassName = getClassName(props[propName]);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createEnumTypeChecker(expectedValues) {\n    if (!Array.isArray(expectedValues)) {\n      \"development\" !== 'production' ? printWarning('Invalid argument supplied to oneOf, expected an instance of array.') : void 0;\n      return emptyFunctionThatReturnsNull;\n    }\n\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      for (var i = 0; i < expectedValues.length; i++) {\n        if (is(propValue, expectedValues[i])) {\n          return null;\n        }\n      }\n\n      var valuesString = JSON.stringify(expectedValues);\n      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createObjectOfTypeChecker(typeChecker) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (typeof typeChecker !== 'function') {\n        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');\n      }\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));\n      }\n      for (var key in propValue) {\n        if (propValue.hasOwnProperty(key)) {\n          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n          if (error instanceof Error) {\n            return error;\n          }\n        }\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createUnionTypeChecker(arrayOfTypeCheckers) {\n    if (!Array.isArray(arrayOfTypeCheckers)) {\n      \"development\" !== 'production' ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;\n      return emptyFunctionThatReturnsNull;\n    }\n\n    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n      var checker = arrayOfTypeCheckers[i];\n      if (typeof checker !== 'function') {\n        printWarning(\n          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +\n          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'\n        );\n        return emptyFunctionThatReturnsNull;\n      }\n    }\n\n    function validate(props, propName, componentName, location, propFullName) {\n      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n        var checker = arrayOfTypeCheckers[i];\n        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {\n          return null;\n        }\n      }\n\n      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createNodeChecker() {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (!isNode(props[propName])) {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createShapeTypeChecker(shapeTypes) {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n      }\n      for (var key in shapeTypes) {\n        var checker = shapeTypes[key];\n        if (!checker) {\n          continue;\n        }\n        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n        if (error) {\n          return error;\n        }\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createStrictShapeTypeChecker(shapeTypes) {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n      }\n      // We need to check all keys in case some are required but missing from\n      // props.\n      var allKeys = assign({}, props[propName], shapeTypes);\n      for (var key in allKeys) {\n        var checker = shapeTypes[key];\n        if (!checker) {\n          return new PropTypeError(\n            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +\n            '\\nBad object: ' + JSON.stringify(props[propName], null, '  ') +\n            '\\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')\n          );\n        }\n        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n        if (error) {\n          return error;\n        }\n      }\n      return null;\n    }\n\n    return createChainableTypeChecker(validate);\n  }\n\n  function isNode(propValue) {\n    switch (typeof propValue) {\n      case 'number':\n      case 'string':\n      case 'undefined':\n        return true;\n      case 'boolean':\n        return !propValue;\n      case 'object':\n        if (Array.isArray(propValue)) {\n          return propValue.every(isNode);\n        }\n        if (propValue === null || isValidElement(propValue)) {\n          return true;\n        }\n\n        var iteratorFn = getIteratorFn(propValue);\n        if (iteratorFn) {\n          var iterator = iteratorFn.call(propValue);\n          var step;\n          if (iteratorFn !== propValue.entries) {\n            while (!(step = iterator.next()).done) {\n              if (!isNode(step.value)) {\n                return false;\n              }\n            }\n          } else {\n            // Iterator will provide entry [k,v] tuples rather than values.\n            while (!(step = iterator.next()).done) {\n              var entry = step.value;\n              if (entry) {\n                if (!isNode(entry[1])) {\n                  return false;\n                }\n              }\n            }\n          }\n        } else {\n          return false;\n        }\n\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  function isSymbol(propType, propValue) {\n    // Native Symbol.\n    if (propType === 'symbol') {\n      return true;\n    }\n\n    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'\n    if (propValue['@@toStringTag'] === 'Symbol') {\n      return true;\n    }\n\n    // Fallback for non-spec compliant Symbols which are polyfilled.\n    if (typeof Symbol === 'function' && propValue instanceof Symbol) {\n      return true;\n    }\n\n    return false;\n  }\n\n  // Equivalent of `typeof` but with special handling for array and regexp.\n  function getPropType(propValue) {\n    var propType = typeof propValue;\n    if (Array.isArray(propValue)) {\n      return 'array';\n    }\n    if (propValue instanceof RegExp) {\n      // Old webkits (at least until Android 4.0) return 'function' rather than\n      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/\n      // passes PropTypes.object.\n      return 'object';\n    }\n    if (isSymbol(propType, propValue)) {\n      return 'symbol';\n    }\n    return propType;\n  }\n\n  // This handles more types than `getPropType`. Only used for error messages.\n  // See `createPrimitiveTypeChecker`.\n  function getPreciseType(propValue) {\n    if (typeof propValue === 'undefined' || propValue === null) {\n      return '' + propValue;\n    }\n    var propType = getPropType(propValue);\n    if (propType === 'object') {\n      if (propValue instanceof Date) {\n        return 'date';\n      } else if (propValue instanceof RegExp) {\n        return 'regexp';\n      }\n    }\n    return propType;\n  }\n\n  // Returns a string that is postfixed to a warning about an invalid type.\n  // For example, \"undefined\" or \"of type array\"\n  function getPostfixForTypeWarning(value) {\n    var type = getPreciseType(value);\n    switch (type) {\n      case 'array':\n      case 'object':\n        return 'an ' + type;\n      case 'boolean':\n      case 'date':\n      case 'regexp':\n        return 'a ' + type;\n      default:\n        return type;\n    }\n  }\n\n  // Returns class name of the object, if any.\n  function getClassName(propValue) {\n    if (!propValue.constructor || !propValue.constructor.name) {\n      return ANONYMOUS;\n    }\n    return propValue.constructor.name;\n  }\n\n  ReactPropTypes.checkPropTypes = checkPropTypes;\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (\"development\" !== 'production') {\n  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&\n    Symbol.for &&\n    Symbol.for('react.element')) ||\n    0xeac7;\n\n  var isValidElement = function(object) {\n    return typeof object === 'object' &&\n      object !== null &&\n      object.$$typeof === REACT_ELEMENT_TYPE;\n  };\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(isValidElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","/** @license React v17.0.1\n * react-dom-server.browser.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nif (\"development\" !== \"production\") {\n  (function() {\n'use strict';\n\nvar React = require('react');\nvar _assign = require('object-assign');\n\n// Do not require this module directly! Use normal `invariant` calls with\n// template literal strings. The messages will be replaced with error codes\n// during build.\nfunction formatProdErrorMessage(code) {\n  var url = 'https://reactjs.org/docs/error-decoder.html?invariant=' + code;\n\n  for (var i = 1; i < arguments.length; i++) {\n    url += '&args[]=' + encodeURIComponent(arguments[i]);\n  }\n\n  return \"Minified React error #\" + code + \"; visit \" + url + \" for the full message or \" + 'use the non-minified dev environment for full errors and additional ' + 'helpful warnings.';\n}\n\n// TODO: this is special because it gets imported during build.\nvar ReactVersion = '17.0.1';\n\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\n// by calls to these methods by a Babel plugin.\n//\n// In PROD (or in packages without access to React internals),\n// they are left as they are instead.\n\nfunction warn(format) {\n  {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    printWarning('warn', format, args);\n  }\n}\nfunction error(format) {\n  {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    printWarning('error', format, args);\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    }\n\n    var argsWithFormat = args.map(function (item) {\n      return '' + item;\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n// nor polyfill, then a plain number is used for performance.\nvar REACT_ELEMENT_TYPE = 0xeac7;\nvar REACT_PORTAL_TYPE = 0xeaca;\nvar REACT_FRAGMENT_TYPE = 0xeacb;\nvar REACT_STRICT_MODE_TYPE = 0xeacc;\nvar REACT_PROFILER_TYPE = 0xead2;\nvar REACT_PROVIDER_TYPE = 0xeacd;\nvar REACT_CONTEXT_TYPE = 0xeace;\nvar REACT_FORWARD_REF_TYPE = 0xead0;\nvar REACT_SUSPENSE_TYPE = 0xead1;\nvar REACT_SUSPENSE_LIST_TYPE = 0xead8;\nvar REACT_MEMO_TYPE = 0xead3;\nvar REACT_LAZY_TYPE = 0xead4;\nvar REACT_BLOCK_TYPE = 0xead9;\nvar REACT_SERVER_BLOCK_TYPE = 0xeada;\nvar REACT_FUNDAMENTAL_TYPE = 0xead5;\nvar REACT_SCOPE_TYPE = 0xead7;\nvar REACT_OPAQUE_ID_TYPE = 0xeae0;\nvar REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;\nvar REACT_OFFSCREEN_TYPE = 0xeae2;\nvar REACT_LEGACY_HIDDEN_TYPE = 0xeae3;\n\nif (typeof Symbol === 'function' && Symbol.for) {\n  var symbolFor = Symbol.for;\n  REACT_ELEMENT_TYPE = symbolFor('react.element');\n  REACT_PORTAL_TYPE = symbolFor('react.portal');\n  REACT_FRAGMENT_TYPE = symbolFor('react.fragment');\n  REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');\n  REACT_PROFILER_TYPE = symbolFor('react.profiler');\n  REACT_PROVIDER_TYPE = symbolFor('react.provider');\n  REACT_CONTEXT_TYPE = symbolFor('react.context');\n  REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');\n  REACT_SUSPENSE_TYPE = symbolFor('react.suspense');\n  REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');\n  REACT_MEMO_TYPE = symbolFor('react.memo');\n  REACT_LAZY_TYPE = symbolFor('react.lazy');\n  REACT_BLOCK_TYPE = symbolFor('react.block');\n  REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');\n  REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');\n  REACT_SCOPE_TYPE = symbolFor('react.scope');\n  REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');\n  REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');\n  REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');\n  REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');\n}\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var functionName = innerType.displayName || innerType.name || '';\n  return outerType.displayName || (functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName);\n}\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n}\n\nfunction getComponentName(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  {\n    if (typeof type.tag === 'number') {\n      error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');\n    }\n  }\n\n  if (typeof type === 'function') {\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n        return getContextName(context) + '.Consumer';\n\n      case REACT_PROVIDER_TYPE:\n        var provider = type;\n        return getContextName(provider._context) + '.Provider';\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        return getComponentName(type.type);\n\n      case REACT_BLOCK_TYPE:\n        return getComponentName(type._render);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentName(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n    }\n  }\n\n  return null;\n}\n\n// Filter certain DOM attributes (e.g. src, href) if their values are empty strings.\n\nvar enableSuspenseServerRenderer = false;\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: _assign({}, props, {\n          value: prevLog\n        }),\n        info: _assign({}, props, {\n          value: prevInfo\n        }),\n        warn: _assign({}, props, {\n          value: prevWarn\n        }),\n        error: _assign({}, props, {\n          value: prevError\n        }),\n        group: _assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: _assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: _assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, source, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if (!fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  var control;\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n\n  try {\n    // This should throw.\n    if (construct) {\n      // Something should be setting the props in the constructor.\n      var Fake = function () {\n        throw Error();\n      }; // $FlowFixMe\n\n\n      Object.defineProperty(Fake.prototype, 'props', {\n        set: function () {\n          // We use a throwing setter instead of frozen or non-writable props\n          // because that won't throw in a non-strict mode function.\n          throw Error();\n        }\n      });\n\n      if (typeof Reflect === 'object' && Reflect.construct) {\n        // We construct a different control for this case to include any extra\n        // frames added by the construct call.\n        try {\n          Reflect.construct(Fake, []);\n        } catch (x) {\n          control = x;\n        }\n\n        Reflect.construct(fn, [], Fake);\n      } else {\n        try {\n          Fake.call();\n        } catch (x) {\n          control = x;\n        }\n\n        fn.call(Fake.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (x) {\n        control = x;\n      }\n\n      fn();\n    }\n  } catch (sample) {\n    // This is inlined manually because closure doesn't do it for us.\n    if (sample && control && typeof sample.stack === 'string') {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sample.stack.split('\\n');\n      var controlLines = control.stack.split('\\n');\n      var s = sampleLines.length - 1;\n      var c = controlLines.length - 1;\n\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n        // We expect at least one stack frame to be shared.\n        // Typically this will be the root most one. However, stack frames may be\n        // cut off due to maximum stack limits. In this case, one maybe cut off\n        // earlier than the other. We assume that the sample is longer or the same\n        // and there for cut off earlier. So we should find the root most frame in\n        // the sample somewhere in the control.\n        c--;\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at ');\n\n                {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\nfunction describeFunctionComponentFrame(fn, source, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction shouldConstruct(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n\n  if (type == null) {\n    return '';\n  }\n\n  if (typeof type === 'function') {\n    {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    }\n  }\n\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type);\n  }\n\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList');\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render);\n\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n\n      case REACT_BLOCK_TYPE:\n        return describeFunctionComponentFrame(type._render);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\nvar loggedTypeFailures = {};\nvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nfunction checkPropTypes(typeSpecs, values, location, componentName, element) {\n  {\n    // $FlowFixMe This is okay but Flow doesn't know it.\n    var has = Function.call.bind(Object.prototype.hasOwnProperty);\n\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n\n          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\n        } catch (ex) {\n          error$1 = ex;\n        }\n\n        if (error$1 && !(error$1 instanceof Error)) {\n          setCurrentlyValidatingElement(element);\n\n          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\n\n          setCurrentlyValidatingElement(null);\n        }\n\n        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error$1.message] = true;\n          setCurrentlyValidatingElement(element);\n\n          error('Failed %s type: %s', location, error$1.message);\n\n          setCurrentlyValidatingElement(null);\n        }\n      }\n    }\n  }\n}\n\nvar didWarnAboutInvalidateContextType;\n\n{\n  didWarnAboutInvalidateContextType = new Set();\n}\n\nvar emptyObject = {};\n\n{\n  Object.freeze(emptyObject);\n}\n\nfunction maskContext(type, context) {\n  var contextTypes = type.contextTypes;\n\n  if (!contextTypes) {\n    return emptyObject;\n  }\n\n  var maskedContext = {};\n\n  for (var contextName in contextTypes) {\n    maskedContext[contextName] = context[contextName];\n  }\n\n  return maskedContext;\n}\n\nfunction checkContextTypes(typeSpecs, values, location) {\n  {\n    checkPropTypes(typeSpecs, values, location, 'Component');\n  }\n}\n\nfunction validateContextBounds(context, threadID) {\n  // If we don't have enough slots in this context to store this threadID,\n  // fill it in without leaving any holes to ensure that the VM optimizes\n  // this as non-holey index properties.\n  // (Note: If `react` package is < 16.6, _threadCount is undefined.)\n  for (var i = context._threadCount | 0; i <= threadID; i++) {\n    // We assume that this is the same as the defaultValue which might not be\n    // true if we're rendering inside a secondary renderer but they are\n    // secondary because these use cases are very rare.\n    context[i] = context._currentValue2;\n    context._threadCount = i + 1;\n  }\n}\nfunction processContext(type, context, threadID, isClass) {\n  if (isClass) {\n    var contextType = type.contextType;\n\n    {\n      if ('contextType' in type) {\n        var isValid = // Allow null for conditional declaration\n        contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>\n\n        if (!isValid && !didWarnAboutInvalidateContextType.has(type)) {\n          didWarnAboutInvalidateContextType.add(type);\n          var addendum = '';\n\n          if (contextType === undefined) {\n            addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';\n          } else if (typeof contextType !== 'object') {\n            addendum = ' However, it is set to a ' + typeof contextType + '.';\n          } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {\n            addendum = ' Did you accidentally pass the Context.Provider instead?';\n          } else if (contextType._context !== undefined) {\n            // <Context.Consumer>\n            addendum = ' Did you accidentally pass the Context.Consumer instead?';\n          } else {\n            addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';\n          }\n\n          error('%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentName(type) || 'Component', addendum);\n        }\n      }\n    }\n\n    if (typeof contextType === 'object' && contextType !== null) {\n      validateContextBounds(contextType, threadID);\n      return contextType[threadID];\n    }\n\n    {\n      var maskedContext = maskContext(type, context);\n\n      {\n        if (type.contextTypes) {\n          checkContextTypes(type.contextTypes, maskedContext, 'context');\n        }\n      }\n\n      return maskedContext;\n    }\n  } else {\n    {\n      var _maskedContext = maskContext(type, context);\n\n      {\n        if (type.contextTypes) {\n          checkContextTypes(type.contextTypes, _maskedContext, 'context');\n        }\n      }\n\n      return _maskedContext;\n    }\n  }\n}\n\nvar nextAvailableThreadIDs = new Uint16Array(16);\n\nfor (var i = 0; i < 15; i++) {\n  nextAvailableThreadIDs[i] = i + 1;\n}\n\nnextAvailableThreadIDs[15] = 0;\n\nfunction growThreadCountAndReturnNextAvailable() {\n  var oldArray = nextAvailableThreadIDs;\n  var oldSize = oldArray.length;\n  var newSize = oldSize * 2;\n\n  if (!(newSize <= 0x10000)) {\n    {\n      throw Error( \"Maximum number of concurrent React renderers exceeded. This can happen if you are not properly destroying the Readable provided by React. Ensure that you call .destroy() on it if you no longer want to read from it, and did not read to the end. If you use .pipe() this should be automatic.\" );\n    }\n  }\n\n  var newArray = new Uint16Array(newSize);\n  newArray.set(oldArray);\n  nextAvailableThreadIDs = newArray;\n  nextAvailableThreadIDs[0] = oldSize + 1;\n\n  for (var _i = oldSize; _i < newSize - 1; _i++) {\n    nextAvailableThreadIDs[_i] = _i + 1;\n  }\n\n  nextAvailableThreadIDs[newSize - 1] = 0;\n  return oldSize;\n}\n\nfunction allocThreadID() {\n  var nextID = nextAvailableThreadIDs[0];\n\n  if (nextID === 0) {\n    return growThreadCountAndReturnNextAvailable();\n  }\n\n  nextAvailableThreadIDs[0] = nextAvailableThreadIDs[nextID];\n  return nextID;\n}\nfunction freeThreadID(id) {\n  nextAvailableThreadIDs[id] = nextAvailableThreadIDs[0];\n  nextAvailableThreadIDs[0] = id;\n}\n\n// A reserved attribute.\n// It is handled by React separately and shouldn't be written to the DOM.\nvar RESERVED = 0; // A simple string attribute.\n// Attributes that aren't in the filter are presumed to have this type.\n\nvar STRING = 1; // A string attribute that accepts booleans in React. In HTML, these are called\n// \"enumerated\" attributes with \"true\" and \"false\" as possible values.\n// When true, it should be set to a \"true\" string.\n// When false, it should be set to a \"false\" string.\n\nvar BOOLEANISH_STRING = 2; // A real boolean attribute.\n// When true, it should be present (set either to an empty string or its name).\n// When false, it should be omitted.\n\nvar BOOLEAN = 3; // An attribute that can be used as a flag as well as with a value.\n// When true, it should be present (set either to an empty string or its name).\n// When false, it should be omitted.\n// For any other value, should be present with that value.\n\nvar OVERLOADED_BOOLEAN = 4; // An attribute that must be numeric or parse as a numeric.\n// When falsy, it should be removed.\n\nvar NUMERIC = 5; // An attribute that must be positive numeric or parse as a positive numeric.\n// When falsy, it should be removed.\n\nvar POSITIVE_NUMERIC = 6;\n\n/* eslint-disable max-len */\nvar ATTRIBUTE_NAME_START_CHAR = \":A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD\";\n/* eslint-enable max-len */\n\nvar ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + \"\\\\-.0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040\";\nvar ROOT_ATTRIBUTE_NAME = 'data-reactroot';\nvar VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar illegalAttributeNameCache = {};\nvar validatedAttributeNameCache = {};\nfunction isAttributeNameSafe(attributeName) {\n  if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {\n    return true;\n  }\n\n  if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {\n    return false;\n  }\n\n  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {\n    validatedAttributeNameCache[attributeName] = true;\n    return true;\n  }\n\n  illegalAttributeNameCache[attributeName] = true;\n\n  {\n    error('Invalid attribute name: `%s`', attributeName);\n  }\n\n  return false;\n}\nfunction shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {\n  if (propertyInfo !== null) {\n    return propertyInfo.type === RESERVED;\n  }\n\n  if (isCustomComponentTag) {\n    return false;\n  }\n\n  if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {\n    return true;\n  }\n\n  return false;\n}\nfunction shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {\n  if (propertyInfo !== null && propertyInfo.type === RESERVED) {\n    return false;\n  }\n\n  switch (typeof value) {\n    case 'function': // $FlowIssue symbol is perfectly valid here\n\n    case 'symbol':\n      // eslint-disable-line\n      return true;\n\n    case 'boolean':\n      {\n        if (isCustomComponentTag) {\n          return false;\n        }\n\n        if (propertyInfo !== null) {\n          return !propertyInfo.acceptsBooleans;\n        } else {\n          var prefix = name.toLowerCase().slice(0, 5);\n          return prefix !== 'data-' && prefix !== 'aria-';\n        }\n      }\n\n    default:\n      return false;\n  }\n}\nfunction shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {\n  if (value === null || typeof value === 'undefined') {\n    return true;\n  }\n\n  if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {\n    return true;\n  }\n\n  if (isCustomComponentTag) {\n    return false;\n  }\n\n  if (propertyInfo !== null) {\n\n    switch (propertyInfo.type) {\n      case BOOLEAN:\n        return !value;\n\n      case OVERLOADED_BOOLEAN:\n        return value === false;\n\n      case NUMERIC:\n        return isNaN(value);\n\n      case POSITIVE_NUMERIC:\n        return isNaN(value) || value < 1;\n    }\n  }\n\n  return false;\n}\nfunction getPropertyInfo(name) {\n  return properties.hasOwnProperty(name) ? properties[name] : null;\n}\n\nfunction PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL, removeEmptyString) {\n  this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;\n  this.attributeName = attributeName;\n  this.attributeNamespace = attributeNamespace;\n  this.mustUseProperty = mustUseProperty;\n  this.propertyName = name;\n  this.type = type;\n  this.sanitizeURL = sanitizeURL;\n  this.removeEmptyString = removeEmptyString;\n} // When adding attributes to this list, be sure to also add them to\n// the `possibleStandardNames` module to ensure casing and incorrect\n// name warnings.\n\n\nvar properties = {}; // These props are reserved by React. They shouldn't be written to the DOM.\n\nvar reservedProps = ['children', 'dangerouslySetInnerHTML', // TODO: This prevents the assignment of defaultValue to regular\n// elements (not just inputs). Now that ReactDOMInput assigns to the\n// defaultValue property -- do we need this?\n'defaultValue', 'defaultChecked', 'innerHTML', 'suppressContentEditableWarning', 'suppressHydrationWarning', 'style'];\nreservedProps.forEach(function (name) {\n  properties[name] = new PropertyInfoRecord(name, RESERVED, false, // mustUseProperty\n  name, // attributeName\n  null, // attributeNamespace\n  false, // sanitizeURL\n  false);\n}); // A few React string attributes have a different name.\n// This is a mapping from React prop names to the attribute names.\n\n[['acceptCharset', 'accept-charset'], ['className', 'class'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv']].forEach(function (_ref) {\n  var name = _ref[0],\n      attributeName = _ref[1];\n  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty\n  attributeName, // attributeName\n  null, // attributeNamespace\n  false, // sanitizeURL\n  false);\n}); // These are \"enumerated\" HTML attributes that accept \"true\" and \"false\".\n// In React, we let users pass `true` and `false` even though technically\n// these aren't boolean attributes (they are coerced to strings).\n\n['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(function (name) {\n  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty\n  name.toLowerCase(), // attributeName\n  null, // attributeNamespace\n  false, // sanitizeURL\n  false);\n}); // These are \"enumerated\" SVG attributes that accept \"true\" and \"false\".\n// In React, we let users pass `true` and `false` even though technically\n// these aren't boolean attributes (they are coerced to strings).\n// Since these are SVG attributes, their attribute names are case-sensitive.\n\n['autoReverse', 'externalResourcesRequired', 'focusable', 'preserveAlpha'].forEach(function (name) {\n  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty\n  name, // attributeName\n  null, // attributeNamespace\n  false, // sanitizeURL\n  false);\n}); // These are HTML boolean attributes.\n\n['allowFullScreen', 'async', // Note: there is a special case that prevents it from being written to the DOM\n// on the client side because the browsers are inconsistent. Instead we call focus().\n'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'disablePictureInPicture', 'disableRemotePlayback', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless', // Microdata\n'itemScope'].forEach(function (name) {\n  properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, // mustUseProperty\n  name.toLowerCase(), // attributeName\n  null, // attributeNamespace\n  false, // sanitizeURL\n  false);\n}); // These are the few React props that we set as DOM properties\n// rather than attributes. These are all booleans.\n\n['checked', // Note: `option.selected` is not updated if `select.multiple` is\n// disabled with `removeAttribute`. We have special logic for handling this.\n'multiple', 'muted', 'selected' // NOTE: if you add a camelCased prop to this list,\n// you'll need to set attributeName to name.toLowerCase()\n// instead in the assignment below.\n].forEach(function (name) {\n  properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, // mustUseProperty\n  name, // attributeName\n  null, // attributeNamespace\n  false, // sanitizeURL\n  false);\n}); // These are HTML attributes that are \"overloaded booleans\": they behave like\n// booleans, but can also accept a string value.\n\n['capture', 'download' // NOTE: if you add a camelCased prop to this list,\n// you'll need to set attributeName to name.toLowerCase()\n// instead in the assignment below.\n].forEach(function (name) {\n  properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, // mustUseProperty\n  name, // attributeName\n  null, // attributeNamespace\n  false, // sanitizeURL\n  false);\n}); // These are HTML attributes that must be positive numbers.\n\n['cols', 'rows', 'size', 'span' // NOTE: if you add a camelCased prop to this list,\n// you'll need to set attributeName to name.toLowerCase()\n// instead in the assignment below.\n].forEach(function (name) {\n  properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, // mustUseProperty\n  name, // attributeName\n  null, // attributeNamespace\n  false, // sanitizeURL\n  false);\n}); // These are HTML attributes that must be numbers.\n\n['rowSpan', 'start'].forEach(function (name) {\n  properties[name] = new PropertyInfoRecord(name, NUMERIC, false, // mustUseProperty\n  name.toLowerCase(), // attributeName\n  null, // attributeNamespace\n  false, // sanitizeURL\n  false);\n});\nvar CAMELIZE = /[\\-\\:]([a-z])/g;\n\nvar capitalize = function (token) {\n  return token[1].toUpperCase();\n}; // This is a list of all SVG attributes that need special casing, namespacing,\n// or boolean value assignment. Regular attributes that just accept strings\n// and have the same names are omitted, just like in the HTML attribute filter.\n// Some of these attributes can be hard to find. This list was created by\n// scraping the MDN documentation.\n\n\n['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'xmlns:xlink', 'x-height' // NOTE: if you add a camelCased prop to this list,\n// you'll need to set attributeName to name.toLowerCase()\n// instead in the assignment below.\n].forEach(function (attributeName) {\n  var name = attributeName.replace(CAMELIZE, capitalize);\n  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty\n  attributeName, null, // attributeNamespace\n  false, // sanitizeURL\n  false);\n}); // String SVG attributes with the xlink namespace.\n\n['xlink:actuate', 'xlink:arcrole', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type' // NOTE: if you add a camelCased prop to this list,\n// you'll need to set attributeName to name.toLowerCase()\n// instead in the assignment below.\n].forEach(function (attributeName) {\n  var name = attributeName.replace(CAMELIZE, capitalize);\n  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty\n  attributeName, 'http://www.w3.org/1999/xlink', false, // sanitizeURL\n  false);\n}); // String SVG attributes with the xml namespace.\n\n['xml:base', 'xml:lang', 'xml:space' // NOTE: if you add a camelCased prop to this list,\n// you'll need to set attributeName to name.toLowerCase()\n// instead in the assignment below.\n].forEach(function (attributeName) {\n  var name = attributeName.replace(CAMELIZE, capitalize);\n  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty\n  attributeName, 'http://www.w3.org/XML/1998/namespace', false, // sanitizeURL\n  false);\n}); // These attribute exists both in HTML and SVG.\n// The attribute name is case-sensitive in SVG so we can't just use\n// the React name like we do for attributes that exist only in HTML.\n\n['tabIndex', 'crossOrigin'].forEach(function (attributeName) {\n  properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty\n  attributeName.toLowerCase(), // attributeName\n  null, // attributeNamespace\n  false, // sanitizeURL\n  false);\n}); // These attributes accept URLs. These must not allow javascript: URLS.\n// These will also need to accept Trusted Types object in the future.\n\nvar xlinkHref = 'xlinkHref';\nproperties[xlinkHref] = new PropertyInfoRecord('xlinkHref', STRING, false, // mustUseProperty\n'xlink:href', 'http://www.w3.org/1999/xlink', true, // sanitizeURL\nfalse);\n['src', 'href', 'action', 'formAction'].forEach(function (attributeName) {\n  properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty\n  attributeName.toLowerCase(), // attributeName\n  null, // attributeNamespace\n  true, // sanitizeURL\n  true);\n});\n\n// and any newline or tab are filtered out as if they're not part of the URL.\n// https://url.spec.whatwg.org/#url-parsing\n// Tab or newline are defined as \\r\\n\\t:\n// https://infra.spec.whatwg.org/#ascii-tab-or-newline\n// A C0 control is a code point in the range \\u0000 NULL to \\u001F\n// INFORMATION SEPARATOR ONE, inclusive:\n// https://infra.spec.whatwg.org/#c0-control-or-space\n\n/* eslint-disable max-len */\n\nvar isJavaScriptProtocol = /^[\\u0000-\\u001F ]*j[\\r\\n\\t]*a[\\r\\n\\t]*v[\\r\\n\\t]*a[\\r\\n\\t]*s[\\r\\n\\t]*c[\\r\\n\\t]*r[\\r\\n\\t]*i[\\r\\n\\t]*p[\\r\\n\\t]*t[\\r\\n\\t]*\\:/i;\nvar didWarn = false;\n\nfunction sanitizeURL(url) {\n  {\n    if (!didWarn && isJavaScriptProtocol.test(url)) {\n      didWarn = true;\n\n      error('A future version of React will block javascript: URLs as a security precaution. ' + 'Use event handlers instead if you can. If you need to generate unsafe HTML try ' + 'using dangerouslySetInnerHTML instead. React was passed %s.', JSON.stringify(url));\n    }\n  }\n}\n\n// code copied and modified from escape-html\n\n/**\n * Module variables.\n * @private\n */\nvar matchHtmlRegExp = /[\"'&<>]/;\n/**\n * Escapes special characters and HTML entities in a given html string.\n *\n * @param  {string} string HTML string to escape for later insertion\n * @return {string}\n * @public\n */\n\nfunction escapeHtml(string) {\n  var str = '' + string;\n  var match = matchHtmlRegExp.exec(str);\n\n  if (!match) {\n    return str;\n  }\n\n  var escape;\n  var html = '';\n  var index;\n  var lastIndex = 0;\n\n  for (index = match.index; index < str.length; index++) {\n    switch (str.charCodeAt(index)) {\n      case 34:\n        // \"\n        escape = '&quot;';\n        break;\n\n      case 38:\n        // &\n        escape = '&amp;';\n        break;\n\n      case 39:\n        // '\n        escape = '&#x27;'; // modified from escape-html; used to be '&#39'\n\n        break;\n\n      case 60:\n        // <\n        escape = '&lt;';\n        break;\n\n      case 62:\n        // >\n        escape = '&gt;';\n        break;\n\n      default:\n        continue;\n    }\n\n    if (lastIndex !== index) {\n      html += str.substring(lastIndex, index);\n    }\n\n    lastIndex = index + 1;\n    html += escape;\n  }\n\n  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;\n} // end code copied and modified from escape-html\n\n/**\n * Escapes text to prevent scripting attacks.\n *\n * @param {*} text Text value to escape.\n * @return {string} An escaped string.\n */\n\n\nfunction escapeTextForBrowser(text) {\n  if (typeof text === 'boolean' || typeof text === 'number') {\n    // this shortcircuit helps perf for types that we know will never have\n    // special characters, especially given that this function is used often\n    // for numeric dom ids.\n    return '' + text;\n  }\n\n  return escapeHtml(text);\n}\n\n/**\n * Escapes attribute value to prevent scripting attacks.\n *\n * @param {*} value Value to escape.\n * @return {string} An escaped string.\n */\n\nfunction quoteAttributeValueForBrowser(value) {\n  return '\"' + escapeTextForBrowser(value) + '\"';\n}\n\nfunction createMarkupForRoot() {\n  return ROOT_ATTRIBUTE_NAME + '=\"\"';\n}\n/**\n * Creates markup for a property.\n *\n * @param {string} name\n * @param {*} value\n * @return {?string} Markup string, or null if the property was invalid.\n */\n\nfunction createMarkupForProperty(name, value) {\n  var propertyInfo = getPropertyInfo(name);\n\n  if (name !== 'style' && shouldIgnoreAttribute(name, propertyInfo, false)) {\n    return '';\n  }\n\n  if (shouldRemoveAttribute(name, value, propertyInfo, false)) {\n    return '';\n  }\n\n  if (propertyInfo !== null) {\n    var attributeName = propertyInfo.attributeName;\n    var type = propertyInfo.type;\n\n    if (type === BOOLEAN || type === OVERLOADED_BOOLEAN && value === true) {\n      return attributeName + '=\"\"';\n    } else {\n      if (propertyInfo.sanitizeURL) {\n        value = '' + value;\n        sanitizeURL(value);\n      }\n\n      return attributeName + '=' + quoteAttributeValueForBrowser(value);\n    }\n  } else if (isAttributeNameSafe(name)) {\n    return name + '=' + quoteAttributeValueForBrowser(value);\n  }\n\n  return '';\n}\n/**\n * Creates markup for a custom property.\n *\n * @param {string} name\n * @param {*} value\n * @return {string} Markup string, or empty string if the property was invalid.\n */\n\nfunction createMarkupForCustomAttribute(name, value) {\n  if (!isAttributeNameSafe(name) || value == null) {\n    return '';\n  }\n\n  return name + '=' + quoteAttributeValueForBrowser(value);\n}\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction is(x, y) {\n  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare\n  ;\n}\n\nvar objectIs = typeof Object.is === 'function' ? Object.is : is;\n\nvar currentlyRenderingComponent = null;\nvar firstWorkInProgressHook = null;\nvar workInProgressHook = null; // Whether the work-in-progress hook is a re-rendered hook\n\nvar isReRender = false; // Whether an update was scheduled during the currently executing render pass.\n\nvar didScheduleRenderPhaseUpdate = false; // Lazily created map of render-phase updates\n\nvar renderPhaseUpdates = null; // Counter to prevent infinite loops.\n\nvar numberOfReRenders = 0;\nvar RE_RENDER_LIMIT = 25;\nvar isInHookUserCodeInDev = false; // In DEV, this is the name of the currently executing primitive hook\n\nvar currentHookNameInDev;\n\nfunction resolveCurrentlyRenderingComponent() {\n  if (!(currentlyRenderingComponent !== null)) {\n    {\n      throw Error( \"Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\\n1. You might have mismatching versions of React and the renderer (such as React DOM)\\n2. You might be breaking the Rules of Hooks\\n3. You might have more than one copy of React in the same app\\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.\" );\n    }\n  }\n\n  {\n    if (isInHookUserCodeInDev) {\n      error('Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://reactjs.org/link/rules-of-hooks');\n    }\n  }\n\n  return currentlyRenderingComponent;\n}\n\nfunction areHookInputsEqual(nextDeps, prevDeps) {\n  if (prevDeps === null) {\n    {\n      error('%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);\n    }\n\n    return false;\n  }\n\n  {\n    // Don't bother comparing lengths in prod because these arrays should be\n    // passed inline.\n    if (nextDeps.length !== prevDeps.length) {\n      error('The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\\n\\n' + 'Previous: %s\\n' + 'Incoming: %s', currentHookNameInDev, \"[\" + nextDeps.join(', ') + \"]\", \"[\" + prevDeps.join(', ') + \"]\");\n    }\n  }\n\n  for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {\n    if (objectIs(nextDeps[i], prevDeps[i])) {\n      continue;\n    }\n\n    return false;\n  }\n\n  return true;\n}\n\nfunction createHook() {\n  if (numberOfReRenders > 0) {\n    {\n      {\n        throw Error( \"Rendered more hooks than during the previous render\" );\n      }\n    }\n  }\n\n  return {\n    memoizedState: null,\n    queue: null,\n    next: null\n  };\n}\n\nfunction createWorkInProgressHook() {\n  if (workInProgressHook === null) {\n    // This is the first hook in the list\n    if (firstWorkInProgressHook === null) {\n      isReRender = false;\n      firstWorkInProgressHook = workInProgressHook = createHook();\n    } else {\n      // There's already a work-in-progress. Reuse it.\n      isReRender = true;\n      workInProgressHook = firstWorkInProgressHook;\n    }\n  } else {\n    if (workInProgressHook.next === null) {\n      isReRender = false; // Append to the end of the list\n\n      workInProgressHook = workInProgressHook.next = createHook();\n    } else {\n      // There's already a work-in-progress. Reuse it.\n      isReRender = true;\n      workInProgressHook = workInProgressHook.next;\n    }\n  }\n\n  return workInProgressHook;\n}\n\nfunction prepareToUseHooks(componentIdentity) {\n  currentlyRenderingComponent = componentIdentity;\n\n  {\n    isInHookUserCodeInDev = false;\n  } // The following should have already been reset\n  // didScheduleRenderPhaseUpdate = false;\n  // firstWorkInProgressHook = null;\n  // numberOfReRenders = 0;\n  // renderPhaseUpdates = null;\n  // workInProgressHook = null;\n\n}\nfunction finishHooks(Component, props, children, refOrContext) {\n  // This must be called after every function component to prevent hooks from\n  // being used in classes.\n  while (didScheduleRenderPhaseUpdate) {\n    // Updates were scheduled during the render phase. They are stored in\n    // the `renderPhaseUpdates` map. Call the component again, reusing the\n    // work-in-progress hooks and applying the additional updates on top. Keep\n    // restarting until no more updates are scheduled.\n    didScheduleRenderPhaseUpdate = false;\n    numberOfReRenders += 1; // Start over from the beginning of the list\n\n    workInProgressHook = null;\n    children = Component(props, refOrContext);\n  }\n\n  resetHooksState();\n  return children;\n} // Reset the internal hooks state if an error occurs while rendering a component\n\nfunction resetHooksState() {\n  {\n    isInHookUserCodeInDev = false;\n  }\n\n  currentlyRenderingComponent = null;\n  didScheduleRenderPhaseUpdate = false;\n  firstWorkInProgressHook = null;\n  numberOfReRenders = 0;\n  renderPhaseUpdates = null;\n  workInProgressHook = null;\n}\n\nfunction readContext(context, observedBits) {\n  var threadID = currentPartialRenderer.threadID;\n  validateContextBounds(context, threadID);\n\n  {\n    if (isInHookUserCodeInDev) {\n      error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');\n    }\n  }\n\n  return context[threadID];\n}\n\nfunction useContext(context, observedBits) {\n  {\n    currentHookNameInDev = 'useContext';\n  }\n\n  resolveCurrentlyRenderingComponent();\n  var threadID = currentPartialRenderer.threadID;\n  validateContextBounds(context, threadID);\n  return context[threadID];\n}\n\nfunction basicStateReducer(state, action) {\n  // $FlowFixMe: Flow doesn't like mixed types\n  return typeof action === 'function' ? action(state) : action;\n}\n\nfunction useState(initialState) {\n  {\n    currentHookNameInDev = 'useState';\n  }\n\n  return useReducer(basicStateReducer, // useReducer has a special case to support lazy useState initializers\n  initialState);\n}\nfunction useReducer(reducer, initialArg, init) {\n  {\n    if (reducer !== basicStateReducer) {\n      currentHookNameInDev = 'useReducer';\n    }\n  }\n\n  currentlyRenderingComponent = resolveCurrentlyRenderingComponent();\n  workInProgressHook = createWorkInProgressHook();\n\n  if (isReRender) {\n    // This is a re-render. Apply the new render phase updates to the previous\n    // current hook.\n    var queue = workInProgressHook.queue;\n    var dispatch = queue.dispatch;\n\n    if (renderPhaseUpdates !== null) {\n      // Render phase updates are stored in a map of queue -> linked list\n      var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);\n\n      if (firstRenderPhaseUpdate !== undefined) {\n        renderPhaseUpdates.delete(queue);\n        var newState = workInProgressHook.memoizedState;\n        var update = firstRenderPhaseUpdate;\n\n        do {\n          // Process this render phase update. We don't have to check the\n          // priority because it will always be the same as the current\n          // render's.\n          var action = update.action;\n\n          {\n            isInHookUserCodeInDev = true;\n          }\n\n          newState = reducer(newState, action);\n\n          {\n            isInHookUserCodeInDev = false;\n          }\n\n          update = update.next;\n        } while (update !== null);\n\n        workInProgressHook.memoizedState = newState;\n        return [newState, dispatch];\n      }\n    }\n\n    return [workInProgressHook.memoizedState, dispatch];\n  } else {\n    {\n      isInHookUserCodeInDev = true;\n    }\n\n    var initialState;\n\n    if (reducer === basicStateReducer) {\n      // Special case for `useState`.\n      initialState = typeof initialArg === 'function' ? initialArg() : initialArg;\n    } else {\n      initialState = init !== undefined ? init(initialArg) : initialArg;\n    }\n\n    {\n      isInHookUserCodeInDev = false;\n    }\n\n    workInProgressHook.memoizedState = initialState;\n\n    var _queue = workInProgressHook.queue = {\n      last: null,\n      dispatch: null\n    };\n\n    var _dispatch = _queue.dispatch = dispatchAction.bind(null, currentlyRenderingComponent, _queue);\n\n    return [workInProgressHook.memoizedState, _dispatch];\n  }\n}\n\nfunction useMemo(nextCreate, deps) {\n  currentlyRenderingComponent = resolveCurrentlyRenderingComponent();\n  workInProgressHook = createWorkInProgressHook();\n  var nextDeps = deps === undefined ? null : deps;\n\n  if (workInProgressHook !== null) {\n    var prevState = workInProgressHook.memoizedState;\n\n    if (prevState !== null) {\n      if (nextDeps !== null) {\n        var prevDeps = prevState[1];\n\n        if (areHookInputsEqual(nextDeps, prevDeps)) {\n          return prevState[0];\n        }\n      }\n    }\n  }\n\n  {\n    isInHookUserCodeInDev = true;\n  }\n\n  var nextValue = nextCreate();\n\n  {\n    isInHookUserCodeInDev = false;\n  }\n\n  workInProgressHook.memoizedState = [nextValue, nextDeps];\n  return nextValue;\n}\n\nfunction useRef(initialValue) {\n  currentlyRenderingComponent = resolveCurrentlyRenderingComponent();\n  workInProgressHook = createWorkInProgressHook();\n  var previousRef = workInProgressHook.memoizedState;\n\n  if (previousRef === null) {\n    var ref = {\n      current: initialValue\n    };\n\n    {\n      Object.seal(ref);\n    }\n\n    workInProgressHook.memoizedState = ref;\n    return ref;\n  } else {\n    return previousRef;\n  }\n}\n\nfunction useLayoutEffect(create, inputs) {\n  {\n    currentHookNameInDev = 'useLayoutEffect';\n\n    error('useLayoutEffect does nothing on the server, because its effect cannot ' + \"be encoded into the server renderer's output format. This will lead \" + 'to a mismatch between the initial, non-hydrated UI and the intended ' + 'UI. To avoid this, useLayoutEffect should only be used in ' + 'components that render exclusively on the client. ' + 'See https://reactjs.org/link/uselayouteffect-ssr for common fixes.');\n  }\n}\n\nfunction dispatchAction(componentIdentity, queue, action) {\n  if (!(numberOfReRenders < RE_RENDER_LIMIT)) {\n    {\n      throw Error( \"Too many re-renders. React limits the number of renders to prevent an infinite loop.\" );\n    }\n  }\n\n  if (componentIdentity === currentlyRenderingComponent) {\n    // This is a render phase update. Stash it in a lazily-created map of\n    // queue -> linked list of updates. After this render pass, we'll restart\n    // and apply the stashed updates on top of the work-in-progress hook.\n    didScheduleRenderPhaseUpdate = true;\n    var update = {\n      action: action,\n      next: null\n    };\n\n    if (renderPhaseUpdates === null) {\n      renderPhaseUpdates = new Map();\n    }\n\n    var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);\n\n    if (firstRenderPhaseUpdate === undefined) {\n      renderPhaseUpdates.set(queue, update);\n    } else {\n      // Append the update to the end of the list.\n      var lastRenderPhaseUpdate = firstRenderPhaseUpdate;\n\n      while (lastRenderPhaseUpdate.next !== null) {\n        lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;\n      }\n\n      lastRenderPhaseUpdate.next = update;\n    }\n  }\n}\n\nfunction useCallback(callback, deps) {\n  return useMemo(function () {\n    return callback;\n  }, deps);\n} // TODO Decide on how to implement this hook for server rendering.\n// If a mutation occurs during render, consider triggering a Suspense boundary\n// and falling back to client rendering.\n\nfunction useMutableSource(source, getSnapshot, subscribe) {\n  resolveCurrentlyRenderingComponent();\n  return getSnapshot(source._source);\n}\n\nfunction useDeferredValue(value) {\n  resolveCurrentlyRenderingComponent();\n  return value;\n}\n\nfunction useTransition() {\n  resolveCurrentlyRenderingComponent();\n\n  var startTransition = function (callback) {\n    callback();\n  };\n\n  return [startTransition, false];\n}\n\nfunction useOpaqueIdentifier() {\n  return (currentPartialRenderer.identifierPrefix || '') + 'R:' + (currentPartialRenderer.uniqueID++).toString(36);\n}\n\nfunction noop() {}\n\nvar currentPartialRenderer = null;\nfunction setCurrentPartialRenderer(renderer) {\n  currentPartialRenderer = renderer;\n}\nvar Dispatcher = {\n  readContext: readContext,\n  useContext: useContext,\n  useMemo: useMemo,\n  useReducer: useReducer,\n  useRef: useRef,\n  useState: useState,\n  useLayoutEffect: useLayoutEffect,\n  useCallback: useCallback,\n  // useImperativeHandle is not run in the server environment\n  useImperativeHandle: noop,\n  // Effects are not run in the server environment.\n  useEffect: noop,\n  // Debugging effect\n  useDebugValue: noop,\n  useDeferredValue: useDeferredValue,\n  useTransition: useTransition,\n  useOpaqueIdentifier: useOpaqueIdentifier,\n  // Subscriptions are not setup in a server environment.\n  useMutableSource: useMutableSource\n};\n\nvar HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';\nvar MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';\nvar SVG_NAMESPACE = 'http://www.w3.org/2000/svg';\nvar Namespaces = {\n  html: HTML_NAMESPACE,\n  mathml: MATH_NAMESPACE,\n  svg: SVG_NAMESPACE\n}; // Assumes there is no parent namespace.\n\nfunction getIntrinsicNamespace(type) {\n  switch (type) {\n    case 'svg':\n      return SVG_NAMESPACE;\n\n    case 'math':\n      return MATH_NAMESPACE;\n\n    default:\n      return HTML_NAMESPACE;\n  }\n}\nfunction getChildNamespace(parentNamespace, type) {\n  if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {\n    // No (or default) parent namespace: potential entry point.\n    return getIntrinsicNamespace(type);\n  }\n\n  if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {\n    // We're leaving SVG.\n    return HTML_NAMESPACE;\n  } // By default, pass namespace below.\n\n\n  return parentNamespace;\n}\n\nvar hasReadOnlyValue = {\n  button: true,\n  checkbox: true,\n  image: true,\n  hidden: true,\n  radio: true,\n  reset: true,\n  submit: true\n};\nfunction checkControlledValueProps(tagName, props) {\n  {\n    if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {\n      error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');\n    }\n\n    if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {\n      error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');\n    }\n  }\n}\n\n// For HTML, certain tags should omit their close tag. We keep a list for\n// those special-case tags.\nvar omittedCloseTags = {\n  area: true,\n  base: true,\n  br: true,\n  col: true,\n  embed: true,\n  hr: true,\n  img: true,\n  input: true,\n  keygen: true,\n  link: true,\n  meta: true,\n  param: true,\n  source: true,\n  track: true,\n  wbr: true // NOTE: menuitem's close tag should be omitted, but that causes problems.\n\n};\n\n// `omittedCloseTags` except that `menuitem` should still have its closing tag.\n\nvar voidElementTags = _assign({\n  menuitem: true\n}, omittedCloseTags);\n\nvar HTML = '__html';\n\nfunction assertValidProps(tag, props) {\n  if (!props) {\n    return;\n  } // Note the use of `==` which checks for null or undefined.\n\n\n  if (voidElementTags[tag]) {\n    if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {\n      {\n        throw Error( tag + \" is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.\" );\n      }\n    }\n  }\n\n  if (props.dangerouslySetInnerHTML != null) {\n    if (!(props.children == null)) {\n      {\n        throw Error( \"Can only set one of `children` or `props.dangerouslySetInnerHTML`.\" );\n      }\n    }\n\n    if (!(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML)) {\n      {\n        throw Error( \"`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.\" );\n      }\n    }\n  }\n\n  {\n    if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {\n      error('A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.');\n    }\n  }\n\n  if (!(props.style == null || typeof props.style === 'object')) {\n    {\n      throw Error( \"The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.\" );\n    }\n  }\n}\n\n/**\n * CSS properties which accept numbers but are not in units of \"px\".\n */\nvar isUnitlessNumber = {\n  animationIterationCount: true,\n  borderImageOutset: true,\n  borderImageSlice: true,\n  borderImageWidth: true,\n  boxFlex: true,\n  boxFlexGroup: true,\n  boxOrdinalGroup: true,\n  columnCount: true,\n  columns: true,\n  flex: true,\n  flexGrow: true,\n  flexPositive: true,\n  flexShrink: true,\n  flexNegative: true,\n  flexOrder: true,\n  gridArea: true,\n  gridRow: true,\n  gridRowEnd: true,\n  gridRowSpan: true,\n  gridRowStart: true,\n  gridColumn: true,\n  gridColumnEnd: true,\n  gridColumnSpan: true,\n  gridColumnStart: true,\n  fontWeight: true,\n  lineClamp: true,\n  lineHeight: true,\n  opacity: true,\n  order: true,\n  orphans: true,\n  tabSize: true,\n  widows: true,\n  zIndex: true,\n  zoom: true,\n  // SVG-related properties\n  fillOpacity: true,\n  floodOpacity: true,\n  stopOpacity: true,\n  strokeDasharray: true,\n  strokeDashoffset: true,\n  strokeMiterlimit: true,\n  strokeOpacity: true,\n  strokeWidth: true\n};\n/**\n * @param {string} prefix vendor-specific prefix, eg: Webkit\n * @param {string} key style name, eg: transitionDuration\n * @return {string} style name prefixed with `prefix`, properly camelCased, eg:\n * WebkitTransitionDuration\n */\n\nfunction prefixKey(prefix, key) {\n  return prefix + key.charAt(0).toUpperCase() + key.substring(1);\n}\n/**\n * Support style names that may come passed in prefixed by adding permutations\n * of vendor prefixes.\n */\n\n\nvar prefixes = ['Webkit', 'ms', 'Moz', 'O']; // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an\n// infinite loop, because it iterates over the newly added props too.\n\nObject.keys(isUnitlessNumber).forEach(function (prop) {\n  prefixes.forEach(function (prefix) {\n    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];\n  });\n});\n\n/**\n * Convert a value into the proper css writable value. The style name `name`\n * should be logical (no hyphens), as specified\n * in `CSSProperty.isUnitlessNumber`.\n *\n * @param {string} name CSS property name such as `topMargin`.\n * @param {*} value CSS property value such as `10px`.\n * @return {string} Normalized style value with dimensions applied.\n */\n\nfunction dangerousStyleValue(name, value, isCustomProperty) {\n  // Note that we've removed escapeTextForBrowser() calls here since the\n  // whole string will be escaped when the attribute is injected into\n  // the markup. If you provide unsafe user data here they can inject\n  // arbitrary CSS which may be problematic (I couldn't repro this):\n  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet\n  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/\n  // This is not an XSS hole but instead a potential CSS injection issue\n  // which has lead to a greater discussion about how we're going to\n  // trust URLs moving forward. See #2115901\n  var isEmpty = value == null || typeof value === 'boolean' || value === '';\n\n  if (isEmpty) {\n    return '';\n  }\n\n  if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {\n    return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers\n  }\n\n  return ('' + value).trim();\n}\n\nvar uppercasePattern = /([A-Z])/g;\nvar msPattern = /^ms-/;\n/**\n * Hyphenates a camelcased CSS property name, for example:\n *\n *   > hyphenateStyleName('backgroundColor')\n *   < \"background-color\"\n *   > hyphenateStyleName('MozTransition')\n *   < \"-moz-transition\"\n *   > hyphenateStyleName('msTransition')\n *   < \"-ms-transition\"\n *\n * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix\n * is converted to `-ms-`.\n */\n\nfunction hyphenateStyleName(name) {\n  return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');\n}\n\nfunction isCustomComponent(tagName, props) {\n  if (tagName.indexOf('-') === -1) {\n    return typeof props.is === 'string';\n  }\n\n  switch (tagName) {\n    // These are reserved SVG and MathML elements.\n    // We don't mind this list too much because we expect it to never grow.\n    // The alternative is to track the namespace in a few places which is convoluted.\n    // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts\n    case 'annotation-xml':\n    case 'color-profile':\n    case 'font-face':\n    case 'font-face-src':\n    case 'font-face-uri':\n    case 'font-face-format':\n    case 'font-face-name':\n    case 'missing-glyph':\n      return false;\n\n    default:\n      return true;\n  }\n}\n\nvar warnValidStyle = function () {};\n\n{\n  // 'msTransform' is correct, but the other prefixes should be capitalized\n  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;\n  var msPattern$1 = /^-ms-/;\n  var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon\n\n  var badStyleValueWithSemicolonPattern = /;\\s*$/;\n  var warnedStyleNames = {};\n  var warnedStyleValues = {};\n  var warnedForNaNValue = false;\n  var warnedForInfinityValue = false;\n\n  var camelize = function (string) {\n    return string.replace(hyphenPattern, function (_, character) {\n      return character.toUpperCase();\n    });\n  };\n\n  var warnHyphenatedStyleName = function (name) {\n    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {\n      return;\n    }\n\n    warnedStyleNames[name] = true;\n\n    error('Unsupported style property %s. Did you mean %s?', name, // As Andi Smith suggests\n    // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix\n    // is converted to lowercase `ms`.\n    camelize(name.replace(msPattern$1, 'ms-')));\n  };\n\n  var warnBadVendoredStyleName = function (name) {\n    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {\n      return;\n    }\n\n    warnedStyleNames[name] = true;\n\n    error('Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));\n  };\n\n  var warnStyleValueWithSemicolon = function (name, value) {\n    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {\n      return;\n    }\n\n    warnedStyleValues[value] = true;\n\n    error(\"Style property values shouldn't contain a semicolon. \" + 'Try \"%s: %s\" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ''));\n  };\n\n  var warnStyleValueIsNaN = function (name, value) {\n    if (warnedForNaNValue) {\n      return;\n    }\n\n    warnedForNaNValue = true;\n\n    error('`NaN` is an invalid value for the `%s` css style property.', name);\n  };\n\n  var warnStyleValueIsInfinity = function (name, value) {\n    if (warnedForInfinityValue) {\n      return;\n    }\n\n    warnedForInfinityValue = true;\n\n    error('`Infinity` is an invalid value for the `%s` css style property.', name);\n  };\n\n  warnValidStyle = function (name, value) {\n    if (name.indexOf('-') > -1) {\n      warnHyphenatedStyleName(name);\n    } else if (badVendoredStyleNamePattern.test(name)) {\n      warnBadVendoredStyleName(name);\n    } else if (badStyleValueWithSemicolonPattern.test(value)) {\n      warnStyleValueWithSemicolon(name, value);\n    }\n\n    if (typeof value === 'number') {\n      if (isNaN(value)) {\n        warnStyleValueIsNaN(name, value);\n      } else if (!isFinite(value)) {\n        warnStyleValueIsInfinity(name, value);\n      }\n    }\n  };\n}\n\nvar warnValidStyle$1 = warnValidStyle;\n\nvar ariaProperties = {\n  'aria-current': 0,\n  // state\n  'aria-details': 0,\n  'aria-disabled': 0,\n  // state\n  'aria-hidden': 0,\n  // state\n  'aria-invalid': 0,\n  // state\n  'aria-keyshortcuts': 0,\n  'aria-label': 0,\n  'aria-roledescription': 0,\n  // Widget Attributes\n  'aria-autocomplete': 0,\n  'aria-checked': 0,\n  'aria-expanded': 0,\n  'aria-haspopup': 0,\n  'aria-level': 0,\n  'aria-modal': 0,\n  'aria-multiline': 0,\n  'aria-multiselectable': 0,\n  'aria-orientation': 0,\n  'aria-placeholder': 0,\n  'aria-pressed': 0,\n  'aria-readonly': 0,\n  'aria-required': 0,\n  'aria-selected': 0,\n  'aria-sort': 0,\n  'aria-valuemax': 0,\n  'aria-valuemin': 0,\n  'aria-valuenow': 0,\n  'aria-valuetext': 0,\n  // Live Region Attributes\n  'aria-atomic': 0,\n  'aria-busy': 0,\n  'aria-live': 0,\n  'aria-relevant': 0,\n  // Drag-and-Drop Attributes\n  'aria-dropeffect': 0,\n  'aria-grabbed': 0,\n  // Relationship Attributes\n  'aria-activedescendant': 0,\n  'aria-colcount': 0,\n  'aria-colindex': 0,\n  'aria-colspan': 0,\n  'aria-controls': 0,\n  'aria-describedby': 0,\n  'aria-errormessage': 0,\n  'aria-flowto': 0,\n  'aria-labelledby': 0,\n  'aria-owns': 0,\n  'aria-posinset': 0,\n  'aria-rowcount': 0,\n  'aria-rowindex': 0,\n  'aria-rowspan': 0,\n  'aria-setsize': 0\n};\n\nvar warnedProperties = {};\nvar rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');\nvar rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');\nvar hasOwnProperty$1 = Object.prototype.hasOwnProperty;\n\nfunction validateProperty(tagName, name) {\n  {\n    if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) {\n      return true;\n    }\n\n    if (rARIACamel.test(name)) {\n      var ariaName = 'aria-' + name.slice(4).toLowerCase();\n      var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM\n      // DOM properties, then it is an invalid aria-* attribute.\n\n      if (correctName == null) {\n        error('Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);\n\n        warnedProperties[name] = true;\n        return true;\n      } // aria-* attributes should be lowercase; suggest the lowercase version.\n\n\n      if (name !== correctName) {\n        error('Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);\n\n        warnedProperties[name] = true;\n        return true;\n      }\n    }\n\n    if (rARIA.test(name)) {\n      var lowerCasedName = name.toLowerCase();\n      var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM\n      // DOM properties, then it is an invalid aria-* attribute.\n\n      if (standardName == null) {\n        warnedProperties[name] = true;\n        return false;\n      } // aria-* attributes should be lowercase; suggest the lowercase version.\n\n\n      if (name !== standardName) {\n        error('Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);\n\n        warnedProperties[name] = true;\n        return true;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction warnInvalidARIAProps(type, props) {\n  {\n    var invalidProps = [];\n\n    for (var key in props) {\n      var isValid = validateProperty(type, key);\n\n      if (!isValid) {\n        invalidProps.push(key);\n      }\n    }\n\n    var unknownPropString = invalidProps.map(function (prop) {\n      return '`' + prop + '`';\n    }).join(', ');\n\n    if (invalidProps.length === 1) {\n      error('Invalid aria prop %s on <%s> tag. ' + 'For details, see https://reactjs.org/link/invalid-aria-props', unknownPropString, type);\n    } else if (invalidProps.length > 1) {\n      error('Invalid aria props %s on <%s> tag. ' + 'For details, see https://reactjs.org/link/invalid-aria-props', unknownPropString, type);\n    }\n  }\n}\n\nfunction validateProperties(type, props) {\n  if (isCustomComponent(type, props)) {\n    return;\n  }\n\n  warnInvalidARIAProps(type, props);\n}\n\nvar didWarnValueNull = false;\nfunction validateProperties$1(type, props) {\n  {\n    if (type !== 'input' && type !== 'textarea' && type !== 'select') {\n      return;\n    }\n\n    if (props != null && props.value === null && !didWarnValueNull) {\n      didWarnValueNull = true;\n\n      if (type === 'select' && props.multiple) {\n        error('`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.', type);\n      } else {\n        error('`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.', type);\n      }\n    }\n  }\n}\n\n// When adding attributes to the HTML or SVG allowed attribute list, be sure to\n// also add them to this module to ensure casing and incorrect name\n// warnings.\nvar possibleStandardNames = {\n  // HTML\n  accept: 'accept',\n  acceptcharset: 'acceptCharset',\n  'accept-charset': 'acceptCharset',\n  accesskey: 'accessKey',\n  action: 'action',\n  allowfullscreen: 'allowFullScreen',\n  alt: 'alt',\n  as: 'as',\n  async: 'async',\n  autocapitalize: 'autoCapitalize',\n  autocomplete: 'autoComplete',\n  autocorrect: 'autoCorrect',\n  autofocus: 'autoFocus',\n  autoplay: 'autoPlay',\n  autosave: 'autoSave',\n  capture: 'capture',\n  cellpadding: 'cellPadding',\n  cellspacing: 'cellSpacing',\n  challenge: 'challenge',\n  charset: 'charSet',\n  checked: 'checked',\n  children: 'children',\n  cite: 'cite',\n  class: 'className',\n  classid: 'classID',\n  classname: 'className',\n  cols: 'cols',\n  colspan: 'colSpan',\n  content: 'content',\n  contenteditable: 'contentEditable',\n  contextmenu: 'contextMenu',\n  controls: 'controls',\n  controlslist: 'controlsList',\n  coords: 'coords',\n  crossorigin: 'crossOrigin',\n  dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',\n  data: 'data',\n  datetime: 'dateTime',\n  default: 'default',\n  defaultchecked: 'defaultChecked',\n  defaultvalue: 'defaultValue',\n  defer: 'defer',\n  dir: 'dir',\n  disabled: 'disabled',\n  disablepictureinpicture: 'disablePictureInPicture',\n  disableremoteplayback: 'disableRemotePlayback',\n  download: 'download',\n  draggable: 'draggable',\n  enctype: 'encType',\n  enterkeyhint: 'enterKeyHint',\n  for: 'htmlFor',\n  form: 'form',\n  formmethod: 'formMethod',\n  formaction: 'formAction',\n  formenctype: 'formEncType',\n  formnovalidate: 'formNoValidate',\n  formtarget: 'formTarget',\n  frameborder: 'frameBorder',\n  headers: 'headers',\n  height: 'height',\n  hidden: 'hidden',\n  high: 'high',\n  href: 'href',\n  hreflang: 'hrefLang',\n  htmlfor: 'htmlFor',\n  httpequiv: 'httpEquiv',\n  'http-equiv': 'httpEquiv',\n  icon: 'icon',\n  id: 'id',\n  innerhtml: 'innerHTML',\n  inputmode: 'inputMode',\n  integrity: 'integrity',\n  is: 'is',\n  itemid: 'itemID',\n  itemprop: 'itemProp',\n  itemref: 'itemRef',\n  itemscope: 'itemScope',\n  itemtype: 'itemType',\n  keyparams: 'keyParams',\n  keytype: 'keyType',\n  kind: 'kind',\n  label: 'label',\n  lang: 'lang',\n  list: 'list',\n  loop: 'loop',\n  low: 'low',\n  manifest: 'manifest',\n  marginwidth: 'marginWidth',\n  marginheight: 'marginHeight',\n  max: 'max',\n  maxlength: 'maxLength',\n  media: 'media',\n  mediagroup: 'mediaGroup',\n  method: 'method',\n  min: 'min',\n  minlength: 'minLength',\n  multiple: 'multiple',\n  muted: 'muted',\n  name: 'name',\n  nomodule: 'noModule',\n  nonce: 'nonce',\n  novalidate: 'noValidate',\n  open: 'open',\n  optimum: 'optimum',\n  pattern: 'pattern',\n  placeholder: 'placeholder',\n  playsinline: 'playsInline',\n  poster: 'poster',\n  preload: 'preload',\n  profile: 'profile',\n  radiogroup: 'radioGroup',\n  readonly: 'readOnly',\n  referrerpolicy: 'referrerPolicy',\n  rel: 'rel',\n  required: 'required',\n  reversed: 'reversed',\n  role: 'role',\n  rows: 'rows',\n  rowspan: 'rowSpan',\n  sandbox: 'sandbox',\n  scope: 'scope',\n  scoped: 'scoped',\n  scrolling: 'scrolling',\n  seamless: 'seamless',\n  selected: 'selected',\n  shape: 'shape',\n  size: 'size',\n  sizes: 'sizes',\n  span: 'span',\n  spellcheck: 'spellCheck',\n  src: 'src',\n  srcdoc: 'srcDoc',\n  srclang: 'srcLang',\n  srcset: 'srcSet',\n  start: 'start',\n  step: 'step',\n  style: 'style',\n  summary: 'summary',\n  tabindex: 'tabIndex',\n  target: 'target',\n  title: 'title',\n  type: 'type',\n  usemap: 'useMap',\n  value: 'value',\n  width: 'width',\n  wmode: 'wmode',\n  wrap: 'wrap',\n  // SVG\n  about: 'about',\n  accentheight: 'accentHeight',\n  'accent-height': 'accentHeight',\n  accumulate: 'accumulate',\n  additive: 'additive',\n  alignmentbaseline: 'alignmentBaseline',\n  'alignment-baseline': 'alignmentBaseline',\n  allowreorder: 'allowReorder',\n  alphabetic: 'alphabetic',\n  amplitude: 'amplitude',\n  arabicform: 'arabicForm',\n  'arabic-form': 'arabicForm',\n  ascent: 'ascent',\n  attributename: 'attributeName',\n  attributetype: 'attributeType',\n  autoreverse: 'autoReverse',\n  azimuth: 'azimuth',\n  basefrequency: 'baseFrequency',\n  baselineshift: 'baselineShift',\n  'baseline-shift': 'baselineShift',\n  baseprofile: 'baseProfile',\n  bbox: 'bbox',\n  begin: 'begin',\n  bias: 'bias',\n  by: 'by',\n  calcmode: 'calcMode',\n  capheight: 'capHeight',\n  'cap-height': 'capHeight',\n  clip: 'clip',\n  clippath: 'clipPath',\n  'clip-path': 'clipPath',\n  clippathunits: 'clipPathUnits',\n  cliprule: 'clipRule',\n  'clip-rule': 'clipRule',\n  color: 'color',\n  colorinterpolation: 'colorInterpolation',\n  'color-interpolation': 'colorInterpolation',\n  colorinterpolationfilters: 'colorInterpolationFilters',\n  'color-interpolation-filters': 'colorInterpolationFilters',\n  colorprofile: 'colorProfile',\n  'color-profile': 'colorProfile',\n  colorrendering: 'colorRendering',\n  'color-rendering': 'colorRendering',\n  contentscripttype: 'contentScriptType',\n  contentstyletype: 'contentStyleType',\n  cursor: 'cursor',\n  cx: 'cx',\n  cy: 'cy',\n  d: 'd',\n  datatype: 'datatype',\n  decelerate: 'decelerate',\n  descent: 'descent',\n  diffuseconstant: 'diffuseConstant',\n  direction: 'direction',\n  display: 'display',\n  divisor: 'divisor',\n  dominantbaseline: 'dominantBaseline',\n  'dominant-baseline': 'dominantBaseline',\n  dur: 'dur',\n  dx: 'dx',\n  dy: 'dy',\n  edgemode: 'edgeMode',\n  elevation: 'elevation',\n  enablebackground: 'enableBackground',\n  'enable-background': 'enableBackground',\n  end: 'end',\n  exponent: 'exponent',\n  externalresourcesrequired: 'externalResourcesRequired',\n  fill: 'fill',\n  fillopacity: 'fillOpacity',\n  'fill-opacity': 'fillOpacity',\n  fillrule: 'fillRule',\n  'fill-rule': 'fillRule',\n  filter: 'filter',\n  filterres: 'filterRes',\n  filterunits: 'filterUnits',\n  floodopacity: 'floodOpacity',\n  'flood-opacity': 'floodOpacity',\n  floodcolor: 'floodColor',\n  'flood-color': 'floodColor',\n  focusable: 'focusable',\n  fontfamily: 'fontFamily',\n  'font-family': 'fontFamily',\n  fontsize: 'fontSize',\n  'font-size': 'fontSize',\n  fontsizeadjust: 'fontSizeAdjust',\n  'font-size-adjust': 'fontSizeAdjust',\n  fontstretch: 'fontStretch',\n  'font-stretch': 'fontStretch',\n  fontstyle: 'fontStyle',\n  'font-style': 'fontStyle',\n  fontvariant: 'fontVariant',\n  'font-variant': 'fontVariant',\n  fontweight: 'fontWeight',\n  'font-weight': 'fontWeight',\n  format: 'format',\n  from: 'from',\n  fx: 'fx',\n  fy: 'fy',\n  g1: 'g1',\n  g2: 'g2',\n  glyphname: 'glyphName',\n  'glyph-name': 'glyphName',\n  glyphorientationhorizontal: 'glyphOrientationHorizontal',\n  'glyph-orientation-horizontal': 'glyphOrientationHorizontal',\n  glyphorientationvertical: 'glyphOrientationVertical',\n  'glyph-orientation-vertical': 'glyphOrientationVertical',\n  glyphref: 'glyphRef',\n  gradienttransform: 'gradientTransform',\n  gradientunits: 'gradientUnits',\n  hanging: 'hanging',\n  horizadvx: 'horizAdvX',\n  'horiz-adv-x': 'horizAdvX',\n  horizoriginx: 'horizOriginX',\n  'horiz-origin-x': 'horizOriginX',\n  ideographic: 'ideographic',\n  imagerendering: 'imageRendering',\n  'image-rendering': 'imageRendering',\n  in2: 'in2',\n  in: 'in',\n  inlist: 'inlist',\n  intercept: 'intercept',\n  k1: 'k1',\n  k2: 'k2',\n  k3: 'k3',\n  k4: 'k4',\n  k: 'k',\n  kernelmatrix: 'kernelMatrix',\n  kernelunitlength: 'kernelUnitLength',\n  kerning: 'kerning',\n  keypoints: 'keyPoints',\n  keysplines: 'keySplines',\n  keytimes: 'keyTimes',\n  lengthadjust: 'lengthAdjust',\n  letterspacing: 'letterSpacing',\n  'letter-spacing': 'letterSpacing',\n  lightingcolor: 'lightingColor',\n  'lighting-color': 'lightingColor',\n  limitingconeangle: 'limitingConeAngle',\n  local: 'local',\n  markerend: 'markerEnd',\n  'marker-end': 'markerEnd',\n  markerheight: 'markerHeight',\n  markermid: 'markerMid',\n  'marker-mid': 'markerMid',\n  markerstart: 'markerStart',\n  'marker-start': 'markerStart',\n  markerunits: 'markerUnits',\n  markerwidth: 'markerWidth',\n  mask: 'mask',\n  maskcontentunits: 'maskContentUnits',\n  maskunits: 'maskUnits',\n  mathematical: 'mathematical',\n  mode: 'mode',\n  numoctaves: 'numOctaves',\n  offset: 'offset',\n  opacity: 'opacity',\n  operator: 'operator',\n  order: 'order',\n  orient: 'orient',\n  orientation: 'orientation',\n  origin: 'origin',\n  overflow: 'overflow',\n  overlineposition: 'overlinePosition',\n  'overline-position': 'overlinePosition',\n  overlinethickness: 'overlineThickness',\n  'overline-thickness': 'overlineThickness',\n  paintorder: 'paintOrder',\n  'paint-order': 'paintOrder',\n  panose1: 'panose1',\n  'panose-1': 'panose1',\n  pathlength: 'pathLength',\n  patterncontentunits: 'patternContentUnits',\n  patterntransform: 'patternTransform',\n  patternunits: 'patternUnits',\n  pointerevents: 'pointerEvents',\n  'pointer-events': 'pointerEvents',\n  points: 'points',\n  pointsatx: 'pointsAtX',\n  pointsaty: 'pointsAtY',\n  pointsatz: 'pointsAtZ',\n  prefix: 'prefix',\n  preservealpha: 'preserveAlpha',\n  preserveaspectratio: 'preserveAspectRatio',\n  primitiveunits: 'primitiveUnits',\n  property: 'property',\n  r: 'r',\n  radius: 'radius',\n  refx: 'refX',\n  refy: 'refY',\n  renderingintent: 'renderingIntent',\n  'rendering-intent': 'renderingIntent',\n  repeatcount: 'repeatCount',\n  repeatdur: 'repeatDur',\n  requiredextensions: 'requiredExtensions',\n  requiredfeatures: 'requiredFeatures',\n  resource: 'resource',\n  restart: 'restart',\n  result: 'result',\n  results: 'results',\n  rotate: 'rotate',\n  rx: 'rx',\n  ry: 'ry',\n  scale: 'scale',\n  security: 'security',\n  seed: 'seed',\n  shaperendering: 'shapeRendering',\n  'shape-rendering': 'shapeRendering',\n  slope: 'slope',\n  spacing: 'spacing',\n  specularconstant: 'specularConstant',\n  specularexponent: 'specularExponent',\n  speed: 'speed',\n  spreadmethod: 'spreadMethod',\n  startoffset: 'startOffset',\n  stddeviation: 'stdDeviation',\n  stemh: 'stemh',\n  stemv: 'stemv',\n  stitchtiles: 'stitchTiles',\n  stopcolor: 'stopColor',\n  'stop-color': 'stopColor',\n  stopopacity: 'stopOpacity',\n  'stop-opacity': 'stopOpacity',\n  strikethroughposition: 'strikethroughPosition',\n  'strikethrough-position': 'strikethroughPosition',\n  strikethroughthickness: 'strikethroughThickness',\n  'strikethrough-thickness': 'strikethroughThickness',\n  string: 'string',\n  stroke: 'stroke',\n  strokedasharray: 'strokeDasharray',\n  'stroke-dasharray': 'strokeDasharray',\n  strokedashoffset: 'strokeDashoffset',\n  'stroke-dashoffset': 'strokeDashoffset',\n  strokelinecap: 'strokeLinecap',\n  'stroke-linecap': 'strokeLinecap',\n  strokelinejoin: 'strokeLinejoin',\n  'stroke-linejoin': 'strokeLinejoin',\n  strokemiterlimit: 'strokeMiterlimit',\n  'stroke-miterlimit': 'strokeMiterlimit',\n  strokewidth: 'strokeWidth',\n  'stroke-width': 'strokeWidth',\n  strokeopacity: 'strokeOpacity',\n  'stroke-opacity': 'strokeOpacity',\n  suppresscontenteditablewarning: 'suppressContentEditableWarning',\n  suppresshydrationwarning: 'suppressHydrationWarning',\n  surfacescale: 'surfaceScale',\n  systemlanguage: 'systemLanguage',\n  tablevalues: 'tableValues',\n  targetx: 'targetX',\n  targety: 'targetY',\n  textanchor: 'textAnchor',\n  'text-anchor': 'textAnchor',\n  textdecoration: 'textDecoration',\n  'text-decoration': 'textDecoration',\n  textlength: 'textLength',\n  textrendering: 'textRendering',\n  'text-rendering': 'textRendering',\n  to: 'to',\n  transform: 'transform',\n  typeof: 'typeof',\n  u1: 'u1',\n  u2: 'u2',\n  underlineposition: 'underlinePosition',\n  'underline-position': 'underlinePosition',\n  underlinethickness: 'underlineThickness',\n  'underline-thickness': 'underlineThickness',\n  unicode: 'unicode',\n  unicodebidi: 'unicodeBidi',\n  'unicode-bidi': 'unicodeBidi',\n  unicoderange: 'unicodeRange',\n  'unicode-range': 'unicodeRange',\n  unitsperem: 'unitsPerEm',\n  'units-per-em': 'unitsPerEm',\n  unselectable: 'unselectable',\n  valphabetic: 'vAlphabetic',\n  'v-alphabetic': 'vAlphabetic',\n  values: 'values',\n  vectoreffect: 'vectorEffect',\n  'vector-effect': 'vectorEffect',\n  version: 'version',\n  vertadvy: 'vertAdvY',\n  'vert-adv-y': 'vertAdvY',\n  vertoriginx: 'vertOriginX',\n  'vert-origin-x': 'vertOriginX',\n  vertoriginy: 'vertOriginY',\n  'vert-origin-y': 'vertOriginY',\n  vhanging: 'vHanging',\n  'v-hanging': 'vHanging',\n  videographic: 'vIdeographic',\n  'v-ideographic': 'vIdeographic',\n  viewbox: 'viewBox',\n  viewtarget: 'viewTarget',\n  visibility: 'visibility',\n  vmathematical: 'vMathematical',\n  'v-mathematical': 'vMathematical',\n  vocab: 'vocab',\n  widths: 'widths',\n  wordspacing: 'wordSpacing',\n  'word-spacing': 'wordSpacing',\n  writingmode: 'writingMode',\n  'writing-mode': 'writingMode',\n  x1: 'x1',\n  x2: 'x2',\n  x: 'x',\n  xchannelselector: 'xChannelSelector',\n  xheight: 'xHeight',\n  'x-height': 'xHeight',\n  xlinkactuate: 'xlinkActuate',\n  'xlink:actuate': 'xlinkActuate',\n  xlinkarcrole: 'xlinkArcrole',\n  'xlink:arcrole': 'xlinkArcrole',\n  xlinkhref: 'xlinkHref',\n  'xlink:href': 'xlinkHref',\n  xlinkrole: 'xlinkRole',\n  'xlink:role': 'xlinkRole',\n  xlinkshow: 'xlinkShow',\n  'xlink:show': 'xlinkShow',\n  xlinktitle: 'xlinkTitle',\n  'xlink:title': 'xlinkTitle',\n  xlinktype: 'xlinkType',\n  'xlink:type': 'xlinkType',\n  xmlbase: 'xmlBase',\n  'xml:base': 'xmlBase',\n  xmllang: 'xmlLang',\n  'xml:lang': 'xmlLang',\n  xmlns: 'xmlns',\n  'xml:space': 'xmlSpace',\n  xmlnsxlink: 'xmlnsXlink',\n  'xmlns:xlink': 'xmlnsXlink',\n  xmlspace: 'xmlSpace',\n  y1: 'y1',\n  y2: 'y2',\n  y: 'y',\n  ychannelselector: 'yChannelSelector',\n  z: 'z',\n  zoomandpan: 'zoomAndPan'\n};\n\nvar validateProperty$1 = function () {};\n\n{\n  var warnedProperties$1 = {};\n  var _hasOwnProperty = Object.prototype.hasOwnProperty;\n  var EVENT_NAME_REGEX = /^on./;\n  var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;\n  var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');\n  var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');\n\n  validateProperty$1 = function (tagName, name, value, eventRegistry) {\n    if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {\n      return true;\n    }\n\n    var lowerCasedName = name.toLowerCase();\n\n    if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {\n      error('React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');\n\n      warnedProperties$1[name] = true;\n      return true;\n    } // We can't rely on the event system being injected on the server.\n\n\n    if (eventRegistry != null) {\n      var registrationNameDependencies = eventRegistry.registrationNameDependencies,\n          possibleRegistrationNames = eventRegistry.possibleRegistrationNames;\n\n      if (registrationNameDependencies.hasOwnProperty(name)) {\n        return true;\n      }\n\n      var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;\n\n      if (registrationName != null) {\n        error('Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);\n\n        warnedProperties$1[name] = true;\n        return true;\n      }\n\n      if (EVENT_NAME_REGEX.test(name)) {\n        error('Unknown event handler property `%s`. It will be ignored.', name);\n\n        warnedProperties$1[name] = true;\n        return true;\n      }\n    } else if (EVENT_NAME_REGEX.test(name)) {\n      // If no event plugins have been injected, we are in a server environment.\n      // So we can't tell if the event name is correct for sure, but we can filter\n      // out known bad ones like `onclick`. We can't suggest a specific replacement though.\n      if (INVALID_EVENT_NAME_REGEX.test(name)) {\n        error('Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.', name);\n      }\n\n      warnedProperties$1[name] = true;\n      return true;\n    } // Let the ARIA attribute hook validate ARIA attributes\n\n\n    if (rARIA$1.test(name) || rARIACamel$1.test(name)) {\n      return true;\n    }\n\n    if (lowerCasedName === 'innerhtml') {\n      error('Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');\n\n      warnedProperties$1[name] = true;\n      return true;\n    }\n\n    if (lowerCasedName === 'aria') {\n      error('The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');\n\n      warnedProperties$1[name] = true;\n      return true;\n    }\n\n    if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {\n      error('Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.', typeof value);\n\n      warnedProperties$1[name] = true;\n      return true;\n    }\n\n    if (typeof value === 'number' && isNaN(value)) {\n      error('Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.', name);\n\n      warnedProperties$1[name] = true;\n      return true;\n    }\n\n    var propertyInfo = getPropertyInfo(name);\n    var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.\n\n    if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {\n      var standardName = possibleStandardNames[lowerCasedName];\n\n      if (standardName !== name) {\n        error('Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);\n\n        warnedProperties$1[name] = true;\n        return true;\n      }\n    } else if (!isReserved && name !== lowerCasedName) {\n      // Unknown attributes should have lowercase casing since that's how they\n      // will be cased anyway with server rendering.\n      error('React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.', name, lowerCasedName);\n\n      warnedProperties$1[name] = true;\n      return true;\n    }\n\n    if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {\n      if (value) {\n        error('Received `%s` for a non-boolean attribute `%s`.\\n\\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s=\"%s\" or %s={value.toString()}.', value, name, name, value, name);\n      } else {\n        error('Received `%s` for a non-boolean attribute `%s`.\\n\\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s=\"%s\" or %s={value.toString()}.\\n\\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);\n      }\n\n      warnedProperties$1[name] = true;\n      return true;\n    } // Now that we've validated casing, do not validate\n    // data types for reserved props\n\n\n    if (isReserved) {\n      return true;\n    } // Warn when a known attribute is a bad type\n\n\n    if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {\n      warnedProperties$1[name] = true;\n      return false;\n    } // Warn when passing the strings 'false' or 'true' into a boolean prop\n\n\n    if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {\n      error('Received the string `%s` for the boolean attribute `%s`. ' + '%s ' + 'Did you mean %s={%s}?', value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string \"false\".', name, value);\n\n      warnedProperties$1[name] = true;\n      return true;\n    }\n\n    return true;\n  };\n}\n\nvar warnUnknownProperties = function (type, props, eventRegistry) {\n  {\n    var unknownProps = [];\n\n    for (var key in props) {\n      var isValid = validateProperty$1(type, key, props[key], eventRegistry);\n\n      if (!isValid) {\n        unknownProps.push(key);\n      }\n    }\n\n    var unknownPropString = unknownProps.map(function (prop) {\n      return '`' + prop + '`';\n    }).join(', ');\n\n    if (unknownProps.length === 1) {\n      error('Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://reactjs.org/link/attribute-behavior ', unknownPropString, type);\n    } else if (unknownProps.length > 1) {\n      error('Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://reactjs.org/link/attribute-behavior ', unknownPropString, type);\n    }\n  }\n};\n\nfunction validateProperties$2(type, props, eventRegistry) {\n  if (isCustomComponent(type, props)) {\n    return;\n  }\n\n  warnUnknownProperties(type, props, eventRegistry);\n}\n\nvar toArray = React.Children.toArray; // This is only used in DEV.\n// Each entry is `this.stack` from a currently executing renderer instance.\n// (There may be more than one because ReactDOMServer is reentrant).\n// Each stack is an array of frames which may contain nested stacks of elements.\n\nvar currentDebugStacks = [];\nvar ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;\nvar ReactDebugCurrentFrame$1;\nvar prevGetCurrentStackImpl = null;\n\nvar getCurrentServerStackImpl = function () {\n  return '';\n};\n\nvar describeStackFrame = function (element) {\n  return '';\n};\n\nvar validatePropertiesInDevelopment = function (type, props) {};\n\nvar pushCurrentDebugStack = function (stack) {};\n\nvar pushElementToDebugStack = function (element) {};\n\nvar popCurrentDebugStack = function () {};\n\nvar hasWarnedAboutUsingContextAsConsumer = false;\n\n{\n  ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n\n  validatePropertiesInDevelopment = function (type, props) {\n    validateProperties(type, props);\n    validateProperties$1(type, props);\n    validateProperties$2(type, props, null);\n  };\n\n  describeStackFrame = function (element) {\n    return describeUnknownElementTypeFrameInDEV(element.type, element._source, null);\n  };\n\n  pushCurrentDebugStack = function (stack) {\n    currentDebugStacks.push(stack);\n\n    if (currentDebugStacks.length === 1) {\n      // We are entering a server renderer.\n      // Remember the previous (e.g. client) global stack implementation.\n      prevGetCurrentStackImpl = ReactDebugCurrentFrame$1.getCurrentStack;\n      ReactDebugCurrentFrame$1.getCurrentStack = getCurrentServerStackImpl;\n    }\n  };\n\n  pushElementToDebugStack = function (element) {\n    // For the innermost executing ReactDOMServer call,\n    var stack = currentDebugStacks[currentDebugStacks.length - 1]; // Take the innermost executing frame (e.g. <Foo>),\n\n    var frame = stack[stack.length - 1]; // and record that it has one more element associated with it.\n\n    frame.debugElementStack.push(element); // We only need this because we tail-optimize single-element\n    // children and directly handle them in an inner loop instead of\n    // creating separate frames for them.\n  };\n\n  popCurrentDebugStack = function () {\n    currentDebugStacks.pop();\n\n    if (currentDebugStacks.length === 0) {\n      // We are exiting the server renderer.\n      // Restore the previous (e.g. client) global stack implementation.\n      ReactDebugCurrentFrame$1.getCurrentStack = prevGetCurrentStackImpl;\n      prevGetCurrentStackImpl = null;\n    }\n  };\n\n  getCurrentServerStackImpl = function () {\n    if (currentDebugStacks.length === 0) {\n      // Nothing is currently rendering.\n      return '';\n    } // ReactDOMServer is reentrant so there may be multiple calls at the same time.\n    // Take the frames from the innermost call which is the last in the array.\n\n\n    var frames = currentDebugStacks[currentDebugStacks.length - 1];\n    var stack = ''; // Go through every frame in the stack from the innermost one.\n\n    for (var i = frames.length - 1; i >= 0; i--) {\n      var frame = frames[i]; // Every frame might have more than one debug element stack entry associated with it.\n      // This is because single-child nesting doesn't create materialized frames.\n      // Instead it would push them through `pushElementToDebugStack()`.\n\n      var debugElementStack = frame.debugElementStack;\n\n      for (var ii = debugElementStack.length - 1; ii >= 0; ii--) {\n        stack += describeStackFrame(debugElementStack[ii]);\n      }\n    }\n\n    return stack;\n  };\n}\n\nvar didWarnDefaultInputValue = false;\nvar didWarnDefaultChecked = false;\nvar didWarnDefaultSelectValue = false;\nvar didWarnDefaultTextareaValue = false;\nvar didWarnInvalidOptionChildren = false;\nvar didWarnAboutNoopUpdateForComponent = {};\nvar didWarnAboutBadClass = {};\nvar didWarnAboutModulePatternComponent = {};\nvar didWarnAboutDeprecatedWillMount = {};\nvar didWarnAboutUndefinedDerivedState = {};\nvar didWarnAboutUninitializedState = {};\nvar valuePropNames = ['value', 'defaultValue'];\nvar newlineEatingTags = {\n  listing: true,\n  pre: true,\n  textarea: true\n}; // We accept any tag to be rendered but since this gets injected into arbitrary\n// HTML, we want to make sure that it's a safe tag.\n// http://www.w3.org/TR/REC-xml/#NT-Name\n\nvar VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\\.\\-\\d]*$/; // Simplified subset\n\nvar validatedTagCache = {};\n\nfunction validateDangerousTag(tag) {\n  if (!validatedTagCache.hasOwnProperty(tag)) {\n    if (!VALID_TAG_REGEX.test(tag)) {\n      {\n        throw Error( \"Invalid tag: \" + tag );\n      }\n    }\n\n    validatedTagCache[tag] = true;\n  }\n}\n\nvar styleNameCache = {};\n\nvar processStyleName = function (styleName) {\n  if (styleNameCache.hasOwnProperty(styleName)) {\n    return styleNameCache[styleName];\n  }\n\n  var result = hyphenateStyleName(styleName);\n  styleNameCache[styleName] = result;\n  return result;\n};\n\nfunction createMarkupForStyles(styles) {\n  var serialized = '';\n  var delimiter = '';\n\n  for (var styleName in styles) {\n    if (!styles.hasOwnProperty(styleName)) {\n      continue;\n    }\n\n    var isCustomProperty = styleName.indexOf('--') === 0;\n    var styleValue = styles[styleName];\n\n    {\n      if (!isCustomProperty) {\n        warnValidStyle$1(styleName, styleValue);\n      }\n    }\n\n    if (styleValue != null) {\n      serialized += delimiter + (isCustomProperty ? styleName : processStyleName(styleName)) + ':';\n      serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);\n      delimiter = ';';\n    }\n  }\n\n  return serialized || null;\n}\n\nfunction warnNoop(publicInstance, callerName) {\n  {\n    var _constructor = publicInstance.constructor;\n    var componentName = _constructor && getComponentName(_constructor) || 'ReactClass';\n    var warningKey = componentName + '.' + callerName;\n\n    if (didWarnAboutNoopUpdateForComponent[warningKey]) {\n      return;\n    }\n\n    error('%s(...): Can only update a mounting component. ' + 'This usually means you called %s() outside componentWillMount() on the server. ' + 'This is a no-op.\\n\\nPlease check the code for the %s component.', callerName, callerName, componentName);\n\n    didWarnAboutNoopUpdateForComponent[warningKey] = true;\n  }\n}\n\nfunction shouldConstruct$1(Component) {\n  return Component.prototype && Component.prototype.isReactComponent;\n}\n\nfunction getNonChildrenInnerMarkup(props) {\n  var innerHTML = props.dangerouslySetInnerHTML;\n\n  if (innerHTML != null) {\n    if (innerHTML.__html != null) {\n      return innerHTML.__html;\n    }\n  } else {\n    var content = props.children;\n\n    if (typeof content === 'string' || typeof content === 'number') {\n      return escapeTextForBrowser(content);\n    }\n  }\n\n  return null;\n}\n\nfunction flattenTopLevelChildren(children) {\n  if (!React.isValidElement(children)) {\n    return toArray(children);\n  }\n\n  var element = children;\n\n  if (element.type !== REACT_FRAGMENT_TYPE) {\n    return [element];\n  }\n\n  var fragmentChildren = element.props.children;\n\n  if (!React.isValidElement(fragmentChildren)) {\n    return toArray(fragmentChildren);\n  }\n\n  var fragmentChildElement = fragmentChildren;\n  return [fragmentChildElement];\n}\n\nfunction flattenOptionChildren(children) {\n  if (children === undefined || children === null) {\n    return children;\n  }\n\n  var content = ''; // Flatten children and warn if they aren't strings or numbers;\n  // invalid types are ignored.\n\n  React.Children.forEach(children, function (child) {\n    if (child == null) {\n      return;\n    }\n\n    content += child;\n\n    {\n      if (!didWarnInvalidOptionChildren && typeof child !== 'string' && typeof child !== 'number') {\n        didWarnInvalidOptionChildren = true;\n\n        error('Only strings and numbers are supported as <option> children.');\n      }\n    }\n  });\n  return content;\n}\n\nvar hasOwnProperty$2 = Object.prototype.hasOwnProperty;\nvar STYLE = 'style';\nvar RESERVED_PROPS = {\n  children: null,\n  dangerouslySetInnerHTML: null,\n  suppressContentEditableWarning: null,\n  suppressHydrationWarning: null\n};\n\nfunction createOpenTagMarkup(tagVerbatim, tagLowercase, props, namespace, makeStaticMarkup, isRootElement) {\n  var ret = '<' + tagVerbatim;\n  var isCustomComponent$1 = isCustomComponent(tagLowercase, props);\n\n  for (var propKey in props) {\n    if (!hasOwnProperty$2.call(props, propKey)) {\n      continue;\n    }\n\n    var propValue = props[propKey];\n\n    if (propValue == null) {\n      continue;\n    }\n\n    if (propKey === STYLE) {\n      propValue = createMarkupForStyles(propValue);\n    }\n\n    var markup = null;\n\n    if (isCustomComponent$1) {\n      if (!RESERVED_PROPS.hasOwnProperty(propKey)) {\n        markup = createMarkupForCustomAttribute(propKey, propValue);\n      }\n    } else {\n      markup = createMarkupForProperty(propKey, propValue);\n    }\n\n    if (markup) {\n      ret += ' ' + markup;\n    }\n  } // For static pages, no need to put React ID and checksum. Saves lots of\n  // bytes.\n\n\n  if (makeStaticMarkup) {\n    return ret;\n  }\n\n  if (isRootElement) {\n    ret += ' ' + createMarkupForRoot();\n  }\n\n  return ret;\n}\n\nfunction validateRenderResult(child, type) {\n  if (child === undefined) {\n    {\n      {\n        throw Error( (getComponentName(type) || 'Component') + \"(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.\" );\n      }\n    }\n  }\n}\n\nfunction resolve(child, context, threadID) {\n  while (React.isValidElement(child)) {\n    // Safe because we just checked it's an element.\n    var element = child;\n    var Component = element.type;\n\n    {\n      pushElementToDebugStack(element);\n    }\n\n    if (typeof Component !== 'function') {\n      break;\n    }\n\n    processChild(element, Component);\n  } // Extra closure so queue and replace can be captured properly\n\n\n  function processChild(element, Component) {\n    var isClass = shouldConstruct$1(Component);\n    var publicContext = processContext(Component, context, threadID, isClass);\n    var queue = [];\n    var replace = false;\n    var updater = {\n      isMounted: function (publicInstance) {\n        return false;\n      },\n      enqueueForceUpdate: function (publicInstance) {\n        if (queue === null) {\n          warnNoop(publicInstance, 'forceUpdate');\n          return null;\n        }\n      },\n      enqueueReplaceState: function (publicInstance, completeState) {\n        replace = true;\n        queue = [completeState];\n      },\n      enqueueSetState: function (publicInstance, currentPartialState) {\n        if (queue === null) {\n          warnNoop(publicInstance, 'setState');\n          return null;\n        }\n\n        queue.push(currentPartialState);\n      }\n    };\n    var inst;\n\n    if (isClass) {\n      inst = new Component(element.props, publicContext, updater);\n\n      if (typeof Component.getDerivedStateFromProps === 'function') {\n        {\n          if (inst.state === null || inst.state === undefined) {\n            var componentName = getComponentName(Component) || 'Unknown';\n\n            if (!didWarnAboutUninitializedState[componentName]) {\n              error('`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, inst.state === null ? 'null' : 'undefined', componentName);\n\n              didWarnAboutUninitializedState[componentName] = true;\n            }\n          }\n        }\n\n        var partialState = Component.getDerivedStateFromProps.call(null, element.props, inst.state);\n\n        {\n          if (partialState === undefined) {\n            var _componentName = getComponentName(Component) || 'Unknown';\n\n            if (!didWarnAboutUndefinedDerivedState[_componentName]) {\n              error('%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', _componentName);\n\n              didWarnAboutUndefinedDerivedState[_componentName] = true;\n            }\n          }\n        }\n\n        if (partialState != null) {\n          inst.state = _assign({}, inst.state, partialState);\n        }\n      }\n    } else {\n      {\n        if (Component.prototype && typeof Component.prototype.render === 'function') {\n          var _componentName2 = getComponentName(Component) || 'Unknown';\n\n          if (!didWarnAboutBadClass[_componentName2]) {\n            error(\"The <%s /> component appears to have a render method, but doesn't extend React.Component. \" + 'This is likely to cause errors. Change %s to extend React.Component instead.', _componentName2, _componentName2);\n\n            didWarnAboutBadClass[_componentName2] = true;\n          }\n        }\n      }\n\n      var componentIdentity = {};\n      prepareToUseHooks(componentIdentity);\n      inst = Component(element.props, publicContext, updater);\n      inst = finishHooks(Component, element.props, inst, publicContext);\n\n      {\n        // Support for module components is deprecated and is removed behind a flag.\n        // Whether or not it would crash later, we want to show a good message in DEV first.\n        if (inst != null && inst.render != null) {\n          var _componentName3 = getComponentName(Component) || 'Unknown';\n\n          if (!didWarnAboutModulePatternComponent[_componentName3]) {\n            error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + \"If you can't use a class try assigning the prototype on the function as a workaround. \" + \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" + 'cannot be called with `new` by React.', _componentName3, _componentName3, _componentName3);\n\n            didWarnAboutModulePatternComponent[_componentName3] = true;\n          }\n        }\n      } // If the flag is on, everything is assumed to be a function component.\n      // Otherwise, we also do the unfortunate dynamic checks.\n\n\n      if ( inst == null || inst.render == null) {\n        child = inst;\n        validateRenderResult(child, Component);\n        return;\n      }\n    }\n\n    inst.props = element.props;\n    inst.context = publicContext;\n    inst.updater = updater;\n    var initialState = inst.state;\n\n    if (initialState === undefined) {\n      inst.state = initialState = null;\n    }\n\n    if (typeof inst.UNSAFE_componentWillMount === 'function' || typeof inst.componentWillMount === 'function') {\n      if (typeof inst.componentWillMount === 'function') {\n        {\n          if ( inst.componentWillMount.__suppressDeprecationWarning !== true) {\n            var _componentName4 = getComponentName(Component) || 'Unknown';\n\n            if (!didWarnAboutDeprecatedWillMount[_componentName4]) {\n              warn( // keep this warning in sync with ReactStrictModeWarning.js\n              'componentWillMount has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n' + '* Move code from componentWillMount to componentDidMount (preferred in most cases) ' + 'or the constructor.\\n' + '\\nPlease update the following components: %s', _componentName4);\n\n              didWarnAboutDeprecatedWillMount[_componentName4] = true;\n            }\n          }\n        } // In order to support react-lifecycles-compat polyfilled components,\n        // Unsafe lifecycles should not be invoked for any component with the new gDSFP.\n\n\n        if (typeof Component.getDerivedStateFromProps !== 'function') {\n          inst.componentWillMount();\n        }\n      }\n\n      if (typeof inst.UNSAFE_componentWillMount === 'function' && typeof Component.getDerivedStateFromProps !== 'function') {\n        // In order to support react-lifecycles-compat polyfilled components,\n        // Unsafe lifecycles should not be invoked for any component with the new gDSFP.\n        inst.UNSAFE_componentWillMount();\n      }\n\n      if (queue.length) {\n        var oldQueue = queue;\n        var oldReplace = replace;\n        queue = null;\n        replace = false;\n\n        if (oldReplace && oldQueue.length === 1) {\n          inst.state = oldQueue[0];\n        } else {\n          var nextState = oldReplace ? oldQueue[0] : inst.state;\n          var dontMutate = true;\n\n          for (var i = oldReplace ? 1 : 0; i < oldQueue.length; i++) {\n            var partial = oldQueue[i];\n\n            var _partialState = typeof partial === 'function' ? partial.call(inst, nextState, element.props, publicContext) : partial;\n\n            if (_partialState != null) {\n              if (dontMutate) {\n                dontMutate = false;\n                nextState = _assign({}, nextState, _partialState);\n              } else {\n                _assign(nextState, _partialState);\n              }\n            }\n          }\n\n          inst.state = nextState;\n        }\n      } else {\n        queue = null;\n      }\n    }\n\n    child = inst.render();\n\n    {\n      if (child === undefined && inst.render._isMockFunction) {\n        // This is probably bad practice. Consider warning here and\n        // deprecating this convenience.\n        child = null;\n      }\n    }\n\n    validateRenderResult(child, Component);\n    var childContext;\n\n    {\n      if (typeof inst.getChildContext === 'function') {\n        var _childContextTypes = Component.childContextTypes;\n\n        if (typeof _childContextTypes === 'object') {\n          childContext = inst.getChildContext();\n\n          for (var contextKey in childContext) {\n            if (!(contextKey in _childContextTypes)) {\n              {\n                throw Error( (getComponentName(Component) || 'Unknown') + \".getChildContext(): key \\\"\" + contextKey + \"\\\" is not defined in childContextTypes.\" );\n              }\n            }\n          }\n        } else {\n          {\n            error('%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', getComponentName(Component) || 'Unknown');\n          }\n        }\n      }\n\n      if (childContext) {\n        context = _assign({}, context, childContext);\n      }\n    }\n  }\n\n  return {\n    child: child,\n    context: context\n  };\n}\n\nvar ReactDOMServerRenderer = /*#__PURE__*/function () {\n  // TODO: type this more strictly:\n  // DEV-only\n  function ReactDOMServerRenderer(children, makeStaticMarkup, options) {\n    var flatChildren = flattenTopLevelChildren(children);\n    var topFrame = {\n      type: null,\n      // Assume all trees start in the HTML namespace (not totally true, but\n      // this is what we did historically)\n      domNamespace: Namespaces.html,\n      children: flatChildren,\n      childIndex: 0,\n      context: emptyObject,\n      footer: ''\n    };\n\n    {\n      topFrame.debugElementStack = [];\n    }\n\n    this.threadID = allocThreadID();\n    this.stack = [topFrame];\n    this.exhausted = false;\n    this.currentSelectValue = null;\n    this.previousWasTextNode = false;\n    this.makeStaticMarkup = makeStaticMarkup;\n    this.suspenseDepth = 0; // Context (new API)\n\n    this.contextIndex = -1;\n    this.contextStack = [];\n    this.contextValueStack = []; // useOpaqueIdentifier ID\n\n    this.uniqueID = 0;\n    this.identifierPrefix = options && options.identifierPrefix || '';\n\n    {\n      this.contextProviderStack = [];\n    }\n  }\n\n  var _proto = ReactDOMServerRenderer.prototype;\n\n  _proto.destroy = function destroy() {\n    if (!this.exhausted) {\n      this.exhausted = true;\n      this.clearProviders();\n      freeThreadID(this.threadID);\n    }\n  }\n  /**\n   * Note: We use just two stacks regardless of how many context providers you have.\n   * Providers are always popped in the reverse order to how they were pushed\n   * so we always know on the way down which provider you'll encounter next on the way up.\n   * On the way down, we push the current provider, and its context value *before*\n   * we mutated it, onto the stacks. Therefore, on the way up, we always know which\n   * provider needs to be \"restored\" to which value.\n   * https://github.com/facebook/react/pull/12985#issuecomment-396301248\n   */\n  ;\n\n  _proto.pushProvider = function pushProvider(provider) {\n    var index = ++this.contextIndex;\n    var context = provider.type._context;\n    var threadID = this.threadID;\n    validateContextBounds(context, threadID);\n    var previousValue = context[threadID]; // Remember which value to restore this context to on our way up.\n\n    this.contextStack[index] = context;\n    this.contextValueStack[index] = previousValue;\n\n    {\n      // Only used for push/pop mismatch warnings.\n      this.contextProviderStack[index] = provider;\n    } // Mutate the current value.\n\n\n    context[threadID] = provider.props.value;\n  };\n\n  _proto.popProvider = function popProvider(provider) {\n    var index = this.contextIndex;\n\n    {\n      if (index < 0 || provider !== this.contextProviderStack[index]) {\n        error('Unexpected pop.');\n      }\n    }\n\n    var context = this.contextStack[index];\n    var previousValue = this.contextValueStack[index]; // \"Hide\" these null assignments from Flow by using `any`\n    // because conceptually they are deletions--as long as we\n    // promise to never access values beyond `this.contextIndex`.\n\n    this.contextStack[index] = null;\n    this.contextValueStack[index] = null;\n\n    {\n      this.contextProviderStack[index] = null;\n    }\n\n    this.contextIndex--; // Restore to the previous value we stored as we were walking down.\n    // We've already verified that this context has been expanded to accommodate\n    // this thread id, so we don't need to do it again.\n\n    context[this.threadID] = previousValue;\n  };\n\n  _proto.clearProviders = function clearProviders() {\n    // Restore any remaining providers on the stack to previous values\n    for (var index = this.contextIndex; index >= 0; index--) {\n      var context = this.contextStack[index];\n      var previousValue = this.contextValueStack[index];\n      context[this.threadID] = previousValue;\n    }\n  };\n\n  _proto.read = function read(bytes) {\n    if (this.exhausted) {\n      return null;\n    }\n\n    var prevPartialRenderer = currentPartialRenderer;\n    setCurrentPartialRenderer(this);\n    var prevDispatcher = ReactCurrentDispatcher$1.current;\n    ReactCurrentDispatcher$1.current = Dispatcher;\n\n    try {\n      // Markup generated within <Suspense> ends up buffered until we know\n      // nothing in that boundary suspended\n      var out = [''];\n      var suspended = false;\n\n      while (out[0].length < bytes) {\n        if (this.stack.length === 0) {\n          this.exhausted = true;\n          freeThreadID(this.threadID);\n          break;\n        }\n\n        var frame = this.stack[this.stack.length - 1];\n\n        if (suspended || frame.childIndex >= frame.children.length) {\n          var footer = frame.footer;\n\n          if (footer !== '') {\n            this.previousWasTextNode = false;\n          }\n\n          this.stack.pop();\n\n          if (frame.type === 'select') {\n            this.currentSelectValue = null;\n          } else if (frame.type != null && frame.type.type != null && frame.type.type.$$typeof === REACT_PROVIDER_TYPE) {\n            var provider = frame.type;\n            this.popProvider(provider);\n          } else if (frame.type === REACT_SUSPENSE_TYPE) {\n            this.suspenseDepth--;\n            var buffered = out.pop();\n\n            if (suspended) {\n              suspended = false; // If rendering was suspended at this boundary, render the fallbackFrame\n\n              var fallbackFrame = frame.fallbackFrame;\n\n              if (!fallbackFrame) {\n                {\n                  throw Error(true ? \"ReactDOMServer did not find an internal fallback frame for Suspense. This is a bug in React. Please file an issue.\" : formatProdErrorMessage(303));\n                }\n              }\n\n              this.stack.push(fallbackFrame);\n              out[this.suspenseDepth] += '<!--$!-->'; // Skip flushing output since we're switching to the fallback\n\n              continue;\n            } else {\n              out[this.suspenseDepth] += buffered;\n            }\n          } // Flush output\n\n\n          out[this.suspenseDepth] += footer;\n          continue;\n        }\n\n        var child = frame.children[frame.childIndex++];\n        var outBuffer = '';\n\n        if (true) {\n          pushCurrentDebugStack(this.stack); // We're starting work on this frame, so reset its inner stack.\n\n          frame.debugElementStack.length = 0;\n        }\n\n        try {\n          outBuffer += this.render(child, frame.context, frame.domNamespace);\n        } catch (err) {\n          if (err != null && typeof err.then === 'function') {\n            if (enableSuspenseServerRenderer) {\n              if (!(this.suspenseDepth > 0)) {\n                {\n                  throw Error(true ? \"A React component suspended while rendering, but no fallback UI was specified.\\n\\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.\" : formatProdErrorMessage(342));\n                }\n              }\n\n              suspended = true;\n            } else {\n              if (!false) {\n                {\n                  throw Error(true ? \"ReactDOMServer does not yet support Suspense.\" : formatProdErrorMessage(294));\n                }\n              }\n            }\n          } else {\n            throw err;\n          }\n        } finally {\n          if (true) {\n            popCurrentDebugStack();\n          }\n        }\n\n        if (out.length <= this.suspenseDepth) {\n          out.push('');\n        }\n\n        out[this.suspenseDepth] += outBuffer;\n      }\n\n      return out[0];\n    } finally {\n      ReactCurrentDispatcher$1.current = prevDispatcher;\n      setCurrentPartialRenderer(prevPartialRenderer);\n      resetHooksState();\n    }\n  };\n\n  _proto.render = function render(child, context, parentNamespace) {\n    if (typeof child === 'string' || typeof child === 'number') {\n      var text = '' + child;\n\n      if (text === '') {\n        return '';\n      }\n\n      if (this.makeStaticMarkup) {\n        return escapeTextForBrowser(text);\n      }\n\n      if (this.previousWasTextNode) {\n        return '<!-- -->' + escapeTextForBrowser(text);\n      }\n\n      this.previousWasTextNode = true;\n      return escapeTextForBrowser(text);\n    } else {\n      var nextChild;\n\n      var _resolve = resolve(child, context, this.threadID);\n\n      nextChild = _resolve.child;\n      context = _resolve.context;\n\n      if (nextChild === null || nextChild === false) {\n        return '';\n      } else if (!React.isValidElement(nextChild)) {\n        if (nextChild != null && nextChild.$$typeof != null) {\n          // Catch unexpected special types early.\n          var $$typeof = nextChild.$$typeof;\n\n          if (!($$typeof !== REACT_PORTAL_TYPE)) {\n            {\n              throw Error( \"Portals are not currently supported by the server renderer. Render them conditionally so that they only appear on the client render.\" );\n            }\n          } // Catch-all to prevent an infinite loop if React.Children.toArray() supports some new type.\n\n\n          {\n            {\n              throw Error( \"Unknown element-like object type: \" + $$typeof.toString() + \". This is likely a bug in React. Please file an issue.\" );\n            }\n          }\n        }\n\n        var nextChildren = toArray(nextChild);\n        var frame = {\n          type: null,\n          domNamespace: parentNamespace,\n          children: nextChildren,\n          childIndex: 0,\n          context: context,\n          footer: ''\n        };\n\n        {\n          frame.debugElementStack = [];\n        }\n\n        this.stack.push(frame);\n        return '';\n      } // Safe because we just checked it's an element.\n\n\n      var nextElement = nextChild;\n      var elementType = nextElement.type;\n\n      if (typeof elementType === 'string') {\n        return this.renderDOM(nextElement, context, parentNamespace);\n      }\n\n      switch (elementType) {\n        // TODO: LegacyHidden acts the same as a fragment. This only works\n        // because we currently assume that every instance of LegacyHidden is\n        // accompanied by a host component wrapper. In the hidden mode, the host\n        // component is given a `hidden` attribute, which ensures that the\n        // initial HTML is not visible. To support the use of LegacyHidden as a\n        // true fragment, without an extra DOM node, we would have to hide the\n        // initial HTML in some other way.\n        case REACT_LEGACY_HIDDEN_TYPE:\n        case REACT_DEBUG_TRACING_MODE_TYPE:\n        case REACT_STRICT_MODE_TYPE:\n        case REACT_PROFILER_TYPE:\n        case REACT_SUSPENSE_LIST_TYPE:\n        case REACT_FRAGMENT_TYPE:\n          {\n            var _nextChildren = toArray(nextChild.props.children);\n\n            var _frame = {\n              type: null,\n              domNamespace: parentNamespace,\n              children: _nextChildren,\n              childIndex: 0,\n              context: context,\n              footer: ''\n            };\n\n            {\n              _frame.debugElementStack = [];\n            }\n\n            this.stack.push(_frame);\n            return '';\n          }\n\n        case REACT_SUSPENSE_TYPE:\n          {\n            {\n              {\n                {\n                  throw Error( \"ReactDOMServer does not yet support Suspense.\" );\n                }\n              }\n            }\n          }\n        // eslint-disable-next-line-no-fallthrough\n\n        case REACT_SCOPE_TYPE:\n          {\n\n            {\n              {\n                throw Error( \"ReactDOMServer does not yet support scope components.\" );\n              }\n            }\n          }\n      }\n\n      if (typeof elementType === 'object' && elementType !== null) {\n        switch (elementType.$$typeof) {\n          case REACT_FORWARD_REF_TYPE:\n            {\n              var element = nextChild;\n\n              var _nextChildren5;\n\n              var componentIdentity = {};\n              prepareToUseHooks(componentIdentity);\n              _nextChildren5 = elementType.render(element.props, element.ref);\n              _nextChildren5 = finishHooks(elementType.render, element.props, _nextChildren5, element.ref);\n              _nextChildren5 = toArray(_nextChildren5);\n              var _frame5 = {\n                type: null,\n                domNamespace: parentNamespace,\n                children: _nextChildren5,\n                childIndex: 0,\n                context: context,\n                footer: ''\n              };\n\n              {\n                _frame5.debugElementStack = [];\n              }\n\n              this.stack.push(_frame5);\n              return '';\n            }\n\n          case REACT_MEMO_TYPE:\n            {\n              var _element = nextChild;\n              var _nextChildren6 = [React.createElement(elementType.type, _assign({\n                ref: _element.ref\n              }, _element.props))];\n              var _frame6 = {\n                type: null,\n                domNamespace: parentNamespace,\n                children: _nextChildren6,\n                childIndex: 0,\n                context: context,\n                footer: ''\n              };\n\n              {\n                _frame6.debugElementStack = [];\n              }\n\n              this.stack.push(_frame6);\n              return '';\n            }\n\n          case REACT_PROVIDER_TYPE:\n            {\n              var provider = nextChild;\n              var nextProps = provider.props;\n\n              var _nextChildren7 = toArray(nextProps.children);\n\n              var _frame7 = {\n                type: provider,\n                domNamespace: parentNamespace,\n                children: _nextChildren7,\n                childIndex: 0,\n                context: context,\n                footer: ''\n              };\n\n              {\n                _frame7.debugElementStack = [];\n              }\n\n              this.pushProvider(provider);\n              this.stack.push(_frame7);\n              return '';\n            }\n\n          case REACT_CONTEXT_TYPE:\n            {\n              var reactContext = nextChild.type; // The logic below for Context differs depending on PROD or DEV mode. In\n              // DEV mode, we create a separate object for Context.Consumer that acts\n              // like a proxy to Context. This proxy object adds unnecessary code in PROD\n              // so we use the old behaviour (Context.Consumer references Context) to\n              // reduce size and overhead. The separate object references context via\n              // a property called \"_context\", which also gives us the ability to check\n              // in DEV mode if this property exists or not and warn if it does not.\n\n              {\n                if (reactContext._context === undefined) {\n                  // This may be because it's a Context (rather than a Consumer).\n                  // Or it may be because it's older React where they're the same thing.\n                  // We only want to warn if we're sure it's a new React.\n                  if (reactContext !== reactContext.Consumer) {\n                    if (!hasWarnedAboutUsingContextAsConsumer) {\n                      hasWarnedAboutUsingContextAsConsumer = true;\n\n                      error('Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');\n                    }\n                  }\n                } else {\n                  reactContext = reactContext._context;\n                }\n              }\n\n              var _nextProps = nextChild.props;\n              var threadID = this.threadID;\n              validateContextBounds(reactContext, threadID);\n              var nextValue = reactContext[threadID];\n\n              var _nextChildren8 = toArray(_nextProps.children(nextValue));\n\n              var _frame8 = {\n                type: nextChild,\n                domNamespace: parentNamespace,\n                children: _nextChildren8,\n                childIndex: 0,\n                context: context,\n                footer: ''\n              };\n\n              {\n                _frame8.debugElementStack = [];\n              }\n\n              this.stack.push(_frame8);\n              return '';\n            }\n          // eslint-disable-next-line-no-fallthrough\n\n          case REACT_FUNDAMENTAL_TYPE:\n            {\n\n              {\n                {\n                  throw Error( \"ReactDOMServer does not yet support the fundamental API.\" );\n                }\n              }\n            }\n          // eslint-disable-next-line-no-fallthrough\n\n          case REACT_LAZY_TYPE:\n            {\n              var _element2 = nextChild;\n              var lazyComponent = nextChild.type; // Attempt to initialize lazy component regardless of whether the\n              // suspense server-side renderer is enabled so synchronously\n              // resolved constructors are supported.\n\n              var payload = lazyComponent._payload;\n              var init = lazyComponent._init;\n              var result = init(payload);\n              var _nextChildren10 = [React.createElement(result, _assign({\n                ref: _element2.ref\n              }, _element2.props))];\n              var _frame10 = {\n                type: null,\n                domNamespace: parentNamespace,\n                children: _nextChildren10,\n                childIndex: 0,\n                context: context,\n                footer: ''\n              };\n\n              {\n                _frame10.debugElementStack = [];\n              }\n\n              this.stack.push(_frame10);\n              return '';\n            }\n        }\n      }\n\n      var info = '';\n\n      {\n        var owner = nextElement._owner;\n\n        if (elementType === undefined || typeof elementType === 'object' && elementType !== null && Object.keys(elementType).length === 0) {\n          info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and \" + 'named imports.';\n        }\n\n        var ownerName = owner ? getComponentName(owner) : null;\n\n        if (ownerName) {\n          info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n        }\n      }\n\n      {\n        {\n          throw Error( \"Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: \" + (elementType == null ? elementType : typeof elementType) + \".\" + info );\n        }\n      }\n    }\n  };\n\n  _proto.renderDOM = function renderDOM(element, context, parentNamespace) {\n    var tag = element.type.toLowerCase();\n    var namespace = parentNamespace;\n\n    if (parentNamespace === Namespaces.html) {\n      namespace = getIntrinsicNamespace(tag);\n    }\n\n    {\n      if (namespace === Namespaces.html) {\n        // Should this check be gated by parent namespace? Not sure we want to\n        // allow <SVG> or <mATH>.\n        if (tag !== element.type) {\n          error('<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', element.type);\n        }\n      }\n    }\n\n    validateDangerousTag(tag);\n    var props = element.props;\n\n    if (tag === 'input') {\n      {\n        checkControlledValueProps('input', props);\n\n        if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnDefaultChecked) {\n          error('%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', 'A component', props.type);\n\n          didWarnDefaultChecked = true;\n        }\n\n        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnDefaultInputValue) {\n          error('%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', 'A component', props.type);\n\n          didWarnDefaultInputValue = true;\n        }\n      }\n\n      props = _assign({\n        type: undefined\n      }, props, {\n        defaultChecked: undefined,\n        defaultValue: undefined,\n        value: props.value != null ? props.value : props.defaultValue,\n        checked: props.checked != null ? props.checked : props.defaultChecked\n      });\n    } else if (tag === 'textarea') {\n      {\n        checkControlledValueProps('textarea', props);\n\n        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnDefaultTextareaValue) {\n          error('Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components');\n\n          didWarnDefaultTextareaValue = true;\n        }\n      }\n\n      var initialValue = props.value;\n\n      if (initialValue == null) {\n        var defaultValue = props.defaultValue; // TODO (yungsters): Remove support for children content in <textarea>.\n\n        var textareaChildren = props.children;\n\n        if (textareaChildren != null) {\n          {\n            error('Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');\n          }\n\n          if (!(defaultValue == null)) {\n            {\n              throw Error( \"If you supply `defaultValue` on a <textarea>, do not pass children.\" );\n            }\n          }\n\n          if (Array.isArray(textareaChildren)) {\n            if (!(textareaChildren.length <= 1)) {\n              {\n                throw Error( \"<textarea> can only have at most one child.\" );\n              }\n            }\n\n            textareaChildren = textareaChildren[0];\n          }\n\n          defaultValue = '' + textareaChildren;\n        }\n\n        if (defaultValue == null) {\n          defaultValue = '';\n        }\n\n        initialValue = defaultValue;\n      }\n\n      props = _assign({}, props, {\n        value: undefined,\n        children: '' + initialValue\n      });\n    } else if (tag === 'select') {\n      {\n        checkControlledValueProps('select', props);\n\n        for (var i = 0; i < valuePropNames.length; i++) {\n          var propName = valuePropNames[i];\n\n          if (props[propName] == null) {\n            continue;\n          }\n\n          var isArray = Array.isArray(props[propName]);\n\n          if (props.multiple && !isArray) {\n            error('The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.', propName);\n          } else if (!props.multiple && isArray) {\n            error('The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.', propName);\n          }\n        }\n\n        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnDefaultSelectValue) {\n          error('Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components');\n\n          didWarnDefaultSelectValue = true;\n        }\n      }\n\n      this.currentSelectValue = props.value != null ? props.value : props.defaultValue;\n      props = _assign({}, props, {\n        value: undefined\n      });\n    } else if (tag === 'option') {\n      var selected = null;\n      var selectValue = this.currentSelectValue;\n      var optionChildren = flattenOptionChildren(props.children);\n\n      if (selectValue != null) {\n        var value;\n\n        if (props.value != null) {\n          value = props.value + '';\n        } else {\n          value = optionChildren;\n        }\n\n        selected = false;\n\n        if (Array.isArray(selectValue)) {\n          // multiple\n          for (var j = 0; j < selectValue.length; j++) {\n            if ('' + selectValue[j] === value) {\n              selected = true;\n              break;\n            }\n          }\n        } else {\n          selected = '' + selectValue === value;\n        }\n\n        props = _assign({\n          selected: undefined,\n          children: undefined\n        }, props, {\n          selected: selected,\n          children: optionChildren\n        });\n      }\n    }\n\n    {\n      validatePropertiesInDevelopment(tag, props);\n    }\n\n    assertValidProps(tag, props);\n    var out = createOpenTagMarkup(element.type, tag, props, namespace, this.makeStaticMarkup, this.stack.length === 1);\n    var footer = '';\n\n    if (omittedCloseTags.hasOwnProperty(tag)) {\n      out += '/>';\n    } else {\n      out += '>';\n      footer = '</' + element.type + '>';\n    }\n\n    var children;\n    var innerMarkup = getNonChildrenInnerMarkup(props);\n\n    if (innerMarkup != null) {\n      children = [];\n\n      if (newlineEatingTags.hasOwnProperty(tag) && innerMarkup.charAt(0) === '\\n') {\n        // text/html ignores the first character in these tags if it's a newline\n        // Prefer to break application/xml over text/html (for now) by adding\n        // a newline specifically to get eaten by the parser. (Alternately for\n        // textareas, replacing \"^\\n\" with \"\\r\\n\" doesn't get eaten, and the first\n        // \\r is normalized out by HTMLTextAreaElement#value.)\n        // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>\n        // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>\n        // See: <http://www.w3.org/TR/html5/syntax.html#newlines>\n        // See: Parsing of \"textarea\" \"listing\" and \"pre\" elements\n        //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>\n        out += '\\n';\n      }\n\n      out += innerMarkup;\n    } else {\n      children = toArray(props.children);\n    }\n\n    var frame = {\n      domNamespace: getChildNamespace(parentNamespace, element.type),\n      type: tag,\n      children: children,\n      childIndex: 0,\n      context: context,\n      footer: footer\n    };\n\n    {\n      frame.debugElementStack = [];\n    }\n\n    this.stack.push(frame);\n    this.previousWasTextNode = false;\n    return out;\n  };\n\n  return ReactDOMServerRenderer;\n}();\n\n/**\n * Render a ReactElement to its initial HTML. This should only be used on the\n * server.\n * See https://reactjs.org/docs/react-dom-server.html#rendertostring\n */\n\nfunction renderToString(element, options) {\n  var renderer = new ReactDOMServerRenderer(element, false, options);\n\n  try {\n    var markup = renderer.read(Infinity);\n    return markup;\n  } finally {\n    renderer.destroy();\n  }\n}\n/**\n * Similar to renderToString, except this doesn't create extra DOM attributes\n * such as data-react-id that React uses internally.\n * See https://reactjs.org/docs/react-dom-server.html#rendertostaticmarkup\n */\n\nfunction renderToStaticMarkup(element, options) {\n  var renderer = new ReactDOMServerRenderer(element, true, options);\n\n  try {\n    var markup = renderer.read(Infinity);\n    return markup;\n  } finally {\n    renderer.destroy();\n  }\n}\n\nfunction renderToNodeStream() {\n  {\n    {\n      throw Error( \"ReactDOMServer.renderToNodeStream(): The streaming API is not available in the browser. Use ReactDOMServer.renderToString() instead.\" );\n    }\n  }\n}\n\nfunction renderToStaticNodeStream() {\n  {\n    {\n      throw Error( \"ReactDOMServer.renderToStaticNodeStream(): The streaming API is not available in the browser. Use ReactDOMServer.renderToStaticMarkup() instead.\" );\n    }\n  }\n}\n\nexports.renderToNodeStream = renderToNodeStream;\nexports.renderToStaticMarkup = renderToStaticMarkup;\nexports.renderToStaticNodeStream = renderToStaticNodeStream;\nexports.renderToString = renderToString;\nexports.version = ReactVersion;\n  })();\n}\n","/** @license React v17.0.1\n * react-dom-server.browser.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var l=require(\"object-assign\"),m=require(\"react\");function p(a){for(var b=\"https://reactjs.org/docs/error-decoder.html?invariant=\"+a,c=1;c<arguments.length;c++)b+=\"&args[]=\"+encodeURIComponent(arguments[c]);return\"Minified React error #\"+a+\"; visit \"+b+\" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\"}\nvar q=60106,r=60107,u=60108,z=60114,B=60109,aa=60110,ba=60112,D=60113,ca=60120,da=60115,ea=60116,fa=60121,ha=60117,ia=60119,ja=60129,ka=60131;\nif(\"function\"===typeof Symbol&&Symbol.for){var E=Symbol.for;q=E(\"react.portal\");r=E(\"react.fragment\");u=E(\"react.strict_mode\");z=E(\"react.profiler\");B=E(\"react.provider\");aa=E(\"react.context\");ba=E(\"react.forward_ref\");D=E(\"react.suspense\");ca=E(\"react.suspense_list\");da=E(\"react.memo\");ea=E(\"react.lazy\");fa=E(\"react.block\");ha=E(\"react.fundamental\");ia=E(\"react.scope\");ja=E(\"react.debug_trace_mode\");ka=E(\"react.legacy_hidden\")}\nfunction F(a){if(null==a)return null;if(\"function\"===typeof a)return a.displayName||a.name||null;if(\"string\"===typeof a)return a;switch(a){case r:return\"Fragment\";case q:return\"Portal\";case z:return\"Profiler\";case u:return\"StrictMode\";case D:return\"Suspense\";case ca:return\"SuspenseList\"}if(\"object\"===typeof a)switch(a.$$typeof){case aa:return(a.displayName||\"Context\")+\".Consumer\";case B:return(a._context.displayName||\"Context\")+\".Provider\";case ba:var b=a.render;b=b.displayName||b.name||\"\";return a.displayName||\n(\"\"!==b?\"ForwardRef(\"+b+\")\":\"ForwardRef\");case da:return F(a.type);case fa:return F(a._render);case ea:b=a._payload;a=a._init;try{return F(a(b))}catch(c){}}return null}var la=m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,ma={};function I(a,b){for(var c=a._threadCount|0;c<=b;c++)a[c]=a._currentValue2,a._threadCount=c+1}function na(a,b,c,d){if(d&&(d=a.contextType,\"object\"===typeof d&&null!==d))return I(d,c),d[c];if(a=a.contextTypes){c={};for(var f in a)c[f]=b[f];b=c}else b=ma;return b}\nfor(var J=new Uint16Array(16),K=0;15>K;K++)J[K]=K+1;J[15]=0;var oa=/^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$/,pa=Object.prototype.hasOwnProperty,qa={},ra={};\nfunction sa(a){if(pa.call(ra,a))return!0;if(pa.call(qa,a))return!1;if(oa.test(a))return ra[a]=!0;qa[a]=!0;return!1}function ta(a,b,c,d){if(null!==c&&0===c.type)return!1;switch(typeof b){case \"function\":case \"symbol\":return!0;case \"boolean\":if(d)return!1;if(null!==c)return!c.acceptsBooleans;a=a.toLowerCase().slice(0,5);return\"data-\"!==a&&\"aria-\"!==a;default:return!1}}\nfunction ua(a,b,c,d){if(null===b||\"undefined\"===typeof b||ta(a,b,c,d))return!0;if(d)return!1;if(null!==c)switch(c.type){case 3:return!b;case 4:return!1===b;case 5:return isNaN(b);case 6:return isNaN(b)||1>b}return!1}function M(a,b,c,d,f,h,t){this.acceptsBooleans=2===b||3===b||4===b;this.attributeName=d;this.attributeNamespace=f;this.mustUseProperty=c;this.propertyName=a;this.type=b;this.sanitizeURL=h;this.removeEmptyString=t}var N={};\n\"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style\".split(\" \").forEach(function(a){N[a]=new M(a,0,!1,a,null,!1,!1)});[[\"acceptCharset\",\"accept-charset\"],[\"className\",\"class\"],[\"htmlFor\",\"for\"],[\"httpEquiv\",\"http-equiv\"]].forEach(function(a){var b=a[0];N[b]=new M(b,1,!1,a[1],null,!1,!1)});[\"contentEditable\",\"draggable\",\"spellCheck\",\"value\"].forEach(function(a){N[a]=new M(a,2,!1,a.toLowerCase(),null,!1,!1)});\n[\"autoReverse\",\"externalResourcesRequired\",\"focusable\",\"preserveAlpha\"].forEach(function(a){N[a]=new M(a,2,!1,a,null,!1,!1)});\"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope\".split(\" \").forEach(function(a){N[a]=new M(a,3,!1,a.toLowerCase(),null,!1,!1)});\n[\"checked\",\"multiple\",\"muted\",\"selected\"].forEach(function(a){N[a]=new M(a,3,!0,a,null,!1,!1)});[\"capture\",\"download\"].forEach(function(a){N[a]=new M(a,4,!1,a,null,!1,!1)});[\"cols\",\"rows\",\"size\",\"span\"].forEach(function(a){N[a]=new M(a,6,!1,a,null,!1,!1)});[\"rowSpan\",\"start\"].forEach(function(a){N[a]=new M(a,5,!1,a.toLowerCase(),null,!1,!1)});var va=/[\\-:]([a-z])/g;function wa(a){return a[1].toUpperCase()}\n\"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height\".split(\" \").forEach(function(a){var b=a.replace(va,\nwa);N[b]=new M(b,1,!1,a,null,!1,!1)});\"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type\".split(\" \").forEach(function(a){var b=a.replace(va,wa);N[b]=new M(b,1,!1,a,\"http://www.w3.org/1999/xlink\",!1,!1)});[\"xml:base\",\"xml:lang\",\"xml:space\"].forEach(function(a){var b=a.replace(va,wa);N[b]=new M(b,1,!1,a,\"http://www.w3.org/XML/1998/namespace\",!1,!1)});[\"tabIndex\",\"crossOrigin\"].forEach(function(a){N[a]=new M(a,1,!1,a.toLowerCase(),null,!1,!1)});\nN.xlinkHref=new M(\"xlinkHref\",1,!1,\"xlink:href\",\"http://www.w3.org/1999/xlink\",!0,!1);[\"src\",\"href\",\"action\",\"formAction\"].forEach(function(a){N[a]=new M(a,1,!1,a.toLowerCase(),null,!0,!0)});var xa=/[\"'&<>]/;\nfunction O(a){if(\"boolean\"===typeof a||\"number\"===typeof a)return\"\"+a;a=\"\"+a;var b=xa.exec(a);if(b){var c=\"\",d,f=0;for(d=b.index;d<a.length;d++){switch(a.charCodeAt(d)){case 34:b=\"&quot;\";break;case 38:b=\"&amp;\";break;case 39:b=\"&#x27;\";break;case 60:b=\"&lt;\";break;case 62:b=\"&gt;\";break;default:continue}f!==d&&(c+=a.substring(f,d));f=d+1;c+=b}a=f!==d?c+a.substring(f,d):c}return a}\nfunction ya(a,b){var c=N.hasOwnProperty(a)?N[a]:null;var d;if(d=\"style\"!==a)d=null!==c?0===c.type:!(2<a.length)||\"o\"!==a[0]&&\"O\"!==a[0]||\"n\"!==a[1]&&\"N\"!==a[1]?!1:!0;if(d||ua(a,b,c,!1))return\"\";if(null!==c){a=c.attributeName;d=c.type;if(3===d||4===d&&!0===b)return a+'=\"\"';c.sanitizeURL&&(b=\"\"+b);return a+'=\"'+(O(b)+'\"')}return sa(a)?a+'=\"'+(O(b)+'\"'):\"\"}function za(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}\nvar Aa=\"function\"===typeof Object.is?Object.is:za,P=null,Q=null,R=null,S=!1,T=!1,U=null,V=0;function W(){if(null===P)throw Error(p(321));return P}function Ba(){if(0<V)throw Error(p(312));return{memoizedState:null,queue:null,next:null}}function Ca(){null===R?null===Q?(S=!1,Q=R=Ba()):(S=!0,R=Q):null===R.next?(S=!1,R=R.next=Ba()):(S=!0,R=R.next);return R}function Da(a,b,c,d){for(;T;)T=!1,V+=1,R=null,c=a(b,d);Ea();return c}function Ea(){P=null;T=!1;Q=null;V=0;R=U=null}\nfunction Fa(a,b){return\"function\"===typeof b?b(a):b}function Ga(a,b,c){P=W();R=Ca();if(S){var d=R.queue;b=d.dispatch;if(null!==U&&(c=U.get(d),void 0!==c)){U.delete(d);d=R.memoizedState;do d=a(d,c.action),c=c.next;while(null!==c);R.memoizedState=d;return[d,b]}return[R.memoizedState,b]}a=a===Fa?\"function\"===typeof b?b():b:void 0!==c?c(b):b;R.memoizedState=a;a=R.queue={last:null,dispatch:null};a=a.dispatch=Ha.bind(null,P,a);return[R.memoizedState,a]}\nfunction Ia(a,b){P=W();R=Ca();b=void 0===b?null:b;if(null!==R){var c=R.memoizedState;if(null!==c&&null!==b){var d=c[1];a:if(null===d)d=!1;else{for(var f=0;f<d.length&&f<b.length;f++)if(!Aa(b[f],d[f])){d=!1;break a}d=!0}if(d)return c[0]}}a=a();R.memoizedState=[a,b];return a}function Ha(a,b,c){if(!(25>V))throw Error(p(301));if(a===P)if(T=!0,a={action:c,next:null},null===U&&(U=new Map),c=U.get(b),void 0===c)U.set(b,a);else{for(b=c;null!==b.next;)b=b.next;b.next=a}}function Ja(){}\nvar X=null,Ka={readContext:function(a){var b=X.threadID;I(a,b);return a[b]},useContext:function(a){W();var b=X.threadID;I(a,b);return a[b]},useMemo:Ia,useReducer:Ga,useRef:function(a){P=W();R=Ca();var b=R.memoizedState;return null===b?(a={current:a},R.memoizedState=a):b},useState:function(a){return Ga(Fa,a)},useLayoutEffect:function(){},useCallback:function(a,b){return Ia(function(){return a},b)},useImperativeHandle:Ja,useEffect:Ja,useDebugValue:Ja,useDeferredValue:function(a){W();return a},useTransition:function(){W();\nreturn[function(a){a()},!1]},useOpaqueIdentifier:function(){return(X.identifierPrefix||\"\")+\"R:\"+(X.uniqueID++).toString(36)},useMutableSource:function(a,b){W();return b(a._source)}},La={html:\"http://www.w3.org/1999/xhtml\",mathml:\"http://www.w3.org/1998/Math/MathML\",svg:\"http://www.w3.org/2000/svg\"};function Ma(a){switch(a){case \"svg\":return\"http://www.w3.org/2000/svg\";case \"math\":return\"http://www.w3.org/1998/Math/MathML\";default:return\"http://www.w3.org/1999/xhtml\"}}\nvar Na={area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0},Oa=l({menuitem:!0},Na),Y={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,\ngridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Pa=[\"Webkit\",\"ms\",\"Moz\",\"O\"];Object.keys(Y).forEach(function(a){Pa.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);Y[b]=Y[a]})});\nvar Qa=/([A-Z])/g,Ra=/^ms-/,Z=m.Children.toArray,Sa=la.ReactCurrentDispatcher,Ta={listing:!0,pre:!0,textarea:!0},Ua=/^[a-zA-Z][a-zA-Z:_\\.\\-\\d]*$/,Va={},Wa={};function Xa(a){if(void 0===a||null===a)return a;var b=\"\";m.Children.forEach(a,function(a){null!=a&&(b+=a)});return b}var Ya=Object.prototype.hasOwnProperty,Za={children:null,dangerouslySetInnerHTML:null,suppressContentEditableWarning:null,suppressHydrationWarning:null};function $a(a,b){if(void 0===a)throw Error(p(152,F(b)||\"Component\"));}\nfunction ab(a,b,c){function d(d,h){var e=h.prototype&&h.prototype.isReactComponent,f=na(h,b,c,e),t=[],g=!1,n={isMounted:function(){return!1},enqueueForceUpdate:function(){if(null===t)return null},enqueueReplaceState:function(a,c){g=!0;t=[c]},enqueueSetState:function(a,c){if(null===t)return null;t.push(c)}};if(e){if(e=new h(d.props,f,n),\"function\"===typeof h.getDerivedStateFromProps){var k=h.getDerivedStateFromProps.call(null,d.props,e.state);null!=k&&(e.state=l({},e.state,k))}}else if(P={},e=h(d.props,\nf,n),e=Da(h,d.props,e,f),null==e||null==e.render){a=e;$a(a,h);return}e.props=d.props;e.context=f;e.updater=n;n=e.state;void 0===n&&(e.state=n=null);if(\"function\"===typeof e.UNSAFE_componentWillMount||\"function\"===typeof e.componentWillMount)if(\"function\"===typeof e.componentWillMount&&\"function\"!==typeof h.getDerivedStateFromProps&&e.componentWillMount(),\"function\"===typeof e.UNSAFE_componentWillMount&&\"function\"!==typeof h.getDerivedStateFromProps&&e.UNSAFE_componentWillMount(),t.length){n=t;var v=\ng;t=null;g=!1;if(v&&1===n.length)e.state=n[0];else{k=v?n[0]:e.state;var H=!0;for(v=v?1:0;v<n.length;v++){var x=n[v];x=\"function\"===typeof x?x.call(e,k,d.props,f):x;null!=x&&(H?(H=!1,k=l({},k,x)):l(k,x))}e.state=k}}else t=null;a=e.render();$a(a,h);if(\"function\"===typeof e.getChildContext&&(d=h.childContextTypes,\"object\"===typeof d)){var y=e.getChildContext();for(var A in y)if(!(A in d))throw Error(p(108,F(h)||\"Unknown\",A));}y&&(b=l({},b,y))}for(;m.isValidElement(a);){var f=a,h=f.type;if(\"function\"!==\ntypeof h)break;d(f,h)}return{child:a,context:b}}\nvar bb=function(){function a(a,b,f){m.isValidElement(a)?a.type!==r?a=[a]:(a=a.props.children,a=m.isValidElement(a)?[a]:Z(a)):a=Z(a);a={type:null,domNamespace:La.html,children:a,childIndex:0,context:ma,footer:\"\"};var c=J[0];if(0===c){var d=J;c=d.length;var g=2*c;if(!(65536>=g))throw Error(p(304));var e=new Uint16Array(g);e.set(d);J=e;J[0]=c+1;for(d=c;d<g-1;d++)J[d]=d+1;J[g-1]=0}else J[0]=J[c];this.threadID=c;this.stack=[a];this.exhausted=!1;this.currentSelectValue=null;this.previousWasTextNode=!1;\nthis.makeStaticMarkup=b;this.suspenseDepth=0;this.contextIndex=-1;this.contextStack=[];this.contextValueStack=[];this.uniqueID=0;this.identifierPrefix=f&&f.identifierPrefix||\"\"}var b=a.prototype;b.destroy=function(){if(!this.exhausted){this.exhausted=!0;this.clearProviders();var a=this.threadID;J[a]=J[0];J[0]=a}};b.pushProvider=function(a){var b=++this.contextIndex,c=a.type._context,h=this.threadID;I(c,h);var t=c[h];this.contextStack[b]=c;this.contextValueStack[b]=t;c[h]=a.props.value};b.popProvider=\nfunction(){var a=this.contextIndex,b=this.contextStack[a],f=this.contextValueStack[a];this.contextStack[a]=null;this.contextValueStack[a]=null;this.contextIndex--;b[this.threadID]=f};b.clearProviders=function(){for(var a=this.contextIndex;0<=a;a--)this.contextStack[a][this.threadID]=this.contextValueStack[a]};b.read=function(a){if(this.exhausted)return null;var b=X;X=this;var c=Sa.current;Sa.current=Ka;try{for(var h=[\"\"],t=!1;h[0].length<a;){if(0===this.stack.length){this.exhausted=!0;var g=this.threadID;\nJ[g]=J[0];J[0]=g;break}var e=this.stack[this.stack.length-1];if(t||e.childIndex>=e.children.length){var L=e.footer;\"\"!==L&&(this.previousWasTextNode=!1);this.stack.pop();if(\"select\"===e.type)this.currentSelectValue=null;else if(null!=e.type&&null!=e.type.type&&e.type.type.$$typeof===B)this.popProvider(e.type);else if(e.type===D){this.suspenseDepth--;var G=h.pop();if(t){t=!1;var C=e.fallbackFrame;if(!C)throw Error(p(303));this.stack.push(C);h[this.suspenseDepth]+=\"\\x3c!--$!--\\x3e\";continue}else h[this.suspenseDepth]+=\nG}h[this.suspenseDepth]+=L}else{var n=e.children[e.childIndex++],k=\"\";try{k+=this.render(n,e.context,e.domNamespace)}catch(v){if(null!=v&&\"function\"===typeof v.then)throw Error(p(294));throw v;}finally{}h.length<=this.suspenseDepth&&h.push(\"\");h[this.suspenseDepth]+=k}}return h[0]}finally{Sa.current=c,X=b,Ea()}};b.render=function(a,b,f){if(\"string\"===typeof a||\"number\"===typeof a){f=\"\"+a;if(\"\"===f)return\"\";if(this.makeStaticMarkup)return O(f);if(this.previousWasTextNode)return\"\\x3c!-- --\\x3e\"+O(f);\nthis.previousWasTextNode=!0;return O(f)}b=ab(a,b,this.threadID);a=b.child;b=b.context;if(null===a||!1===a)return\"\";if(!m.isValidElement(a)){if(null!=a&&null!=a.$$typeof){f=a.$$typeof;if(f===q)throw Error(p(257));throw Error(p(258,f.toString()));}a=Z(a);this.stack.push({type:null,domNamespace:f,children:a,childIndex:0,context:b,footer:\"\"});return\"\"}var c=a.type;if(\"string\"===typeof c)return this.renderDOM(a,b,f);switch(c){case ka:case ja:case u:case z:case ca:case r:return a=Z(a.props.children),this.stack.push({type:null,\ndomNamespace:f,children:a,childIndex:0,context:b,footer:\"\"}),\"\";case D:throw Error(p(294));case ia:throw Error(p(343));}if(\"object\"===typeof c&&null!==c)switch(c.$$typeof){case ba:P={};var d=c.render(a.props,a.ref);d=Da(c.render,a.props,d,a.ref);d=Z(d);this.stack.push({type:null,domNamespace:f,children:d,childIndex:0,context:b,footer:\"\"});return\"\";case da:return a=[m.createElement(c.type,l({ref:a.ref},a.props))],this.stack.push({type:null,domNamespace:f,children:a,childIndex:0,context:b,footer:\"\"}),\n\"\";case B:return c=Z(a.props.children),f={type:a,domNamespace:f,children:c,childIndex:0,context:b,footer:\"\"},this.pushProvider(a),this.stack.push(f),\"\";case aa:c=a.type;d=a.props;var g=this.threadID;I(c,g);c=Z(d.children(c[g]));this.stack.push({type:a,domNamespace:f,children:c,childIndex:0,context:b,footer:\"\"});return\"\";case ha:throw Error(p(338));case ea:return c=a.type,d=c._init,c=d(c._payload),a=[m.createElement(c,l({ref:a.ref},a.props))],this.stack.push({type:null,domNamespace:f,children:a,childIndex:0,\ncontext:b,footer:\"\"}),\"\"}throw Error(p(130,null==c?c:typeof c,\"\"));};b.renderDOM=function(a,b,f){var c=a.type.toLowerCase();f===La.html&&Ma(c);if(!Va.hasOwnProperty(c)){if(!Ua.test(c))throw Error(p(65,c));Va[c]=!0}var d=a.props;if(\"input\"===c)d=l({type:void 0},d,{defaultChecked:void 0,defaultValue:void 0,value:null!=d.value?d.value:d.defaultValue,checked:null!=d.checked?d.checked:d.defaultChecked});else if(\"textarea\"===c){var g=d.value;if(null==g){g=d.defaultValue;var e=d.children;if(null!=e){if(null!=\ng)throw Error(p(92));if(Array.isArray(e)){if(!(1>=e.length))throw Error(p(93));e=e[0]}g=\"\"+e}null==g&&(g=\"\")}d=l({},d,{value:void 0,children:\"\"+g})}else if(\"select\"===c)this.currentSelectValue=null!=d.value?d.value:d.defaultValue,d=l({},d,{value:void 0});else if(\"option\"===c){e=this.currentSelectValue;var L=Xa(d.children);if(null!=e){var G=null!=d.value?d.value+\"\":L;g=!1;if(Array.isArray(e))for(var C=0;C<e.length;C++){if(\"\"+e[C]===G){g=!0;break}}else g=\"\"+e===G;d=l({selected:void 0,children:void 0},\nd,{selected:g,children:L})}}if(g=d){if(Oa[c]&&(null!=g.children||null!=g.dangerouslySetInnerHTML))throw Error(p(137,c));if(null!=g.dangerouslySetInnerHTML){if(null!=g.children)throw Error(p(60));if(!(\"object\"===typeof g.dangerouslySetInnerHTML&&\"__html\"in g.dangerouslySetInnerHTML))throw Error(p(61));}if(null!=g.style&&\"object\"!==typeof g.style)throw Error(p(62));}g=d;e=this.makeStaticMarkup;L=1===this.stack.length;G=\"<\"+a.type;b:if(-1===c.indexOf(\"-\"))C=\"string\"===typeof g.is;else switch(c){case \"annotation-xml\":case \"color-profile\":case \"font-face\":case \"font-face-src\":case \"font-face-uri\":case \"font-face-format\":case \"font-face-name\":case \"missing-glyph\":C=\n!1;break b;default:C=!0}for(w in g)if(Ya.call(g,w)){var n=g[w];if(null!=n){if(\"style\"===w){var k=void 0,v=\"\",H=\"\";for(k in n)if(n.hasOwnProperty(k)){var x=0===k.indexOf(\"--\"),y=n[k];if(null!=y){if(x)var A=k;else if(A=k,Wa.hasOwnProperty(A))A=Wa[A];else{var cb=A.replace(Qa,\"-$1\").toLowerCase().replace(Ra,\"-ms-\");A=Wa[A]=cb}v+=H+A+\":\";H=k;x=null==y||\"boolean\"===typeof y||\"\"===y?\"\":x||\"number\"!==typeof y||0===y||Y.hasOwnProperty(H)&&Y[H]?(\"\"+y).trim():y+\"px\";v+=x;H=\";\"}}n=v||null}k=null;C?Za.hasOwnProperty(w)||\n(k=w,k=sa(k)&&null!=n?k+'=\"'+(O(n)+'\"'):\"\"):k=ya(w,n);k&&(G+=\" \"+k)}}e||L&&(G+=' data-reactroot=\"\"');var w=G;g=\"\";Na.hasOwnProperty(c)?w+=\"/>\":(w+=\">\",g=\"</\"+a.type+\">\");a:{e=d.dangerouslySetInnerHTML;if(null!=e){if(null!=e.__html){e=e.__html;break a}}else if(e=d.children,\"string\"===typeof e||\"number\"===typeof e){e=O(e);break a}e=null}null!=e?(d=[],Ta.hasOwnProperty(c)&&\"\\n\"===e.charAt(0)&&(w+=\"\\n\"),w+=e):d=Z(d.children);a=a.type;f=null==f||\"http://www.w3.org/1999/xhtml\"===f?Ma(a):\"http://www.w3.org/2000/svg\"===\nf&&\"foreignObject\"===a?\"http://www.w3.org/1999/xhtml\":f;this.stack.push({domNamespace:f,type:c,children:d,childIndex:0,context:b,footer:g});this.previousWasTextNode=!1;return w};return a}();exports.renderToNodeStream=function(){throw Error(p(207));};exports.renderToStaticMarkup=function(a,b){a=new bb(a,!0,b);try{return a.read(Infinity)}finally{a.destroy()}};exports.renderToStaticNodeStream=function(){throw Error(p(208));};exports.renderToString=function(a,b){a=new bb(a,!1,b);try{return a.read(Infinity)}finally{a.destroy()}};\nexports.version=\"17.0.1\";\n","'use strict';\n\nif (\"development\" === 'production') {\n  module.exports = require('./cjs/react-dom-server.browser.production.min.js');\n} else {\n  module.exports = require('./cjs/react-dom-server.browser.development.js');\n}\n","/** @license React v16.13.1\n * react-is.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function() {\n'use strict';\n\n// The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n// nor polyfill, then a plain number is used for performance.\nvar hasSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;\nvar REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;\nvar REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;\nvar REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;\nvar REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;\nvar REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;\nvar REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary\n// (unstable) APIs that have been removed. Can we remove the symbols?\n\nvar REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;\nvar REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;\nvar REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;\nvar REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;\nvar REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;\nvar REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;\nvar REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;\nvar REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;\nvar REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;\nvar REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;\nvar REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;\n\nfunction isValidElementType(type) {\n  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.\n  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);\n}\n\nfunction typeOf(object) {\n  if (typeof object === 'object' && object !== null) {\n    var $$typeof = object.$$typeof;\n\n    switch ($$typeof) {\n      case REACT_ELEMENT_TYPE:\n        var type = object.type;\n\n        switch (type) {\n          case REACT_ASYNC_MODE_TYPE:\n          case REACT_CONCURRENT_MODE_TYPE:\n          case REACT_FRAGMENT_TYPE:\n          case REACT_PROFILER_TYPE:\n          case REACT_STRICT_MODE_TYPE:\n          case REACT_SUSPENSE_TYPE:\n            return type;\n\n          default:\n            var $$typeofType = type && type.$$typeof;\n\n            switch ($$typeofType) {\n              case REACT_CONTEXT_TYPE:\n              case REACT_FORWARD_REF_TYPE:\n              case REACT_LAZY_TYPE:\n              case REACT_MEMO_TYPE:\n              case REACT_PROVIDER_TYPE:\n                return $$typeofType;\n\n              default:\n                return $$typeof;\n            }\n\n        }\n\n      case REACT_PORTAL_TYPE:\n        return $$typeof;\n    }\n  }\n\n  return undefined;\n} // AsyncMode is deprecated along with isAsyncMode\n\nvar AsyncMode = REACT_ASYNC_MODE_TYPE;\nvar ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;\nvar ContextConsumer = REACT_CONTEXT_TYPE;\nvar ContextProvider = REACT_PROVIDER_TYPE;\nvar Element = REACT_ELEMENT_TYPE;\nvar ForwardRef = REACT_FORWARD_REF_TYPE;\nvar Fragment = REACT_FRAGMENT_TYPE;\nvar Lazy = REACT_LAZY_TYPE;\nvar Memo = REACT_MEMO_TYPE;\nvar Portal = REACT_PORTAL_TYPE;\nvar Profiler = REACT_PROFILER_TYPE;\nvar StrictMode = REACT_STRICT_MODE_TYPE;\nvar Suspense = REACT_SUSPENSE_TYPE;\nvar hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated\n\nfunction isAsyncMode(object) {\n  {\n    if (!hasWarnedAboutDeprecatedIsAsyncMode) {\n      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint\n\n      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');\n    }\n  }\n\n  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;\n}\nfunction isConcurrentMode(object) {\n  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;\n}\nfunction isContextConsumer(object) {\n  return typeOf(object) === REACT_CONTEXT_TYPE;\n}\nfunction isContextProvider(object) {\n  return typeOf(object) === REACT_PROVIDER_TYPE;\n}\nfunction isElement(object) {\n  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n}\nfunction isForwardRef(object) {\n  return typeOf(object) === REACT_FORWARD_REF_TYPE;\n}\nfunction isFragment(object) {\n  return typeOf(object) === REACT_FRAGMENT_TYPE;\n}\nfunction isLazy(object) {\n  return typeOf(object) === REACT_LAZY_TYPE;\n}\nfunction isMemo(object) {\n  return typeOf(object) === REACT_MEMO_TYPE;\n}\nfunction isPortal(object) {\n  return typeOf(object) === REACT_PORTAL_TYPE;\n}\nfunction isProfiler(object) {\n  return typeOf(object) === REACT_PROFILER_TYPE;\n}\nfunction isStrictMode(object) {\n  return typeOf(object) === REACT_STRICT_MODE_TYPE;\n}\nfunction isSuspense(object) {\n  return typeOf(object) === REACT_SUSPENSE_TYPE;\n}\n\nexports.AsyncMode = AsyncMode;\nexports.ConcurrentMode = ConcurrentMode;\nexports.ContextConsumer = ContextConsumer;\nexports.ContextProvider = ContextProvider;\nexports.Element = Element;\nexports.ForwardRef = ForwardRef;\nexports.Fragment = Fragment;\nexports.Lazy = Lazy;\nexports.Memo = Memo;\nexports.Portal = Portal;\nexports.Profiler = Profiler;\nexports.StrictMode = StrictMode;\nexports.Suspense = Suspense;\nexports.isAsyncMode = isAsyncMode;\nexports.isConcurrentMode = isConcurrentMode;\nexports.isContextConsumer = isContextConsumer;\nexports.isContextProvider = isContextProvider;\nexports.isElement = isElement;\nexports.isForwardRef = isForwardRef;\nexports.isFragment = isFragment;\nexports.isLazy = isLazy;\nexports.isMemo = isMemo;\nexports.isPortal = isPortal;\nexports.isProfiler = isProfiler;\nexports.isStrictMode = isStrictMode;\nexports.isSuspense = isSuspense;\nexports.isValidElementType = isValidElementType;\nexports.typeOf = typeOf;\n  })();\n}\n","/** @license React v16.13.1\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';var b=\"function\"===typeof Symbol&&Symbol.for,c=b?Symbol.for(\"react.element\"):60103,d=b?Symbol.for(\"react.portal\"):60106,e=b?Symbol.for(\"react.fragment\"):60107,f=b?Symbol.for(\"react.strict_mode\"):60108,g=b?Symbol.for(\"react.profiler\"):60114,h=b?Symbol.for(\"react.provider\"):60109,k=b?Symbol.for(\"react.context\"):60110,l=b?Symbol.for(\"react.async_mode\"):60111,m=b?Symbol.for(\"react.concurrent_mode\"):60111,n=b?Symbol.for(\"react.forward_ref\"):60112,p=b?Symbol.for(\"react.suspense\"):60113,q=b?\nSymbol.for(\"react.suspense_list\"):60120,r=b?Symbol.for(\"react.memo\"):60115,t=b?Symbol.for(\"react.lazy\"):60116,v=b?Symbol.for(\"react.block\"):60121,w=b?Symbol.for(\"react.fundamental\"):60117,x=b?Symbol.for(\"react.responder\"):60118,y=b?Symbol.for(\"react.scope\"):60119;\nfunction z(a){if(\"object\"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}exports.AsyncMode=l;exports.ConcurrentMode=m;exports.ContextConsumer=k;exports.ContextProvider=h;exports.Element=c;exports.ForwardRef=n;exports.Fragment=e;exports.Lazy=t;exports.Memo=r;exports.Portal=d;\nexports.Profiler=g;exports.StrictMode=f;exports.Suspense=p;exports.isAsyncMode=function(a){return A(a)||z(a)===l};exports.isConcurrentMode=A;exports.isContextConsumer=function(a){return z(a)===k};exports.isContextProvider=function(a){return z(a)===h};exports.isElement=function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===c};exports.isForwardRef=function(a){return z(a)===n};exports.isFragment=function(a){return z(a)===e};exports.isLazy=function(a){return z(a)===t};\nexports.isMemo=function(a){return z(a)===r};exports.isPortal=function(a){return z(a)===d};exports.isProfiler=function(a){return z(a)===g};exports.isStrictMode=function(a){return z(a)===f};exports.isSuspense=function(a){return z(a)===p};\nexports.isValidElementType=function(a){return\"string\"===typeof a||\"function\"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||\"object\"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};exports.typeOf=z;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}\n","'use strict';\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar reactRouter = require('react-router');\nvar React = _interopDefault(require('react'));\nvar history = require('history');\nvar PropTypes = _interopDefault(require('prop-types'));\nvar warning = _interopDefault(require('tiny-warning'));\nvar invariant = _interopDefault(require('tiny-invariant'));\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\n/**\n * The public API for a <Router> that uses HTML5 history.\n */\n\nvar BrowserRouter =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(BrowserRouter, _React$Component);\n\n  function BrowserRouter() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.history = history.createBrowserHistory(_this.props);\n    return _this;\n  }\n\n  var _proto = BrowserRouter.prototype;\n\n  _proto.render = function render() {\n    return React.createElement(reactRouter.Router, {\n      history: this.history,\n      children: this.props.children\n    });\n  };\n\n  return BrowserRouter;\n}(React.Component);\n\n{\n  BrowserRouter.propTypes = {\n    basename: PropTypes.string,\n    children: PropTypes.node,\n    forceRefresh: PropTypes.bool,\n    getUserConfirmation: PropTypes.func,\n    keyLength: PropTypes.number\n  };\n\n  BrowserRouter.prototype.componentDidMount = function () {\n     warning(!this.props.history, \"<BrowserRouter> ignores the history prop. To use a custom history, \" + \"use `import { Router }` instead of `import { BrowserRouter as Router }`.\") ;\n  };\n}\n\n/**\n * The public API for a <Router> that uses window.location.hash.\n */\n\nvar HashRouter =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(HashRouter, _React$Component);\n\n  function HashRouter() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.history = history.createHashHistory(_this.props);\n    return _this;\n  }\n\n  var _proto = HashRouter.prototype;\n\n  _proto.render = function render() {\n    return React.createElement(reactRouter.Router, {\n      history: this.history,\n      children: this.props.children\n    });\n  };\n\n  return HashRouter;\n}(React.Component);\n\n{\n  HashRouter.propTypes = {\n    basename: PropTypes.string,\n    children: PropTypes.node,\n    getUserConfirmation: PropTypes.func,\n    hashType: PropTypes.oneOf([\"hashbang\", \"noslash\", \"slash\"])\n  };\n\n  HashRouter.prototype.componentDidMount = function () {\n     warning(!this.props.history, \"<HashRouter> ignores the history prop. To use a custom history, \" + \"use `import { Router }` instead of `import { HashRouter as Router }`.\") ;\n  };\n}\n\nvar resolveToLocation = function resolveToLocation(to, currentLocation) {\n  return typeof to === \"function\" ? to(currentLocation) : to;\n};\nvar normalizeToLocation = function normalizeToLocation(to, currentLocation) {\n  return typeof to === \"string\" ? history.createLocation(to, null, null, currentLocation) : to;\n};\n\nvar forwardRefShim = function forwardRefShim(C) {\n  return C;\n};\n\nvar forwardRef = React.forwardRef;\n\nif (typeof forwardRef === \"undefined\") {\n  forwardRef = forwardRefShim;\n}\n\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nvar LinkAnchor = forwardRef(function (_ref, forwardedRef) {\n  var innerRef = _ref.innerRef,\n      navigate = _ref.navigate,\n      _onClick = _ref.onClick,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"innerRef\", \"navigate\", \"onClick\"]);\n\n  var target = rest.target;\n\n  var props = _extends({}, rest, {\n    onClick: function onClick(event) {\n      try {\n        if (_onClick) _onClick(event);\n      } catch (ex) {\n        event.preventDefault();\n        throw ex;\n      }\n\n      if (!event.defaultPrevented && // onClick prevented default\n      event.button === 0 && ( // ignore everything but left clicks\n      !target || target === \"_self\") && // let browser handle \"target=_blank\" etc.\n      !isModifiedEvent(event) // ignore clicks with modifier keys\n      ) {\n          event.preventDefault();\n          navigate();\n        }\n    }\n  }); // React 15 compat\n\n\n  if (forwardRefShim !== forwardRef) {\n    props.ref = forwardedRef || innerRef;\n  } else {\n    props.ref = innerRef;\n  }\n  /* eslint-disable-next-line jsx-a11y/anchor-has-content */\n\n\n  return React.createElement(\"a\", props);\n});\n\n{\n  LinkAnchor.displayName = \"LinkAnchor\";\n}\n/**\n * The public API for rendering a history-aware <a>.\n */\n\n\nvar Link = forwardRef(function (_ref2, forwardedRef) {\n  var _ref2$component = _ref2.component,\n      component = _ref2$component === void 0 ? LinkAnchor : _ref2$component,\n      replace = _ref2.replace,\n      to = _ref2.to,\n      innerRef = _ref2.innerRef,\n      rest = _objectWithoutPropertiesLoose(_ref2, [\"component\", \"replace\", \"to\", \"innerRef\"]);\n\n  return React.createElement(reactRouter.__RouterContext.Consumer, null, function (context) {\n    !context ?  invariant(false, \"You should not use <Link> outside a <Router>\")  : void 0;\n    var history = context.history;\n    var location = normalizeToLocation(resolveToLocation(to, context.location), context.location);\n    var href = location ? history.createHref(location) : \"\";\n\n    var props = _extends({}, rest, {\n      href: href,\n      navigate: function navigate() {\n        var location = resolveToLocation(to, context.location);\n        var method = replace ? history.replace : history.push;\n        method(location);\n      }\n    }); // React 15 compat\n\n\n    if (forwardRefShim !== forwardRef) {\n      props.ref = forwardedRef || innerRef;\n    } else {\n      props.innerRef = innerRef;\n    }\n\n    return React.createElement(component, props);\n  });\n});\n\n{\n  var toType = PropTypes.oneOfType([PropTypes.string, PropTypes.object, PropTypes.func]);\n  var refType = PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.shape({\n    current: PropTypes.any\n  })]);\n  Link.displayName = \"Link\";\n  Link.propTypes = {\n    innerRef: refType,\n    onClick: PropTypes.func,\n    replace: PropTypes.bool,\n    target: PropTypes.string,\n    to: toType.isRequired\n  };\n}\n\nvar forwardRefShim$1 = function forwardRefShim(C) {\n  return C;\n};\n\nvar forwardRef$1 = React.forwardRef;\n\nif (typeof forwardRef$1 === \"undefined\") {\n  forwardRef$1 = forwardRefShim$1;\n}\n\nfunction joinClassnames() {\n  for (var _len = arguments.length, classnames = new Array(_len), _key = 0; _key < _len; _key++) {\n    classnames[_key] = arguments[_key];\n  }\n\n  return classnames.filter(function (i) {\n    return i;\n  }).join(\" \");\n}\n/**\n * A <Link> wrapper that knows if it's \"active\" or not.\n */\n\n\nvar NavLink = forwardRef$1(function (_ref, forwardedRef) {\n  var _ref$ariaCurrent = _ref[\"aria-current\"],\n      ariaCurrent = _ref$ariaCurrent === void 0 ? \"page\" : _ref$ariaCurrent,\n      _ref$activeClassName = _ref.activeClassName,\n      activeClassName = _ref$activeClassName === void 0 ? \"active\" : _ref$activeClassName,\n      activeStyle = _ref.activeStyle,\n      classNameProp = _ref.className,\n      exact = _ref.exact,\n      isActiveProp = _ref.isActive,\n      locationProp = _ref.location,\n      sensitive = _ref.sensitive,\n      strict = _ref.strict,\n      styleProp = _ref.style,\n      to = _ref.to,\n      innerRef = _ref.innerRef,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"aria-current\", \"activeClassName\", \"activeStyle\", \"className\", \"exact\", \"isActive\", \"location\", \"sensitive\", \"strict\", \"style\", \"to\", \"innerRef\"]);\n\n  return React.createElement(reactRouter.__RouterContext.Consumer, null, function (context) {\n    !context ?  invariant(false, \"You should not use <NavLink> outside a <Router>\")  : void 0;\n    var currentLocation = locationProp || context.location;\n    var toLocation = normalizeToLocation(resolveToLocation(to, currentLocation), currentLocation);\n    var path = toLocation.pathname; // Regex taken from: https://github.com/pillarjs/path-to-regexp/blob/master/index.js#L202\n\n    var escapedPath = path && path.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, \"\\\\$1\");\n    var match = escapedPath ? reactRouter.matchPath(currentLocation.pathname, {\n      path: escapedPath,\n      exact: exact,\n      sensitive: sensitive,\n      strict: strict\n    }) : null;\n    var isActive = !!(isActiveProp ? isActiveProp(match, currentLocation) : match);\n    var className = isActive ? joinClassnames(classNameProp, activeClassName) : classNameProp;\n    var style = isActive ? _extends({}, styleProp, {}, activeStyle) : styleProp;\n\n    var props = _extends({\n      \"aria-current\": isActive && ariaCurrent || null,\n      className: className,\n      style: style,\n      to: toLocation\n    }, rest); // React 15 compat\n\n\n    if (forwardRefShim$1 !== forwardRef$1) {\n      props.ref = forwardedRef || innerRef;\n    } else {\n      props.innerRef = innerRef;\n    }\n\n    return React.createElement(Link, props);\n  });\n});\n\n{\n  NavLink.displayName = \"NavLink\";\n  var ariaCurrentType = PropTypes.oneOf([\"page\", \"step\", \"location\", \"date\", \"time\", \"true\"]);\n  NavLink.propTypes = _extends({}, Link.propTypes, {\n    \"aria-current\": ariaCurrentType,\n    activeClassName: PropTypes.string,\n    activeStyle: PropTypes.object,\n    className: PropTypes.string,\n    exact: PropTypes.bool,\n    isActive: PropTypes.func,\n    location: PropTypes.object,\n    sensitive: PropTypes.bool,\n    strict: PropTypes.bool,\n    style: PropTypes.object\n  });\n}\n\nObject.defineProperty(exports, 'MemoryRouter', {\n  enumerable: true,\n  get: function () {\n    return reactRouter.MemoryRouter;\n  }\n});\nObject.defineProperty(exports, 'Prompt', {\n  enumerable: true,\n  get: function () {\n    return reactRouter.Prompt;\n  }\n});\nObject.defineProperty(exports, 'Redirect', {\n  enumerable: true,\n  get: function () {\n    return reactRouter.Redirect;\n  }\n});\nObject.defineProperty(exports, 'Route', {\n  enumerable: true,\n  get: function () {\n    return reactRouter.Route;\n  }\n});\nObject.defineProperty(exports, 'Router', {\n  enumerable: true,\n  get: function () {\n    return reactRouter.Router;\n  }\n});\nObject.defineProperty(exports, 'StaticRouter', {\n  enumerable: true,\n  get: function () {\n    return reactRouter.StaticRouter;\n  }\n});\nObject.defineProperty(exports, 'Switch', {\n  enumerable: true,\n  get: function () {\n    return reactRouter.Switch;\n  }\n});\nObject.defineProperty(exports, 'generatePath', {\n  enumerable: true,\n  get: function () {\n    return reactRouter.generatePath;\n  }\n});\nObject.defineProperty(exports, 'matchPath', {\n  enumerable: true,\n  get: function () {\n    return reactRouter.matchPath;\n  }\n});\nObject.defineProperty(exports, 'useHistory', {\n  enumerable: true,\n  get: function () {\n    return reactRouter.useHistory;\n  }\n});\nObject.defineProperty(exports, 'useLocation', {\n  enumerable: true,\n  get: function () {\n    return reactRouter.useLocation;\n  }\n});\nObject.defineProperty(exports, 'useParams', {\n  enumerable: true,\n  get: function () {\n    return reactRouter.useParams;\n  }\n});\nObject.defineProperty(exports, 'useRouteMatch', {\n  enumerable: true,\n  get: function () {\n    return reactRouter.useRouteMatch;\n  }\n});\nObject.defineProperty(exports, 'withRouter', {\n  enumerable: true,\n  get: function () {\n    return reactRouter.withRouter;\n  }\n});\nexports.BrowserRouter = BrowserRouter;\nexports.HashRouter = HashRouter;\nexports.Link = Link;\nexports.NavLink = NavLink;\n//# sourceMappingURL=react-router-dom.js.map\n","\"use strict\";function _interopDefault(e){return e&&\"object\"==typeof e&&\"default\"in e?e.default:e}Object.defineProperty(exports,\"__esModule\",{value:!0});var reactRouter=require(\"react-router\"),React=_interopDefault(require(\"react\")),history=require(\"history\");require(\"prop-types\"),require(\"tiny-warning\");var invariant=_interopDefault(require(\"tiny-invariant\"));function _extends(){return(_extends=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var o in r)Object.prototype.hasOwnProperty.call(r,o)&&(e[o]=r[o])}return e}).apply(this,arguments)}function _inheritsLoose(e,t){e.prototype=Object.create(t.prototype),(e.prototype.constructor=e).__proto__=t}function _objectWithoutPropertiesLoose(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],0<=t.indexOf(r)||(n[r]=e[r]);return n}var BrowserRouter=function(n){function e(){for(var e,t=arguments.length,r=new Array(t),o=0;o<t;o++)r[o]=arguments[o];return(e=n.call.apply(n,[this].concat(r))||this).history=history.createBrowserHistory(e.props),e}return _inheritsLoose(e,n),e.prototype.render=function(){return React.createElement(reactRouter.Router,{history:this.history,children:this.props.children})},e}(React.Component),HashRouter=function(n){function e(){for(var e,t=arguments.length,r=new Array(t),o=0;o<t;o++)r[o]=arguments[o];return(e=n.call.apply(n,[this].concat(r))||this).history=history.createHashHistory(e.props),e}return _inheritsLoose(e,n),e.prototype.render=function(){return React.createElement(reactRouter.Router,{history:this.history,children:this.props.children})},e}(React.Component),resolveToLocation=function(e,t){return\"function\"==typeof e?e(t):e},normalizeToLocation=function(e,t){return\"string\"==typeof e?history.createLocation(e,null,null,t):e},forwardRefShim=function(e){return e},forwardRef=React.forwardRef;function isModifiedEvent(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}void 0===forwardRef&&(forwardRef=forwardRefShim);var LinkAnchor=forwardRef(function(e,t){var r=e.innerRef,o=e.navigate,n=e.onClick,a=_objectWithoutPropertiesLoose(e,[\"innerRef\",\"navigate\",\"onClick\"]),i=a.target,c=_extends({},a,{onClick:function(t){try{n&&n(t)}catch(e){throw t.preventDefault(),e}t.defaultPrevented||0!==t.button||i&&\"_self\"!==i||isModifiedEvent(t)||(t.preventDefault(),o())}});return c.ref=forwardRefShim!==forwardRef&&t||r,React.createElement(\"a\",c)}),Link=forwardRef(function(e,a){var t=e.component,i=void 0===t?LinkAnchor:t,c=e.replace,u=e.to,s=e.innerRef,f=_objectWithoutPropertiesLoose(e,[\"component\",\"replace\",\"to\",\"innerRef\"]);return React.createElement(reactRouter.__RouterContext.Consumer,null,function(t){t||invariant(!1);var r=t.history,e=normalizeToLocation(resolveToLocation(u,t.location),t.location),o=e?r.createHref(e):\"\",n=_extends({},f,{href:o,navigate:function(){var e=resolveToLocation(u,t.location);(c?r.replace:r.push)(e)}});return forwardRefShim!==forwardRef?n.ref=a||s:n.innerRef=s,React.createElement(i,n)})}),forwardRefShim$1=function(e){return e},forwardRef$1=React.forwardRef;function joinClassnames(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return t.filter(function(e){return e}).join(\" \")}void 0===forwardRef$1&&(forwardRef$1=forwardRefShim$1);var NavLink=forwardRef$1(function(e,f){var t=e[\"aria-current\"],l=void 0===t?\"page\":t,r=e.activeClassName,p=void 0===r?\"active\":r,R=e.activeStyle,h=e.className,d=e.exact,y=e.isActive,m=e.location,v=e.sensitive,b=e.strict,w=e.style,x=e.to,g=e.innerRef,P=_objectWithoutPropertiesLoose(e,[\"aria-current\",\"activeClassName\",\"activeStyle\",\"className\",\"exact\",\"isActive\",\"location\",\"sensitive\",\"strict\",\"style\",\"to\",\"innerRef\"]);return React.createElement(reactRouter.__RouterContext.Consumer,null,function(e){e||invariant(!1);var t=m||e.location,r=normalizeToLocation(resolveToLocation(x,t),t),o=r.pathname,n=o&&o.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g,\"\\\\$1\"),a=n?reactRouter.matchPath(t.pathname,{path:n,exact:d,sensitive:v,strict:b}):null,i=!!(y?y(a,t):a),c=i?joinClassnames(h,p):h,u=i?_extends({},w,{},R):w,s=_extends({\"aria-current\":i&&l||null,className:c,style:u,to:r},P);return forwardRefShim$1!==forwardRef$1?s.ref=f||g:s.innerRef=g,React.createElement(Link,s)})});Object.defineProperty(exports,\"MemoryRouter\",{enumerable:!0,get:function(){return reactRouter.MemoryRouter}}),Object.defineProperty(exports,\"Prompt\",{enumerable:!0,get:function(){return reactRouter.Prompt}}),Object.defineProperty(exports,\"Redirect\",{enumerable:!0,get:function(){return reactRouter.Redirect}}),Object.defineProperty(exports,\"Route\",{enumerable:!0,get:function(){return reactRouter.Route}}),Object.defineProperty(exports,\"Router\",{enumerable:!0,get:function(){return reactRouter.Router}}),Object.defineProperty(exports,\"StaticRouter\",{enumerable:!0,get:function(){return reactRouter.StaticRouter}}),Object.defineProperty(exports,\"Switch\",{enumerable:!0,get:function(){return reactRouter.Switch}}),Object.defineProperty(exports,\"generatePath\",{enumerable:!0,get:function(){return reactRouter.generatePath}}),Object.defineProperty(exports,\"matchPath\",{enumerable:!0,get:function(){return reactRouter.matchPath}}),Object.defineProperty(exports,\"useHistory\",{enumerable:!0,get:function(){return reactRouter.useHistory}}),Object.defineProperty(exports,\"useLocation\",{enumerable:!0,get:function(){return reactRouter.useLocation}}),Object.defineProperty(exports,\"useParams\",{enumerable:!0,get:function(){return reactRouter.useParams}}),Object.defineProperty(exports,\"useRouteMatch\",{enumerable:!0,get:function(){return reactRouter.useRouteMatch}}),Object.defineProperty(exports,\"withRouter\",{enumerable:!0,get:function(){return reactRouter.withRouter}}),exports.BrowserRouter=BrowserRouter,exports.HashRouter=HashRouter,exports.Link=Link,exports.NavLink=NavLink;\n//# sourceMappingURL=react-router-dom.min.js.map\n","\"use strict\";\n\nif (\"development\" === \"production\") {\n  module.exports = require(\"./cjs/react-router-dom.min.js\");\n} else {\n  module.exports = require(\"./cjs/react-router-dom.js\");\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar printWarning = function() {};\n\nif (\"development\" !== 'production') {\n  var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n  var loggedTypeFailures = {};\n  var has = Function.call.bind(Object.prototype.hasOwnProperty);\n\n  printWarning = function(text) {\n    var message = 'Warning: ' + text;\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n}\n\n/**\n * Assert that the values match with the type specs.\n * Error messages are memorized and will only be shown once.\n *\n * @param {object} typeSpecs Map of name to a ReactPropType\n * @param {object} values Runtime values that need to be type-checked\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @param {string} componentName Name of the component for error messages.\n * @param {?Function} getStack Returns the component stack.\n * @private\n */\nfunction checkPropTypes(typeSpecs, values, location, componentName, getStack) {\n  if (\"development\" !== 'production') {\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error;\n        // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            var err = Error(\n              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +\n              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'\n            );\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);\n        } catch (ex) {\n          error = ex;\n        }\n        if (error && !(error instanceof Error)) {\n          printWarning(\n            (componentName || 'React class') + ': type specification of ' +\n            location + ' `' + typeSpecName + '` is invalid; the type checker ' +\n            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +\n            'You may have forgotten to pass an argument to the type checker ' +\n            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +\n            'shape all require an argument).'\n          );\n        }\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error.message] = true;\n\n          var stack = getStack ? getStack() : '';\n\n          printWarning(\n            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')\n          );\n        }\n      }\n    }\n  }\n}\n\n/**\n * Resets warning cache when testing.\n *\n * @private\n */\ncheckPropTypes.resetWarningCache = function() {\n  if (\"development\" !== 'production') {\n    loggedTypeFailures = {};\n  }\n}\n\nmodule.exports = checkPropTypes;\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactIs = require('react-is');\nvar assign = require('object-assign');\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\nvar checkPropTypes = require('./checkPropTypes');\n\nvar has = Function.call.bind(Object.prototype.hasOwnProperty);\nvar printWarning = function() {};\n\nif (\"development\" !== 'production') {\n  printWarning = function(text) {\n    var message = 'Warning: ' + text;\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n}\n\nfunction emptyFunctionThatReturnsNull() {\n  return null;\n}\n\nmodule.exports = function(isValidElement, throwOnDirectAccess) {\n  /* global Symbol */\n  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\n  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.\n\n  /**\n   * Returns the iterator method function contained on the iterable object.\n   *\n   * Be sure to invoke the function with the iterable as context:\n   *\n   *     var iteratorFn = getIteratorFn(myIterable);\n   *     if (iteratorFn) {\n   *       var iterator = iteratorFn.call(myIterable);\n   *       ...\n   *     }\n   *\n   * @param {?object} maybeIterable\n   * @return {?function}\n   */\n  function getIteratorFn(maybeIterable) {\n    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);\n    if (typeof iteratorFn === 'function') {\n      return iteratorFn;\n    }\n  }\n\n  /**\n   * Collection of methods that allow declaration and validation of props that are\n   * supplied to React components. Example usage:\n   *\n   *   var Props = require('ReactPropTypes');\n   *   var MyArticle = React.createClass({\n   *     propTypes: {\n   *       // An optional string prop named \"description\".\n   *       description: Props.string,\n   *\n   *       // A required enum prop named \"category\".\n   *       category: Props.oneOf(['News','Photos']).isRequired,\n   *\n   *       // A prop named \"dialog\" that requires an instance of Dialog.\n   *       dialog: Props.instanceOf(Dialog).isRequired\n   *     },\n   *     render: function() { ... }\n   *   });\n   *\n   * A more formal specification of how these methods are used:\n   *\n   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)\n   *   decl := ReactPropTypes.{type}(.isRequired)?\n   *\n   * Each and every declaration produces a function with the same signature. This\n   * allows the creation of custom validation functions. For example:\n   *\n   *  var MyLink = React.createClass({\n   *    propTypes: {\n   *      // An optional string or URI prop named \"href\".\n   *      href: function(props, propName, componentName) {\n   *        var propValue = props[propName];\n   *        if (propValue != null && typeof propValue !== 'string' &&\n   *            !(propValue instanceof URI)) {\n   *          return new Error(\n   *            'Expected a string or an URI for ' + propName + ' in ' +\n   *            componentName\n   *          );\n   *        }\n   *      }\n   *    },\n   *    render: function() {...}\n   *  });\n   *\n   * @internal\n   */\n\n  var ANONYMOUS = '<<anonymous>>';\n\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.\n  var ReactPropTypes = {\n    array: createPrimitiveTypeChecker('array'),\n    bool: createPrimitiveTypeChecker('boolean'),\n    func: createPrimitiveTypeChecker('function'),\n    number: createPrimitiveTypeChecker('number'),\n    object: createPrimitiveTypeChecker('object'),\n    string: createPrimitiveTypeChecker('string'),\n    symbol: createPrimitiveTypeChecker('symbol'),\n\n    any: createAnyTypeChecker(),\n    arrayOf: createArrayOfTypeChecker,\n    element: createElementTypeChecker(),\n    elementType: createElementTypeTypeChecker(),\n    instanceOf: createInstanceTypeChecker,\n    node: createNodeChecker(),\n    objectOf: createObjectOfTypeChecker,\n    oneOf: createEnumTypeChecker,\n    oneOfType: createUnionTypeChecker,\n    shape: createShapeTypeChecker,\n    exact: createStrictShapeTypeChecker,\n  };\n\n  /**\n   * inlined Object.is polyfill to avoid requiring consumers ship their own\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n   */\n  /*eslint-disable no-self-compare*/\n  function is(x, y) {\n    // SameValue algorithm\n    if (x === y) {\n      // Steps 1-5, 7-10\n      // Steps 6.b-6.e: +0 != -0\n      return x !== 0 || 1 / x === 1 / y;\n    } else {\n      // Step 6.a: NaN == NaN\n      return x !== x && y !== y;\n    }\n  }\n  /*eslint-enable no-self-compare*/\n\n  /**\n   * We use an Error-like object for backward compatibility as people may call\n   * PropTypes directly and inspect their output. However, we don't use real\n   * Errors anymore. We don't inspect their stack anyway, and creating them\n   * is prohibitively expensive if they are created too often, such as what\n   * happens in oneOfType() for any type before the one that matched.\n   */\n  function PropTypeError(message) {\n    this.message = message;\n    this.stack = '';\n  }\n  // Make `instanceof Error` still work for returned errors.\n  PropTypeError.prototype = Error.prototype;\n\n  function createChainableTypeChecker(validate) {\n    if (\"development\" !== 'production') {\n      var manualPropTypeCallCache = {};\n      var manualPropTypeWarningCount = 0;\n    }\n    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {\n      componentName = componentName || ANONYMOUS;\n      propFullName = propFullName || propName;\n\n      if (secret !== ReactPropTypesSecret) {\n        if (throwOnDirectAccess) {\n          // New behavior only for users of `prop-types` package\n          var err = new Error(\n            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n            'Use `PropTypes.checkPropTypes()` to call them. ' +\n            'Read more at http://fb.me/use-check-prop-types'\n          );\n          err.name = 'Invariant Violation';\n          throw err;\n        } else if (\"development\" !== 'production' && typeof console !== 'undefined') {\n          // Old behavior for people using React.PropTypes\n          var cacheKey = componentName + ':' + propName;\n          if (\n            !manualPropTypeCallCache[cacheKey] &&\n            // Avoid spamming the console because they are often not actionable except for lib authors\n            manualPropTypeWarningCount < 3\n          ) {\n            printWarning(\n              'You are manually calling a React.PropTypes validation ' +\n              'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +\n              'and will throw in the standalone `prop-types` package. ' +\n              'You may be seeing this warning due to a third-party PropTypes ' +\n              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'\n            );\n            manualPropTypeCallCache[cacheKey] = true;\n            manualPropTypeWarningCount++;\n          }\n        }\n      }\n      if (props[propName] == null) {\n        if (isRequired) {\n          if (props[propName] === null) {\n            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));\n          }\n          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));\n        }\n        return null;\n      } else {\n        return validate(props, propName, componentName, location, propFullName);\n      }\n    }\n\n    var chainedCheckType = checkType.bind(null, false);\n    chainedCheckType.isRequired = checkType.bind(null, true);\n\n    return chainedCheckType;\n  }\n\n  function createPrimitiveTypeChecker(expectedType) {\n    function validate(props, propName, componentName, location, propFullName, secret) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== expectedType) {\n        // `propValue` being instance of, say, date/regexp, pass the 'object'\n        // check, but we can offer a more precise error message here rather than\n        // 'of type `object`'.\n        var preciseType = getPreciseType(propValue);\n\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createAnyTypeChecker() {\n    return createChainableTypeChecker(emptyFunctionThatReturnsNull);\n  }\n\n  function createArrayOfTypeChecker(typeChecker) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (typeof typeChecker !== 'function') {\n        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');\n      }\n      var propValue = props[propName];\n      if (!Array.isArray(propValue)) {\n        var propType = getPropType(propValue);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));\n      }\n      for (var i = 0; i < propValue.length; i++) {\n        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);\n        if (error instanceof Error) {\n          return error;\n        }\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createElementTypeChecker() {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      if (!isValidElement(propValue)) {\n        var propType = getPropType(propValue);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createElementTypeTypeChecker() {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      if (!ReactIs.isValidElementType(propValue)) {\n        var propType = getPropType(propValue);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createInstanceTypeChecker(expectedClass) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (!(props[propName] instanceof expectedClass)) {\n        var expectedClassName = expectedClass.name || ANONYMOUS;\n        var actualClassName = getClassName(props[propName]);\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createEnumTypeChecker(expectedValues) {\n    if (!Array.isArray(expectedValues)) {\n      if (\"development\" !== 'production') {\n        if (arguments.length > 1) {\n          printWarning(\n            'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +\n            'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'\n          );\n        } else {\n          printWarning('Invalid argument supplied to oneOf, expected an array.');\n        }\n      }\n      return emptyFunctionThatReturnsNull;\n    }\n\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      for (var i = 0; i < expectedValues.length; i++) {\n        if (is(propValue, expectedValues[i])) {\n          return null;\n        }\n      }\n\n      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {\n        var type = getPreciseType(value);\n        if (type === 'symbol') {\n          return String(value);\n        }\n        return value;\n      });\n      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createObjectOfTypeChecker(typeChecker) {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (typeof typeChecker !== 'function') {\n        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');\n      }\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));\n      }\n      for (var key in propValue) {\n        if (has(propValue, key)) {\n          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n          if (error instanceof Error) {\n            return error;\n          }\n        }\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createUnionTypeChecker(arrayOfTypeCheckers) {\n    if (!Array.isArray(arrayOfTypeCheckers)) {\n      \"development\" !== 'production' ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;\n      return emptyFunctionThatReturnsNull;\n    }\n\n    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n      var checker = arrayOfTypeCheckers[i];\n      if (typeof checker !== 'function') {\n        printWarning(\n          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +\n          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'\n        );\n        return emptyFunctionThatReturnsNull;\n      }\n    }\n\n    function validate(props, propName, componentName, location, propFullName) {\n      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {\n        var checker = arrayOfTypeCheckers[i];\n        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {\n          return null;\n        }\n      }\n\n      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createNodeChecker() {\n    function validate(props, propName, componentName, location, propFullName) {\n      if (!isNode(props[propName])) {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createShapeTypeChecker(shapeTypes) {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n      }\n      for (var key in shapeTypes) {\n        var checker = shapeTypes[key];\n        if (!checker) {\n          continue;\n        }\n        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n        if (error) {\n          return error;\n        }\n      }\n      return null;\n    }\n    return createChainableTypeChecker(validate);\n  }\n\n  function createStrictShapeTypeChecker(shapeTypes) {\n    function validate(props, propName, componentName, location, propFullName) {\n      var propValue = props[propName];\n      var propType = getPropType(propValue);\n      if (propType !== 'object') {\n        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));\n      }\n      // We need to check all keys in case some are required but missing from\n      // props.\n      var allKeys = assign({}, props[propName], shapeTypes);\n      for (var key in allKeys) {\n        var checker = shapeTypes[key];\n        if (!checker) {\n          return new PropTypeError(\n            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +\n            '\\nBad object: ' + JSON.stringify(props[propName], null, '  ') +\n            '\\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')\n          );\n        }\n        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);\n        if (error) {\n          return error;\n        }\n      }\n      return null;\n    }\n\n    return createChainableTypeChecker(validate);\n  }\n\n  function isNode(propValue) {\n    switch (typeof propValue) {\n      case 'number':\n      case 'string':\n      case 'undefined':\n        return true;\n      case 'boolean':\n        return !propValue;\n      case 'object':\n        if (Array.isArray(propValue)) {\n          return propValue.every(isNode);\n        }\n        if (propValue === null || isValidElement(propValue)) {\n          return true;\n        }\n\n        var iteratorFn = getIteratorFn(propValue);\n        if (iteratorFn) {\n          var iterator = iteratorFn.call(propValue);\n          var step;\n          if (iteratorFn !== propValue.entries) {\n            while (!(step = iterator.next()).done) {\n              if (!isNode(step.value)) {\n                return false;\n              }\n            }\n          } else {\n            // Iterator will provide entry [k,v] tuples rather than values.\n            while (!(step = iterator.next()).done) {\n              var entry = step.value;\n              if (entry) {\n                if (!isNode(entry[1])) {\n                  return false;\n                }\n              }\n            }\n          }\n        } else {\n          return false;\n        }\n\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  function isSymbol(propType, propValue) {\n    // Native Symbol.\n    if (propType === 'symbol') {\n      return true;\n    }\n\n    // falsy value can't be a Symbol\n    if (!propValue) {\n      return false;\n    }\n\n    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'\n    if (propValue['@@toStringTag'] === 'Symbol') {\n      return true;\n    }\n\n    // Fallback for non-spec compliant Symbols which are polyfilled.\n    if (typeof Symbol === 'function' && propValue instanceof Symbol) {\n      return true;\n    }\n\n    return false;\n  }\n\n  // Equivalent of `typeof` but with special handling for array and regexp.\n  function getPropType(propValue) {\n    var propType = typeof propValue;\n    if (Array.isArray(propValue)) {\n      return 'array';\n    }\n    if (propValue instanceof RegExp) {\n      // Old webkits (at least until Android 4.0) return 'function' rather than\n      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/\n      // passes PropTypes.object.\n      return 'object';\n    }\n    if (isSymbol(propType, propValue)) {\n      return 'symbol';\n    }\n    return propType;\n  }\n\n  // This handles more types than `getPropType`. Only used for error messages.\n  // See `createPrimitiveTypeChecker`.\n  function getPreciseType(propValue) {\n    if (typeof propValue === 'undefined' || propValue === null) {\n      return '' + propValue;\n    }\n    var propType = getPropType(propValue);\n    if (propType === 'object') {\n      if (propValue instanceof Date) {\n        return 'date';\n      } else if (propValue instanceof RegExp) {\n        return 'regexp';\n      }\n    }\n    return propType;\n  }\n\n  // Returns a string that is postfixed to a warning about an invalid type.\n  // For example, \"undefined\" or \"of type array\"\n  function getPostfixForTypeWarning(value) {\n    var type = getPreciseType(value);\n    switch (type) {\n      case 'array':\n      case 'object':\n        return 'an ' + type;\n      case 'boolean':\n      case 'date':\n      case 'regexp':\n        return 'a ' + type;\n      default:\n        return type;\n    }\n  }\n\n  // Returns class name of the object, if any.\n  function getClassName(propValue) {\n    if (!propValue.constructor || !propValue.constructor.name) {\n      return ANONYMOUS;\n    }\n    return propValue.constructor.name;\n  }\n\n  ReactPropTypes.checkPropTypes = checkPropTypes;\n  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (\"development\" !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.route = exports.match = exports.history = exports.location = void 0;\nvar PropTypes = __importStar(require(\"prop-types\"));\nexports.location = PropTypes.shape({\n    hash: PropTypes.string.isRequired,\n    key: PropTypes.string,\n    pathname: PropTypes.string.isRequired,\n    search: PropTypes.string.isRequired,\n    state: PropTypes.oneOfType([\n        PropTypes.array,\n        PropTypes.bool,\n        PropTypes.number,\n        PropTypes.object,\n        PropTypes.string,\n    ]),\n});\nexports.history = PropTypes.shape({\n    action: PropTypes.oneOf(['PUSH', 'REPLACE', 'POP']).isRequired,\n    block: PropTypes.func.isRequired,\n    createHref: PropTypes.func.isRequired,\n    go: PropTypes.func.isRequired,\n    goBack: PropTypes.func,\n    goForward: PropTypes.func,\n    back: PropTypes.func,\n    forward: PropTypes.func,\n    index: PropTypes.number,\n    length: PropTypes.number,\n    listen: PropTypes.func.isRequired,\n    location: exports.location.isRequired,\n    push: PropTypes.func.isRequired,\n    replace: PropTypes.func.isRequired,\n});\nexports.match = PropTypes.shape({\n    isExact: PropTypes.bool,\n    params: PropTypes.object.isRequired,\n    path: PropTypes.string.isRequired,\n    url: PropTypes.string.isRequired,\n});\nvar routeShape = {\n    path: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.arrayOf(PropTypes.string),\n    ]),\n    exact: PropTypes.bool,\n    strict: PropTypes.bool,\n    sensitive: PropTypes.bool,\n    component: PropTypes.func,\n};\nrouteShape.routes = PropTypes.arrayOf(PropTypes.shape(routeShape));\nexports.route = PropTypes.shape(routeShape);\nexports.default = {\n    location: exports.location,\n    history: exports.history,\n    match: exports.match,\n    route: exports.route,\n};\n","'use strict';\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar React = _interopDefault(require('react'));\nvar PropTypes = _interopDefault(require('prop-types'));\nvar history = require('history');\nvar warning = _interopDefault(require('tiny-warning'));\nvar createContext = _interopDefault(require('mini-create-react-context'));\nvar invariant = _interopDefault(require('tiny-invariant'));\nvar pathToRegexp = _interopDefault(require('path-to-regexp'));\nvar reactIs = require('react-is');\nvar hoistStatics = _interopDefault(require('hoist-non-react-statics'));\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\n// TODO: Replace with React.createContext once we can assume React 16+\n\nvar createNamedContext = function createNamedContext(name) {\n  var context = createContext();\n  context.displayName = name;\n  return context;\n};\n\nvar historyContext =\n/*#__PURE__*/\ncreateNamedContext(\"Router-History\");\n\n// TODO: Replace with React.createContext once we can assume React 16+\n\nvar createNamedContext$1 = function createNamedContext(name) {\n  var context = createContext();\n  context.displayName = name;\n  return context;\n};\n\nvar context =\n/*#__PURE__*/\ncreateNamedContext$1(\"Router\");\n\n/**\n * The public API for putting history on context.\n */\n\nvar Router =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Router, _React$Component);\n\n  Router.computeRootMatch = function computeRootMatch(pathname) {\n    return {\n      path: \"/\",\n      url: \"/\",\n      params: {},\n      isExact: pathname === \"/\"\n    };\n  };\n\n  function Router(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.state = {\n      location: props.history.location\n    }; // This is a bit of a hack. We have to start listening for location\n    // changes here in the constructor in case there are any <Redirect>s\n    // on the initial render. If there are, they will replace/push when\n    // they mount and since cDM fires in children before parents, we may\n    // get a new location before the <Router> is mounted.\n\n    _this._isMounted = false;\n    _this._pendingLocation = null;\n\n    if (!props.staticContext) {\n      _this.unlisten = props.history.listen(function (location) {\n        if (_this._isMounted) {\n          _this.setState({\n            location: location\n          });\n        } else {\n          _this._pendingLocation = location;\n        }\n      });\n    }\n\n    return _this;\n  }\n\n  var _proto = Router.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this._isMounted = true;\n\n    if (this._pendingLocation) {\n      this.setState({\n        location: this._pendingLocation\n      });\n    }\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    if (this.unlisten) this.unlisten();\n  };\n\n  _proto.render = function render() {\n    return React.createElement(context.Provider, {\n      value: {\n        history: this.props.history,\n        location: this.state.location,\n        match: Router.computeRootMatch(this.state.location.pathname),\n        staticContext: this.props.staticContext\n      }\n    }, React.createElement(historyContext.Provider, {\n      children: this.props.children || null,\n      value: this.props.history\n    }));\n  };\n\n  return Router;\n}(React.Component);\n\n{\n  Router.propTypes = {\n    children: PropTypes.node,\n    history: PropTypes.object.isRequired,\n    staticContext: PropTypes.object\n  };\n\n  Router.prototype.componentDidUpdate = function (prevProps) {\n     warning(prevProps.history === this.props.history, \"You cannot change <Router history>\") ;\n  };\n}\n\n/**\n * The public API for a <Router> that stores location in memory.\n */\n\nvar MemoryRouter =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(MemoryRouter, _React$Component);\n\n  function MemoryRouter() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.history = history.createMemoryHistory(_this.props);\n    return _this;\n  }\n\n  var _proto = MemoryRouter.prototype;\n\n  _proto.render = function render() {\n    return React.createElement(Router, {\n      history: this.history,\n      children: this.props.children\n    });\n  };\n\n  return MemoryRouter;\n}(React.Component);\n\n{\n  MemoryRouter.propTypes = {\n    initialEntries: PropTypes.array,\n    initialIndex: PropTypes.number,\n    getUserConfirmation: PropTypes.func,\n    keyLength: PropTypes.number,\n    children: PropTypes.node\n  };\n\n  MemoryRouter.prototype.componentDidMount = function () {\n     warning(!this.props.history, \"<MemoryRouter> ignores the history prop. To use a custom history, \" + \"use `import { Router }` instead of `import { MemoryRouter as Router }`.\") ;\n  };\n}\n\nvar Lifecycle =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Lifecycle, _React$Component);\n\n  function Lifecycle() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = Lifecycle.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    if (this.props.onMount) this.props.onMount.call(this, this);\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    if (this.props.onUpdate) this.props.onUpdate.call(this, this, prevProps);\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    if (this.props.onUnmount) this.props.onUnmount.call(this, this);\n  };\n\n  _proto.render = function render() {\n    return null;\n  };\n\n  return Lifecycle;\n}(React.Component);\n\n/**\n * The public API for prompting the user before navigating away from a screen.\n */\n\nfunction Prompt(_ref) {\n  var message = _ref.message,\n      _ref$when = _ref.when,\n      when = _ref$when === void 0 ? true : _ref$when;\n  return React.createElement(context.Consumer, null, function (context) {\n    !context ?  invariant(false, \"You should not use <Prompt> outside a <Router>\")  : void 0;\n    if (!when || context.staticContext) return null;\n    var method = context.history.block;\n    return React.createElement(Lifecycle, {\n      onMount: function onMount(self) {\n        self.release = method(message);\n      },\n      onUpdate: function onUpdate(self, prevProps) {\n        if (prevProps.message !== message) {\n          self.release();\n          self.release = method(message);\n        }\n      },\n      onUnmount: function onUnmount(self) {\n        self.release();\n      },\n      message: message\n    });\n  });\n}\n\n{\n  var messageType = PropTypes.oneOfType([PropTypes.func, PropTypes.string]);\n  Prompt.propTypes = {\n    when: PropTypes.bool,\n    message: messageType.isRequired\n  };\n}\n\nvar cache = {};\nvar cacheLimit = 10000;\nvar cacheCount = 0;\n\nfunction compilePath(path) {\n  if (cache[path]) return cache[path];\n  var generator = pathToRegexp.compile(path);\n\n  if (cacheCount < cacheLimit) {\n    cache[path] = generator;\n    cacheCount++;\n  }\n\n  return generator;\n}\n/**\n * Public API for generating a URL pathname from a path and parameters.\n */\n\n\nfunction generatePath(path, params) {\n  if (path === void 0) {\n    path = \"/\";\n  }\n\n  if (params === void 0) {\n    params = {};\n  }\n\n  return path === \"/\" ? path : compilePath(path)(params, {\n    pretty: true\n  });\n}\n\n/**\n * The public API for navigating programmatically with a component.\n */\n\nfunction Redirect(_ref) {\n  var computedMatch = _ref.computedMatch,\n      to = _ref.to,\n      _ref$push = _ref.push,\n      push = _ref$push === void 0 ? false : _ref$push;\n  return React.createElement(context.Consumer, null, function (context) {\n    !context ?  invariant(false, \"You should not use <Redirect> outside a <Router>\")  : void 0;\n    var history$1 = context.history,\n        staticContext = context.staticContext;\n    var method = push ? history$1.push : history$1.replace;\n    var location = history.createLocation(computedMatch ? typeof to === \"string\" ? generatePath(to, computedMatch.params) : _extends({}, to, {\n      pathname: generatePath(to.pathname, computedMatch.params)\n    }) : to); // When rendering in a static context,\n    // set the new location immediately.\n\n    if (staticContext) {\n      method(location);\n      return null;\n    }\n\n    return React.createElement(Lifecycle, {\n      onMount: function onMount() {\n        method(location);\n      },\n      onUpdate: function onUpdate(self, prevProps) {\n        var prevLocation = history.createLocation(prevProps.to);\n\n        if (!history.locationsAreEqual(prevLocation, _extends({}, location, {\n          key: prevLocation.key\n        }))) {\n          method(location);\n        }\n      },\n      to: to\n    });\n  });\n}\n\n{\n  Redirect.propTypes = {\n    push: PropTypes.bool,\n    from: PropTypes.string,\n    to: PropTypes.oneOfType([PropTypes.string, PropTypes.object]).isRequired\n  };\n}\n\nvar cache$1 = {};\nvar cacheLimit$1 = 10000;\nvar cacheCount$1 = 0;\n\nfunction compilePath$1(path, options) {\n  var cacheKey = \"\" + options.end + options.strict + options.sensitive;\n  var pathCache = cache$1[cacheKey] || (cache$1[cacheKey] = {});\n  if (pathCache[path]) return pathCache[path];\n  var keys = [];\n  var regexp = pathToRegexp(path, keys, options);\n  var result = {\n    regexp: regexp,\n    keys: keys\n  };\n\n  if (cacheCount$1 < cacheLimit$1) {\n    pathCache[path] = result;\n    cacheCount$1++;\n  }\n\n  return result;\n}\n/**\n * Public API for matching a URL pathname to a path.\n */\n\n\nfunction matchPath(pathname, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (typeof options === \"string\" || Array.isArray(options)) {\n    options = {\n      path: options\n    };\n  }\n\n  var _options = options,\n      path = _options.path,\n      _options$exact = _options.exact,\n      exact = _options$exact === void 0 ? false : _options$exact,\n      _options$strict = _options.strict,\n      strict = _options$strict === void 0 ? false : _options$strict,\n      _options$sensitive = _options.sensitive,\n      sensitive = _options$sensitive === void 0 ? false : _options$sensitive;\n  var paths = [].concat(path);\n  return paths.reduce(function (matched, path) {\n    if (!path && path !== \"\") return null;\n    if (matched) return matched;\n\n    var _compilePath = compilePath$1(path, {\n      end: exact,\n      strict: strict,\n      sensitive: sensitive\n    }),\n        regexp = _compilePath.regexp,\n        keys = _compilePath.keys;\n\n    var match = regexp.exec(pathname);\n    if (!match) return null;\n    var url = match[0],\n        values = match.slice(1);\n    var isExact = pathname === url;\n    if (exact && !isExact) return null;\n    return {\n      path: path,\n      // the path used to match\n      url: path === \"/\" && url === \"\" ? \"/\" : url,\n      // the matched portion of the URL\n      isExact: isExact,\n      // whether or not we matched exactly\n      params: keys.reduce(function (memo, key, index) {\n        memo[key.name] = values[index];\n        return memo;\n      }, {})\n    };\n  }, null);\n}\n\nfunction isEmptyChildren(children) {\n  return React.Children.count(children) === 0;\n}\n\nfunction evalChildrenDev(children, props, path) {\n  var value = children(props);\n   warning(value !== undefined, \"You returned `undefined` from the `children` function of \" + (\"<Route\" + (path ? \" path=\\\"\" + path + \"\\\"\" : \"\") + \">, but you \") + \"should have returned a React element or `null`\") ;\n  return value || null;\n}\n/**\n * The public API for matching a single path and rendering.\n */\n\n\nvar Route =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Route, _React$Component);\n\n  function Route() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = Route.prototype;\n\n  _proto.render = function render() {\n    var _this = this;\n\n    return React.createElement(context.Consumer, null, function (context$1) {\n      !context$1 ?  invariant(false, \"You should not use <Route> outside a <Router>\")  : void 0;\n      var location = _this.props.location || context$1.location;\n      var match = _this.props.computedMatch ? _this.props.computedMatch // <Switch> already computed the match for us\n      : _this.props.path ? matchPath(location.pathname, _this.props) : context$1.match;\n\n      var props = _extends({}, context$1, {\n        location: location,\n        match: match\n      });\n\n      var _this$props = _this.props,\n          children = _this$props.children,\n          component = _this$props.component,\n          render = _this$props.render; // Preact uses an empty array as children by\n      // default, so use null if that's the case.\n\n      if (Array.isArray(children) && children.length === 0) {\n        children = null;\n      }\n\n      return React.createElement(context.Provider, {\n        value: props\n      }, props.match ? children ? typeof children === \"function\" ?  evalChildrenDev(children, props, _this.props.path)  : children : component ? React.createElement(component, props) : render ? render(props) : null : typeof children === \"function\" ?  evalChildrenDev(children, props, _this.props.path)  : null);\n    });\n  };\n\n  return Route;\n}(React.Component);\n\n{\n  Route.propTypes = {\n    children: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),\n    component: function component(props, propName) {\n      if (props[propName] && !reactIs.isValidElementType(props[propName])) {\n        return new Error(\"Invalid prop 'component' supplied to 'Route': the prop is not a valid React component\");\n      }\n    },\n    exact: PropTypes.bool,\n    location: PropTypes.object,\n    path: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n    render: PropTypes.func,\n    sensitive: PropTypes.bool,\n    strict: PropTypes.bool\n  };\n\n  Route.prototype.componentDidMount = function () {\n     warning(!(this.props.children && !isEmptyChildren(this.props.children) && this.props.component), \"You should not use <Route component> and <Route children> in the same route; <Route component> will be ignored\") ;\n     warning(!(this.props.children && !isEmptyChildren(this.props.children) && this.props.render), \"You should not use <Route render> and <Route children> in the same route; <Route render> will be ignored\") ;\n     warning(!(this.props.component && this.props.render), \"You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored\") ;\n  };\n\n  Route.prototype.componentDidUpdate = function (prevProps) {\n     warning(!(this.props.location && !prevProps.location), '<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no \"location\" prop and then provided one on a subsequent render.') ;\n     warning(!(!this.props.location && prevProps.location), '<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a \"location\" prop initially but omitted it on a subsequent render.') ;\n  };\n}\n\nfunction addLeadingSlash(path) {\n  return path.charAt(0) === \"/\" ? path : \"/\" + path;\n}\n\nfunction addBasename(basename, location) {\n  if (!basename) return location;\n  return _extends({}, location, {\n    pathname: addLeadingSlash(basename) + location.pathname\n  });\n}\n\nfunction stripBasename(basename, location) {\n  if (!basename) return location;\n  var base = addLeadingSlash(basename);\n  if (location.pathname.indexOf(base) !== 0) return location;\n  return _extends({}, location, {\n    pathname: location.pathname.substr(base.length)\n  });\n}\n\nfunction createURL(location) {\n  return typeof location === \"string\" ? location : history.createPath(location);\n}\n\nfunction staticHandler(methodName) {\n  return function () {\n      invariant(false, \"You cannot %s with <StaticRouter>\", methodName)  ;\n  };\n}\n\nfunction noop() {}\n/**\n * The public top-level API for a \"static\" <Router>, so-called because it\n * can't actually change the current location. Instead, it just records\n * location changes in a context object. Useful mainly in testing and\n * server-rendering scenarios.\n */\n\n\nvar StaticRouter =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(StaticRouter, _React$Component);\n\n  function StaticRouter() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n\n    _this.handlePush = function (location) {\n      return _this.navigateTo(location, \"PUSH\");\n    };\n\n    _this.handleReplace = function (location) {\n      return _this.navigateTo(location, \"REPLACE\");\n    };\n\n    _this.handleListen = function () {\n      return noop;\n    };\n\n    _this.handleBlock = function () {\n      return noop;\n    };\n\n    return _this;\n  }\n\n  var _proto = StaticRouter.prototype;\n\n  _proto.navigateTo = function navigateTo(location, action) {\n    var _this$props = this.props,\n        _this$props$basename = _this$props.basename,\n        basename = _this$props$basename === void 0 ? \"\" : _this$props$basename,\n        _this$props$context = _this$props.context,\n        context = _this$props$context === void 0 ? {} : _this$props$context;\n    context.action = action;\n    context.location = addBasename(basename, history.createLocation(location));\n    context.url = createURL(context.location);\n  };\n\n  _proto.render = function render() {\n    var _this$props2 = this.props,\n        _this$props2$basename = _this$props2.basename,\n        basename = _this$props2$basename === void 0 ? \"\" : _this$props2$basename,\n        _this$props2$context = _this$props2.context,\n        context = _this$props2$context === void 0 ? {} : _this$props2$context,\n        _this$props2$location = _this$props2.location,\n        location = _this$props2$location === void 0 ? \"/\" : _this$props2$location,\n        rest = _objectWithoutPropertiesLoose(_this$props2, [\"basename\", \"context\", \"location\"]);\n\n    var history$1 = {\n      createHref: function createHref(path) {\n        return addLeadingSlash(basename + createURL(path));\n      },\n      action: \"POP\",\n      location: stripBasename(basename, history.createLocation(location)),\n      push: this.handlePush,\n      replace: this.handleReplace,\n      go: staticHandler(\"go\"),\n      goBack: staticHandler(\"goBack\"),\n      goForward: staticHandler(\"goForward\"),\n      listen: this.handleListen,\n      block: this.handleBlock\n    };\n    return React.createElement(Router, _extends({}, rest, {\n      history: history$1,\n      staticContext: context\n    }));\n  };\n\n  return StaticRouter;\n}(React.Component);\n\n{\n  StaticRouter.propTypes = {\n    basename: PropTypes.string,\n    context: PropTypes.object,\n    location: PropTypes.oneOfType([PropTypes.string, PropTypes.object])\n  };\n\n  StaticRouter.prototype.componentDidMount = function () {\n     warning(!this.props.history, \"<StaticRouter> ignores the history prop. To use a custom history, \" + \"use `import { Router }` instead of `import { StaticRouter as Router }`.\") ;\n  };\n}\n\n/**\n * The public API for rendering the first <Route> that matches.\n */\n\nvar Switch =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Switch, _React$Component);\n\n  function Switch() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = Switch.prototype;\n\n  _proto.render = function render() {\n    var _this = this;\n\n    return React.createElement(context.Consumer, null, function (context) {\n      !context ?  invariant(false, \"You should not use <Switch> outside a <Router>\")  : void 0;\n      var location = _this.props.location || context.location;\n      var element, match; // We use React.Children.forEach instead of React.Children.toArray().find()\n      // here because toArray adds keys to all child elements and we do not want\n      // to trigger an unmount/remount for two <Route>s that render the same\n      // component at different URLs.\n\n      React.Children.forEach(_this.props.children, function (child) {\n        if (match == null && React.isValidElement(child)) {\n          element = child;\n          var path = child.props.path || child.props.from;\n          match = path ? matchPath(location.pathname, _extends({}, child.props, {\n            path: path\n          })) : context.match;\n        }\n      });\n      return match ? React.cloneElement(element, {\n        location: location,\n        computedMatch: match\n      }) : null;\n    });\n  };\n\n  return Switch;\n}(React.Component);\n\n{\n  Switch.propTypes = {\n    children: PropTypes.node,\n    location: PropTypes.object\n  };\n\n  Switch.prototype.componentDidUpdate = function (prevProps) {\n     warning(!(this.props.location && !prevProps.location), '<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no \"location\" prop and then provided one on a subsequent render.') ;\n     warning(!(!this.props.location && prevProps.location), '<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a \"location\" prop initially but omitted it on a subsequent render.') ;\n  };\n}\n\n/**\n * A public higher-order component to access the imperative API\n */\n\nfunction withRouter(Component) {\n  var displayName = \"withRouter(\" + (Component.displayName || Component.name) + \")\";\n\n  var C = function C(props) {\n    var wrappedComponentRef = props.wrappedComponentRef,\n        remainingProps = _objectWithoutPropertiesLoose(props, [\"wrappedComponentRef\"]);\n\n    return React.createElement(context.Consumer, null, function (context) {\n      !context ?  invariant(false, \"You should not use <\" + displayName + \" /> outside a <Router>\")  : void 0;\n      return React.createElement(Component, _extends({}, remainingProps, context, {\n        ref: wrappedComponentRef\n      }));\n    });\n  };\n\n  C.displayName = displayName;\n  C.WrappedComponent = Component;\n\n  {\n    C.propTypes = {\n      wrappedComponentRef: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.object])\n    };\n  }\n\n  return hoistStatics(C, Component);\n}\n\nvar useContext = React.useContext;\nfunction useHistory() {\n  {\n    !(typeof useContext === \"function\") ?  invariant(false, \"You must use React >= 16.8 in order to use useHistory()\")  : void 0;\n  }\n\n  return useContext(historyContext);\n}\nfunction useLocation() {\n  {\n    !(typeof useContext === \"function\") ?  invariant(false, \"You must use React >= 16.8 in order to use useLocation()\")  : void 0;\n  }\n\n  return useContext(context).location;\n}\nfunction useParams() {\n  {\n    !(typeof useContext === \"function\") ?  invariant(false, \"You must use React >= 16.8 in order to use useParams()\")  : void 0;\n  }\n\n  var match = useContext(context).match;\n  return match ? match.params : {};\n}\nfunction useRouteMatch(path) {\n  {\n    !(typeof useContext === \"function\") ?  invariant(false, \"You must use React >= 16.8 in order to use useRouteMatch()\")  : void 0;\n  }\n\n  var location = useLocation();\n  var match = useContext(context).match;\n  return path ? matchPath(location.pathname, path) : match;\n}\n\n{\n  if (typeof window !== \"undefined\") {\n    var global = window;\n    var key = \"__react_router_build__\";\n    var buildNames = {\n      cjs: \"CommonJS\",\n      esm: \"ES modules\",\n      umd: \"UMD\"\n    };\n\n    if (global[key] && global[key] !== \"cjs\") {\n      var initialBuildName = buildNames[global[key]];\n      var secondaryBuildName = buildNames[\"cjs\"]; // TODO: Add link to article that explains in detail how to avoid\n      // loading 2 different builds.\n\n      throw new Error(\"You are loading the \" + secondaryBuildName + \" build of React Router \" + (\"on a page that is already running the \" + initialBuildName + \" \") + \"build, so things won't work right.\");\n    }\n\n    global[key] = \"cjs\";\n  }\n}\n\nexports.MemoryRouter = MemoryRouter;\nexports.Prompt = Prompt;\nexports.Redirect = Redirect;\nexports.Route = Route;\nexports.Router = Router;\nexports.StaticRouter = StaticRouter;\nexports.Switch = Switch;\nexports.__HistoryContext = historyContext;\nexports.__RouterContext = context;\nexports.generatePath = generatePath;\nexports.matchPath = matchPath;\nexports.useHistory = useHistory;\nexports.useLocation = useLocation;\nexports.useParams = useParams;\nexports.useRouteMatch = useRouteMatch;\nexports.withRouter = withRouter;\n//# sourceMappingURL=react-router.js.map\n","\"use strict\";function _interopDefault(t){return t&&\"object\"==typeof t&&\"default\"in t?t.default:t}Object.defineProperty(exports,\"__esModule\",{value:!0});var React=_interopDefault(require(\"react\"));require(\"prop-types\");var history=require(\"history\");require(\"tiny-warning\");var createContext=_interopDefault(require(\"mini-create-react-context\")),invariant=_interopDefault(require(\"tiny-invariant\")),pathToRegexp=_interopDefault(require(\"path-to-regexp\"));require(\"react-is\");var hoistStatics=_interopDefault(require(\"hoist-non-react-statics\"));function _extends(){return(_extends=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o])}return t}).apply(this,arguments)}function _inheritsLoose(t,e){t.prototype=Object.create(e.prototype),(t.prototype.constructor=t).__proto__=e}function _objectWithoutPropertiesLoose(t,e){if(null==t)return{};var n,o,r={},a=Object.keys(t);for(o=0;o<a.length;o++)n=a[o],0<=e.indexOf(n)||(r[n]=t[n]);return r}var createNamedContext=function(t){var e=createContext();return e.displayName=t,e},historyContext=createNamedContext(\"Router-History\"),createNamedContext$1=function(t){var e=createContext();return e.displayName=t,e},context=createNamedContext$1(\"Router\"),Router=function(n){function t(t){var e;return(e=n.call(this,t)||this).state={location:t.history.location},e._isMounted=!1,e._pendingLocation=null,t.staticContext||(e.unlisten=t.history.listen(function(t){e._isMounted?e.setState({location:t}):e._pendingLocation=t})),e}_inheritsLoose(t,n),t.computeRootMatch=function(t){return{path:\"/\",url:\"/\",params:{},isExact:\"/\"===t}};var e=t.prototype;return e.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},e.componentWillUnmount=function(){this.unlisten&&this.unlisten()},e.render=function(){return React.createElement(context.Provider,{value:{history:this.props.history,location:this.state.location,match:t.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}},React.createElement(historyContext.Provider,{children:this.props.children||null,value:this.props.history}))},t}(React.Component),MemoryRouter=function(r){function t(){for(var t,e=arguments.length,n=new Array(e),o=0;o<e;o++)n[o]=arguments[o];return(t=r.call.apply(r,[this].concat(n))||this).history=history.createMemoryHistory(t.props),t}return _inheritsLoose(t,r),t.prototype.render=function(){return React.createElement(Router,{history:this.history,children:this.props.children})},t}(React.Component),Lifecycle=function(t){function e(){return t.apply(this,arguments)||this}_inheritsLoose(e,t);var n=e.prototype;return n.componentDidMount=function(){this.props.onMount&&this.props.onMount.call(this,this)},n.componentDidUpdate=function(t){this.props.onUpdate&&this.props.onUpdate.call(this,this,t)},n.componentWillUnmount=function(){this.props.onUnmount&&this.props.onUnmount.call(this,this)},n.render=function(){return null},e}(React.Component);function Prompt(t){var o=t.message,e=t.when,r=void 0===e||e;return React.createElement(context.Consumer,null,function(t){if(t||invariant(!1),!r||t.staticContext)return null;var n=t.history.block;return React.createElement(Lifecycle,{onMount:function(t){t.release=n(o)},onUpdate:function(t,e){e.message!==o&&(t.release(),t.release=n(o))},onUnmount:function(t){t.release()},message:o})})}var cache={},cacheLimit=1e4,cacheCount=0;function compilePath(t){if(cache[t])return cache[t];var e=pathToRegexp.compile(t);return cacheCount<cacheLimit&&(cache[t]=e,cacheCount++),e}function generatePath(t,e){return void 0===t&&(t=\"/\"),void 0===e&&(e={}),\"/\"===t?t:compilePath(t)(e,{pretty:!0})}function Redirect(t){var a=t.computedMatch,i=t.to,e=t.push,c=void 0!==e&&e;return React.createElement(context.Consumer,null,function(t){t||invariant(!1);var e=t.history,n=t.staticContext,o=c?e.push:e.replace,r=history.createLocation(a?\"string\"==typeof i?generatePath(i,a.params):_extends({},i,{pathname:generatePath(i.pathname,a.params)}):i);return n?(o(r),null):React.createElement(Lifecycle,{onMount:function(){o(r)},onUpdate:function(t,e){var n=history.createLocation(e.to);history.locationsAreEqual(n,_extends({},r,{key:n.key}))||o(r)},to:i})})}var cache$1={},cacheLimit$1=1e4,cacheCount$1=0;function compilePath$1(t,e){var n=\"\"+e.end+e.strict+e.sensitive,o=cache$1[n]||(cache$1[n]={});if(o[t])return o[t];var r=[],a={regexp:pathToRegexp(t,r,e),keys:r};return cacheCount$1<cacheLimit$1&&(o[t]=a,cacheCount$1++),a}function matchPath(u,t){void 0===t&&(t={}),\"string\"!=typeof t&&!Array.isArray(t)||(t={path:t});var e=t,n=e.path,o=e.exact,p=void 0!==o&&o,r=e.strict,h=void 0!==r&&r,a=e.sensitive,l=void 0!==a&&a;return[].concat(n).reduce(function(t,e){if(!e&&\"\"!==e)return null;if(t)return t;var n=compilePath$1(e,{end:p,strict:h,sensitive:l}),o=n.regexp,r=n.keys,a=o.exec(u);if(!a)return null;var i=a[0],c=a.slice(1),s=u===i;return p&&!s?null:{path:e,url:\"/\"===e&&\"\"===i?\"/\":i,isExact:s,params:r.reduce(function(t,e,n){return t[e.name]=c[n],t},{})}},null)}var Route=function(t){function e(){return t.apply(this,arguments)||this}return _inheritsLoose(e,t),e.prototype.render=function(){var c=this;return React.createElement(context.Consumer,null,function(t){t||invariant(!1);var e=c.props.location||t.location,n=_extends({},t,{location:e,match:c.props.computedMatch?c.props.computedMatch:c.props.path?matchPath(e.pathname,c.props):t.match}),o=c.props,r=o.children,a=o.component,i=o.render;return Array.isArray(r)&&0===r.length&&(r=null),React.createElement(context.Provider,{value:n},n.match?r?\"function\"==typeof r?r(n):r:a?React.createElement(a,n):i?i(n):null:\"function\"==typeof r?r(n):null)})},e}(React.Component);function addLeadingSlash(t){return\"/\"===t.charAt(0)?t:\"/\"+t}function addBasename(t,e){return t?_extends({},e,{pathname:addLeadingSlash(t)+e.pathname}):e}function stripBasename(t,e){if(!t)return e;var n=addLeadingSlash(t);return 0!==e.pathname.indexOf(n)?e:_extends({},e,{pathname:e.pathname.substr(n.length)})}function createURL(t){return\"string\"==typeof t?t:history.createPath(t)}function staticHandler(t){return function(){invariant(!1)}}function noop(){}var StaticRouter=function(r){function t(){for(var e,t=arguments.length,n=new Array(t),o=0;o<t;o++)n[o]=arguments[o];return(e=r.call.apply(r,[this].concat(n))||this).handlePush=function(t){return e.navigateTo(t,\"PUSH\")},e.handleReplace=function(t){return e.navigateTo(t,\"REPLACE\")},e.handleListen=function(){return noop},e.handleBlock=function(){return noop},e}_inheritsLoose(t,r);var e=t.prototype;return e.navigateTo=function(t,e){var n=this.props,o=n.basename,r=void 0===o?\"\":o,a=n.context,i=void 0===a?{}:a;i.action=e,i.location=addBasename(r,history.createLocation(t)),i.url=createURL(i.location)},e.render=function(){var t=this.props,e=t.basename,n=void 0===e?\"\":e,o=t.context,r=void 0===o?{}:o,a=t.location,i=void 0===a?\"/\":a,c=_objectWithoutPropertiesLoose(t,[\"basename\",\"context\",\"location\"]),s={createHref:function(t){return addLeadingSlash(n+createURL(t))},action:\"POP\",location:stripBasename(n,history.createLocation(i)),push:this.handlePush,replace:this.handleReplace,go:staticHandler(),goBack:staticHandler(),goForward:staticHandler(),listen:this.handleListen,block:this.handleBlock};return React.createElement(Router,_extends({},c,{history:s,staticContext:r}))},t}(React.Component),Switch=function(t){function e(){return t.apply(this,arguments)||this}return _inheritsLoose(e,t),e.prototype.render=function(){var t=this;return React.createElement(context.Consumer,null,function(n){n||invariant(!1);var o,r,a=t.props.location||n.location;return React.Children.forEach(t.props.children,function(t){if(null==r&&React.isValidElement(t)){var e=(o=t).props.path||t.props.from;r=e?matchPath(a.pathname,_extends({},t.props,{path:e})):n.match}}),r?React.cloneElement(o,{location:a,computedMatch:r}):null})},e}(React.Component);function withRouter(o){function t(t){var e=t.wrappedComponentRef,n=_objectWithoutPropertiesLoose(t,[\"wrappedComponentRef\"]);return React.createElement(context.Consumer,null,function(t){return t||invariant(!1),React.createElement(o,_extends({},n,t,{ref:e}))})}var e=\"withRouter(\"+(o.displayName||o.name)+\")\";return t.displayName=e,t.WrappedComponent=o,hoistStatics(t,o)}var useContext=React.useContext;function useHistory(){return useContext(historyContext)}function useLocation(){return useContext(context).location}function useParams(){var t=useContext(context).match;return t?t.params:{}}function useRouteMatch(t){var e=useLocation(),n=useContext(context).match;return t?matchPath(e.pathname,t):n}exports.MemoryRouter=MemoryRouter,exports.Prompt=Prompt,exports.Redirect=Redirect,exports.Route=Route,exports.Router=Router,exports.StaticRouter=StaticRouter,exports.Switch=Switch,exports.__HistoryContext=historyContext,exports.__RouterContext=context,exports.generatePath=generatePath,exports.matchPath=matchPath,exports.useHistory=useHistory,exports.useLocation=useLocation,exports.useParams=useParams,exports.useRouteMatch=useRouteMatch,exports.withRouter=withRouter;\n//# sourceMappingURL=react-router.min.js.map\n","\"use strict\";\n\nif (\"development\" === \"production\") {\n  module.exports = require(\"./cjs/react-router.min.js\");\n} else {\n  module.exports = require(\"./cjs/react-router.js\");\n}\n","'use strict';var React=require('react'),_inheritsLoose=require('@babel/runtime/helpers/inheritsLoose'),PropTypes=require('prop-types'),warning=require('tiny-warning');function _interopDefaultLegacy(e){return e&&typeof e==='object'&&'default'in e?e:{'default':e}}var React__default=/*#__PURE__*/_interopDefaultLegacy(React);var _inheritsLoose__default=/*#__PURE__*/_interopDefaultLegacy(_inheritsLoose);var PropTypes__default=/*#__PURE__*/_interopDefaultLegacy(PropTypes);var warning__default=/*#__PURE__*/_interopDefaultLegacy(warning);var MAX_SIGNED_31_BIT_INT = 1073741823;\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : {};\n\nfunction getUniqueId() {\n  var key = '__global_unique_id__';\n  return commonjsGlobal[key] = (commonjsGlobal[key] || 0) + 1;\n}\n\nfunction objectIs(x, y) {\n  if (x === y) {\n    return x !== 0 || 1 / x === 1 / y;\n  } else {\n    return x !== x && y !== y;\n  }\n}\n\nfunction createEventEmitter(value) {\n  var handlers = [];\n  return {\n    on: function on(handler) {\n      handlers.push(handler);\n    },\n    off: function off(handler) {\n      handlers = handlers.filter(function (h) {\n        return h !== handler;\n      });\n    },\n    get: function get() {\n      return value;\n    },\n    set: function set(newValue, changedBits) {\n      value = newValue;\n      handlers.forEach(function (handler) {\n        return handler(value, changedBits);\n      });\n    }\n  };\n}\n\nfunction onlyChild(children) {\n  return Array.isArray(children) ? children[0] : children;\n}\n\nfunction createReactContext(defaultValue, calculateChangedBits) {\n  var _Provider$childContex, _Consumer$contextType;\n\n  var contextProp = '__create-react-context-' + getUniqueId() + '__';\n\n  var Provider = /*#__PURE__*/function (_Component) {\n    _inheritsLoose__default['default'](Provider, _Component);\n\n    function Provider() {\n      var _this;\n\n      _this = _Component.apply(this, arguments) || this;\n      _this.emitter = createEventEmitter(_this.props.value);\n      return _this;\n    }\n\n    var _proto = Provider.prototype;\n\n    _proto.getChildContext = function getChildContext() {\n      var _ref;\n\n      return _ref = {}, _ref[contextProp] = this.emitter, _ref;\n    };\n\n    _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n      if (this.props.value !== nextProps.value) {\n        var oldValue = this.props.value;\n        var newValue = nextProps.value;\n        var changedBits;\n\n        if (objectIs(oldValue, newValue)) {\n          changedBits = 0;\n        } else {\n          changedBits = typeof calculateChangedBits === 'function' ? calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;\n\n          if (process.env.NODE_ENV !== 'production') {\n            warning__default['default']((changedBits & MAX_SIGNED_31_BIT_INT) === changedBits, 'calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: ' + changedBits);\n          }\n\n          changedBits |= 0;\n\n          if (changedBits !== 0) {\n            this.emitter.set(nextProps.value, changedBits);\n          }\n        }\n      }\n    };\n\n    _proto.render = function render() {\n      return this.props.children;\n    };\n\n    return Provider;\n  }(React.Component);\n\n  Provider.childContextTypes = (_Provider$childContex = {}, _Provider$childContex[contextProp] = PropTypes__default['default'].object.isRequired, _Provider$childContex);\n\n  var Consumer = /*#__PURE__*/function (_Component2) {\n    _inheritsLoose__default['default'](Consumer, _Component2);\n\n    function Consumer() {\n      var _this2;\n\n      _this2 = _Component2.apply(this, arguments) || this;\n      _this2.state = {\n        value: _this2.getValue()\n      };\n\n      _this2.onUpdate = function (newValue, changedBits) {\n        var observedBits = _this2.observedBits | 0;\n\n        if ((observedBits & changedBits) !== 0) {\n          _this2.setState({\n            value: _this2.getValue()\n          });\n        }\n      };\n\n      return _this2;\n    }\n\n    var _proto2 = Consumer.prototype;\n\n    _proto2.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {\n      var observedBits = nextProps.observedBits;\n      this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;\n    };\n\n    _proto2.componentDidMount = function componentDidMount() {\n      if (this.context[contextProp]) {\n        this.context[contextProp].on(this.onUpdate);\n      }\n\n      var observedBits = this.props.observedBits;\n      this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;\n    };\n\n    _proto2.componentWillUnmount = function componentWillUnmount() {\n      if (this.context[contextProp]) {\n        this.context[contextProp].off(this.onUpdate);\n      }\n    };\n\n    _proto2.getValue = function getValue() {\n      if (this.context[contextProp]) {\n        return this.context[contextProp].get();\n      } else {\n        return defaultValue;\n      }\n    };\n\n    _proto2.render = function render() {\n      return onlyChild(this.props.children)(this.state.value);\n    };\n\n    return Consumer;\n  }(React.Component);\n\n  Consumer.contextTypes = (_Consumer$contextType = {}, _Consumer$contextType[contextProp] = PropTypes__default['default'].object, _Consumer$contextType);\n  return {\n    Provider: Provider,\n    Consumer: Consumer\n  };\n}var index = React__default['default'].createContext || createReactContext;module.exports=index;","/** @license React v17.0.1\n * react.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nif (\"development\" !== \"production\") {\n  (function() {\n'use strict';\n\nvar _assign = require('object-assign');\n\n// TODO: this is special because it gets imported during build.\nvar ReactVersion = '17.0.1';\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n// nor polyfill, then a plain number is used for performance.\nvar REACT_ELEMENT_TYPE = 0xeac7;\nvar REACT_PORTAL_TYPE = 0xeaca;\nexports.Fragment = 0xeacb;\nexports.StrictMode = 0xeacc;\nexports.Profiler = 0xead2;\nvar REACT_PROVIDER_TYPE = 0xeacd;\nvar REACT_CONTEXT_TYPE = 0xeace;\nvar REACT_FORWARD_REF_TYPE = 0xead0;\nexports.Suspense = 0xead1;\nvar REACT_SUSPENSE_LIST_TYPE = 0xead8;\nvar REACT_MEMO_TYPE = 0xead3;\nvar REACT_LAZY_TYPE = 0xead4;\nvar REACT_BLOCK_TYPE = 0xead9;\nvar REACT_SERVER_BLOCK_TYPE = 0xeada;\nvar REACT_FUNDAMENTAL_TYPE = 0xead5;\nvar REACT_SCOPE_TYPE = 0xead7;\nvar REACT_OPAQUE_ID_TYPE = 0xeae0;\nvar REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;\nvar REACT_OFFSCREEN_TYPE = 0xeae2;\nvar REACT_LEGACY_HIDDEN_TYPE = 0xeae3;\n\nif (typeof Symbol === 'function' && Symbol.for) {\n  var symbolFor = Symbol.for;\n  REACT_ELEMENT_TYPE = symbolFor('react.element');\n  REACT_PORTAL_TYPE = symbolFor('react.portal');\n  exports.Fragment = symbolFor('react.fragment');\n  exports.StrictMode = symbolFor('react.strict_mode');\n  exports.Profiler = symbolFor('react.profiler');\n  REACT_PROVIDER_TYPE = symbolFor('react.provider');\n  REACT_CONTEXT_TYPE = symbolFor('react.context');\n  REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');\n  exports.Suspense = symbolFor('react.suspense');\n  REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');\n  REACT_MEMO_TYPE = symbolFor('react.memo');\n  REACT_LAZY_TYPE = symbolFor('react.lazy');\n  REACT_BLOCK_TYPE = symbolFor('react.block');\n  REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');\n  REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');\n  REACT_SCOPE_TYPE = symbolFor('react.scope');\n  REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');\n  REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');\n  REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');\n  REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');\n}\n\nvar MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\n/**\n * Keeps track of the current dispatcher.\n */\nvar ReactCurrentDispatcher = {\n  /**\n   * @internal\n   * @type {ReactComponent}\n   */\n  current: null\n};\n\n/**\n * Keeps track of the current batch's configuration such as how long an update\n * should suspend for if it needs to.\n */\nvar ReactCurrentBatchConfig = {\n  transition: 0\n};\n\n/**\n * Keeps track of the current owner.\n *\n * The current owner is the component who should own any components that are\n * currently being constructed.\n */\nvar ReactCurrentOwner = {\n  /**\n   * @internal\n   * @type {ReactComponent}\n   */\n  current: null\n};\n\nvar ReactDebugCurrentFrame = {};\nvar currentExtraStackFrame = null;\nfunction setExtraStackFrame(stack) {\n  {\n    currentExtraStackFrame = stack;\n  }\n}\n\n{\n  ReactDebugCurrentFrame.setExtraStackFrame = function (stack) {\n    {\n      currentExtraStackFrame = stack;\n    }\n  }; // Stack implementation injected by the current renderer.\n\n\n  ReactDebugCurrentFrame.getCurrentStack = null;\n\n  ReactDebugCurrentFrame.getStackAddendum = function () {\n    var stack = ''; // Add an extra top frame while an element is being validated\n\n    if (currentExtraStackFrame) {\n      stack += currentExtraStackFrame;\n    } // Delegate to the injected renderer-specific implementation\n\n\n    var impl = ReactDebugCurrentFrame.getCurrentStack;\n\n    if (impl) {\n      stack += impl() || '';\n    }\n\n    return stack;\n  };\n}\n\n/**\n * Used by act() to track whether you're inside an act() scope.\n */\nvar IsSomeRendererActing = {\n  current: false\n};\n\nvar ReactSharedInternals = {\n  ReactCurrentDispatcher: ReactCurrentDispatcher,\n  ReactCurrentBatchConfig: ReactCurrentBatchConfig,\n  ReactCurrentOwner: ReactCurrentOwner,\n  IsSomeRendererActing: IsSomeRendererActing,\n  // Used by renderers to avoid bundling object-assign twice in UMD bundles:\n  assign: _assign\n};\n\n{\n  ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;\n}\n\n// by calls to these methods by a Babel plugin.\n//\n// In PROD (or in packages without access to React internals),\n// they are left as they are instead.\n\nfunction warn(format) {\n  {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    printWarning('warn', format, args);\n  }\n}\nfunction error(format) {\n  {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    printWarning('error', format, args);\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    }\n\n    var argsWithFormat = args.map(function (item) {\n      return '' + item;\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\nvar didWarnStateUpdateForUnmountedComponent = {};\n\nfunction warnNoop(publicInstance, callerName) {\n  {\n    var _constructor = publicInstance.constructor;\n    var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';\n    var warningKey = componentName + \".\" + callerName;\n\n    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {\n      return;\n    }\n\n    error(\"Can't call %s on a component that is not yet mounted. \" + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);\n\n    didWarnStateUpdateForUnmountedComponent[warningKey] = true;\n  }\n}\n/**\n * This is the abstract API for an update queue.\n */\n\n\nvar ReactNoopUpdateQueue = {\n  /**\n   * Checks whether or not this composite component is mounted.\n   * @param {ReactClass} publicInstance The instance we want to test.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */\n  isMounted: function (publicInstance) {\n    return false;\n  },\n\n  /**\n   * Forces an update. This should only be invoked when it is known with\n   * certainty that we are **not** in a DOM transaction.\n   *\n   * You may want to call this when you know that some deeper aspect of the\n   * component's state has changed but `setState` was not called.\n   *\n   * This will not invoke `shouldComponentUpdate`, but it will invoke\n   * `componentWillUpdate` and `componentDidUpdate`.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} callerName name of the calling function in the public API.\n   * @internal\n   */\n  enqueueForceUpdate: function (publicInstance, callback, callerName) {\n    warnNoop(publicInstance, 'forceUpdate');\n  },\n\n  /**\n   * Replaces all of the state. Always use this or `setState` to mutate state.\n   * You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} completeState Next state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} callerName name of the calling function in the public API.\n   * @internal\n   */\n  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {\n    warnNoop(publicInstance, 'replaceState');\n  },\n\n  /**\n   * Sets a subset of the state. This only exists because _pendingState is\n   * internal. This provides a merging strategy that is not available to deep\n   * properties which is confusing. TODO: Expose pendingState or don't use it\n   * during the merge.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} partialState Next partial state to be merged with state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} Name of the calling function in the public API.\n   * @internal\n   */\n  enqueueSetState: function (publicInstance, partialState, callback, callerName) {\n    warnNoop(publicInstance, 'setState');\n  }\n};\n\nvar emptyObject = {};\n\n{\n  Object.freeze(emptyObject);\n}\n/**\n * Base class helpers for the updating state of a component.\n */\n\n\nfunction Component(props, context, updater) {\n  this.props = props;\n  this.context = context; // If a component has string refs, we will assign a different object later.\n\n  this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the\n  // renderer.\n\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\nComponent.prototype.isReactComponent = {};\n/**\n * Sets a subset of the state. Always use this to mutate\n * state. You should treat `this.state` as immutable.\n *\n * There is no guarantee that `this.state` will be immediately updated, so\n * accessing `this.state` after calling this method may return the old value.\n *\n * There is no guarantee that calls to `setState` will run synchronously,\n * as they may eventually be batched together.  You can provide an optional\n * callback that will be executed when the call to setState is actually\n * completed.\n *\n * When a function is provided to setState, it will be called at some point in\n * the future (not synchronously). It will be called with the up to date\n * component arguments (state, props, context). These values can be different\n * from this.* because your function may be called after receiveProps but before\n * shouldComponentUpdate, and this new state, props, and context will not yet be\n * assigned to this.\n *\n * @param {object|function} partialState Next partial state or function to\n *        produce next partial state to be merged with current state.\n * @param {?function} callback Called after state is updated.\n * @final\n * @protected\n */\n\nComponent.prototype.setState = function (partialState, callback) {\n  if (!(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null)) {\n    {\n      throw Error( \"setState(...): takes an object of state variables to update or a function which returns an object of state variables.\" );\n    }\n  }\n\n  this.updater.enqueueSetState(this, partialState, callback, 'setState');\n};\n/**\n * Forces an update. This should only be invoked when it is known with\n * certainty that we are **not** in a DOM transaction.\n *\n * You may want to call this when you know that some deeper aspect of the\n * component's state has changed but `setState` was not called.\n *\n * This will not invoke `shouldComponentUpdate`, but it will invoke\n * `componentWillUpdate` and `componentDidUpdate`.\n *\n * @param {?function} callback Called after update is complete.\n * @final\n * @protected\n */\n\n\nComponent.prototype.forceUpdate = function (callback) {\n  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');\n};\n/**\n * Deprecated APIs. These APIs used to exist on classic React classes but since\n * we would like to deprecate them, we're not going to move them over to this\n * modern base class. Instead, we define a getter that warns if it's accessed.\n */\n\n\n{\n  var deprecatedAPIs = {\n    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],\n    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']\n  };\n\n  var defineDeprecationWarning = function (methodName, info) {\n    Object.defineProperty(Component.prototype, methodName, {\n      get: function () {\n        warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);\n\n        return undefined;\n      }\n    });\n  };\n\n  for (var fnName in deprecatedAPIs) {\n    if (deprecatedAPIs.hasOwnProperty(fnName)) {\n      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);\n    }\n  }\n}\n\nfunction ComponentDummy() {}\n\nComponentDummy.prototype = Component.prototype;\n/**\n * Convenience component with default shallow equality check for sCU.\n */\n\nfunction PureComponent(props, context, updater) {\n  this.props = props;\n  this.context = context; // If a component has string refs, we will assign a different object later.\n\n  this.refs = emptyObject;\n  this.updater = updater || ReactNoopUpdateQueue;\n}\n\nvar pureComponentPrototype = PureComponent.prototype = new ComponentDummy();\npureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.\n\n_assign(pureComponentPrototype, Component.prototype);\n\npureComponentPrototype.isPureReactComponent = true;\n\n// an immutable object with a single mutable value\nfunction createRef() {\n  var refObject = {\n    current: null\n  };\n\n  {\n    Object.seal(refObject);\n  }\n\n  return refObject;\n}\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var functionName = innerType.displayName || innerType.name || '';\n  return outerType.displayName || (functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName);\n}\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n}\n\nfunction getComponentName(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  {\n    if (typeof type.tag === 'number') {\n      error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');\n    }\n  }\n\n  if (typeof type === 'function') {\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case exports.Fragment:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case exports.Profiler:\n      return 'Profiler';\n\n    case exports.StrictMode:\n      return 'StrictMode';\n\n    case exports.Suspense:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n        return getContextName(context) + '.Consumer';\n\n      case REACT_PROVIDER_TYPE:\n        var provider = type;\n        return getContextName(provider._context) + '.Provider';\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        return getComponentName(type.type);\n\n      case REACT_BLOCK_TYPE:\n        return getComponentName(type._render);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentName(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n    }\n  }\n\n  return null;\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar RESERVED_PROPS = {\n  key: true,\n  ref: true,\n  __self: true,\n  __source: true\n};\nvar specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;\n\n{\n  didWarnAboutStringRefs = {};\n}\n\nfunction hasValidRef(config) {\n  {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.key !== undefined;\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  var warnAboutAccessingKey = function () {\n    {\n      if (!specialPropKeyWarningShown) {\n        specialPropKeyWarningShown = true;\n\n        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    }\n  };\n\n  warnAboutAccessingKey.isReactWarning = true;\n  Object.defineProperty(props, 'key', {\n    get: warnAboutAccessingKey,\n    configurable: true\n  });\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  var warnAboutAccessingRef = function () {\n    {\n      if (!specialPropRefWarningShown) {\n        specialPropRefWarningShown = true;\n\n        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    }\n  };\n\n  warnAboutAccessingRef.isReactWarning = true;\n  Object.defineProperty(props, 'ref', {\n    get: warnAboutAccessingRef,\n    configurable: true\n  });\n}\n\nfunction warnIfStringRefCannotBeAutoConverted(config) {\n  {\n    if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {\n      var componentName = getComponentName(ReactCurrentOwner.current.type);\n\n      if (!didWarnAboutStringRefs[componentName]) {\n        error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);\n\n        didWarnAboutStringRefs[componentName] = true;\n      }\n    }\n  }\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nvar ReactElement = function (type, key, ref, self, source, owner, props) {\n  var element = {\n    // This tag allows us to uniquely identify this as a React Element\n    $$typeof: REACT_ELEMENT_TYPE,\n    // Built-in properties that belong on the element\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n    // Record the component responsible for creating this element.\n    _owner: owner\n  };\n\n  {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    }); // self and source are DEV only properties.\n\n    Object.defineProperty(element, '_self', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: self\n    }); // Two elements created in two different places should be considered\n    // equal for testing purposes and therefore we hide it from enumeration.\n\n    Object.defineProperty(element, '_source', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: source\n    });\n\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n};\n/**\n * Create and return a new ReactElement of the given type.\n * See https://reactjs.org/docs/react-api.html#createelement\n */\n\nfunction createElement(type, config, children) {\n  var propName; // Reserved names are extracted\n\n  var props = {};\n  var key = null;\n  var ref = null;\n  var self = null;\n  var source = null;\n\n  if (config != null) {\n    if (hasValidRef(config)) {\n      ref = config.ref;\n\n      {\n        warnIfStringRefCannotBeAutoConverted(config);\n      }\n    }\n\n    if (hasValidKey(config)) {\n      key = '' + config.key;\n    }\n\n    self = config.__self === undefined ? null : config.__self;\n    source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    }\n  } // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n\n\n  var childrenLength = arguments.length - 2;\n\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    var childArray = Array(childrenLength);\n\n    for (var i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n\n    {\n      if (Object.freeze) {\n        Object.freeze(childArray);\n      }\n    }\n\n    props.children = childArray;\n  } // Resolve default props\n\n\n  if (type && type.defaultProps) {\n    var defaultProps = type.defaultProps;\n\n    for (propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  }\n\n  {\n    if (key || ref) {\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n  }\n\n  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n}\nfunction cloneAndReplaceKey(oldElement, newKey) {\n  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);\n  return newElement;\n}\n/**\n * Clone and return a new ReactElement using element as the starting point.\n * See https://reactjs.org/docs/react-api.html#cloneelement\n */\n\nfunction cloneElement(element, config, children) {\n  if (!!(element === null || element === undefined)) {\n    {\n      throw Error( \"React.cloneElement(...): The argument must be a React element, but you passed \" + element + \".\" );\n    }\n  }\n\n  var propName; // Original props are copied\n\n  var props = _assign({}, element.props); // Reserved names are extracted\n\n\n  var key = element.key;\n  var ref = element.ref; // Self is preserved since the owner is preserved.\n\n  var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a\n  // transpiler, and the original source is probably a better indicator of the\n  // true owner.\n\n  var source = element._source; // Owner will be preserved, unless ref is overridden\n\n  var owner = element._owner;\n\n  if (config != null) {\n    if (hasValidRef(config)) {\n      // Silently steal the ref from the parent.\n      ref = config.ref;\n      owner = ReactCurrentOwner.current;\n    }\n\n    if (hasValidKey(config)) {\n      key = '' + config.key;\n    } // Remaining properties override existing props\n\n\n    var defaultProps;\n\n    if (element.type && element.type.defaultProps) {\n      defaultProps = element.type.defaultProps;\n    }\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        if (config[propName] === undefined && defaultProps !== undefined) {\n          // Resolve default props\n          props[propName] = defaultProps[propName];\n        } else {\n          props[propName] = config[propName];\n        }\n      }\n    }\n  } // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n\n\n  var childrenLength = arguments.length - 2;\n\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    var childArray = Array(childrenLength);\n\n    for (var i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n\n    props.children = childArray;\n  }\n\n  return ReactElement(element.type, key, ref, self, source, owner, props);\n}\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\n\nfunction isValidElement(object) {\n  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n}\n\nvar SEPARATOR = '.';\nvar SUBSEPARATOR = ':';\n/**\n * Escape and wrap key so it is safe to use as a reactid\n *\n * @param {string} key to be escaped.\n * @return {string} the escaped key.\n */\n\nfunction escape(key) {\n  var escapeRegex = /[=:]/g;\n  var escaperLookup = {\n    '=': '=0',\n    ':': '=2'\n  };\n  var escapedString = key.replace(escapeRegex, function (match) {\n    return escaperLookup[match];\n  });\n  return '$' + escapedString;\n}\n/**\n * TODO: Test that a single child and an array with one item have the same key\n * pattern.\n */\n\n\nvar didWarnAboutMaps = false;\nvar userProvidedKeyEscapeRegex = /\\/+/g;\n\nfunction escapeUserProvidedKey(text) {\n  return text.replace(userProvidedKeyEscapeRegex, '$&/');\n}\n/**\n * Generate a key string that identifies a element within a set.\n *\n * @param {*} element A element that could contain a manual key.\n * @param {number} index Index that is used if a manual key is not provided.\n * @return {string}\n */\n\n\nfunction getElementKey(element, index) {\n  // Do some typechecking here since we call this blindly. We want to ensure\n  // that we don't block potential future ES APIs.\n  if (typeof element === 'object' && element !== null && element.key != null) {\n    // Explicit key\n    return escape('' + element.key);\n  } // Implicit key determined by the index in the set\n\n\n  return index.toString(36);\n}\n\nfunction mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {\n  var type = typeof children;\n\n  if (type === 'undefined' || type === 'boolean') {\n    // All of the above are perceived as null.\n    children = null;\n  }\n\n  var invokeCallback = false;\n\n  if (children === null) {\n    invokeCallback = true;\n  } else {\n    switch (type) {\n      case 'string':\n      case 'number':\n        invokeCallback = true;\n        break;\n\n      case 'object':\n        switch (children.$$typeof) {\n          case REACT_ELEMENT_TYPE:\n          case REACT_PORTAL_TYPE:\n            invokeCallback = true;\n        }\n\n    }\n  }\n\n  if (invokeCallback) {\n    var _child = children;\n    var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array\n    // so that it's consistent if the number of children grows:\n\n    var childKey = nameSoFar === '' ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;\n\n    if (Array.isArray(mappedChild)) {\n      var escapedChildKey = '';\n\n      if (childKey != null) {\n        escapedChildKey = escapeUserProvidedKey(childKey) + '/';\n      }\n\n      mapIntoArray(mappedChild, array, escapedChildKey, '', function (c) {\n        return c;\n      });\n    } else if (mappedChild != null) {\n      if (isValidElement(mappedChild)) {\n        mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as\n        // traverseAllChildren used to do for objects as children\n        escapedPrefix + ( // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key\n        mappedChild.key && (!_child || _child.key !== mappedChild.key) ? // $FlowFixMe Flow incorrectly thinks existing element's key can be a number\n        escapeUserProvidedKey('' + mappedChild.key) + '/' : '') + childKey);\n      }\n\n      array.push(mappedChild);\n    }\n\n    return 1;\n  }\n\n  var child;\n  var nextName;\n  var subtreeCount = 0; // Count of children found in the current subtree.\n\n  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;\n\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      child = children[i];\n      nextName = nextNamePrefix + getElementKey(child, i);\n      subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);\n    }\n  } else {\n    var iteratorFn = getIteratorFn(children);\n\n    if (typeof iteratorFn === 'function') {\n      var iterableChildren = children;\n\n      {\n        // Warn about using Maps as children\n        if (iteratorFn === iterableChildren.entries) {\n          if (!didWarnAboutMaps) {\n            warn('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');\n          }\n\n          didWarnAboutMaps = true;\n        }\n      }\n\n      var iterator = iteratorFn.call(iterableChildren);\n      var step;\n      var ii = 0;\n\n      while (!(step = iterator.next()).done) {\n        child = step.value;\n        nextName = nextNamePrefix + getElementKey(child, ii++);\n        subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);\n      }\n    } else if (type === 'object') {\n      var childrenString = '' + children;\n\n      {\n        {\n          throw Error( \"Objects are not valid as a React child (found: \" + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + \"). If you meant to render a collection of children, use an array instead.\" );\n        }\n      }\n    }\n  }\n\n  return subtreeCount;\n}\n\n/**\n * Maps children that are typically specified as `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenmap\n *\n * The provided mapFunction(child, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} func The map function.\n * @param {*} context Context for mapFunction.\n * @return {object} Object containing the ordered map of results.\n */\nfunction mapChildren(children, func, context) {\n  if (children == null) {\n    return children;\n  }\n\n  var result = [];\n  var count = 0;\n  mapIntoArray(children, result, '', '', function (child) {\n    return func.call(context, child, count++);\n  });\n  return result;\n}\n/**\n * Count the number of children that are typically specified as\n * `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrencount\n *\n * @param {?*} children Children tree container.\n * @return {number} The number of children.\n */\n\n\nfunction countChildren(children) {\n  var n = 0;\n  mapChildren(children, function () {\n    n++; // Don't return anything\n  });\n  return n;\n}\n\n/**\n * Iterates through children that are typically specified as `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenforeach\n *\n * The provided forEachFunc(child, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} forEachFunc\n * @param {*} forEachContext Context for forEachContext.\n */\nfunction forEachChildren(children, forEachFunc, forEachContext) {\n  mapChildren(children, function () {\n    forEachFunc.apply(this, arguments); // Don't return anything.\n  }, forEachContext);\n}\n/**\n * Flatten a children object (typically specified as `props.children`) and\n * return an array with appropriately re-keyed children.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrentoarray\n */\n\n\nfunction toArray(children) {\n  return mapChildren(children, function (child) {\n    return child;\n  }) || [];\n}\n/**\n * Returns the first child in a collection of children and verifies that there\n * is only one child in the collection.\n *\n * See https://reactjs.org/docs/react-api.html#reactchildrenonly\n *\n * The current implementation of this function assumes that a single child gets\n * passed without a wrapper, but the purpose of this helper function is to\n * abstract away the particular structure of children.\n *\n * @param {?object} children Child collection structure.\n * @return {ReactElement} The first and only `ReactElement` contained in the\n * structure.\n */\n\n\nfunction onlyChild(children) {\n  if (!isValidElement(children)) {\n    {\n      throw Error( \"React.Children.only expected to receive a single React element child.\" );\n    }\n  }\n\n  return children;\n}\n\nfunction createContext(defaultValue, calculateChangedBits) {\n  if (calculateChangedBits === undefined) {\n    calculateChangedBits = null;\n  } else {\n    {\n      if (calculateChangedBits !== null && typeof calculateChangedBits !== 'function') {\n        error('createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits);\n      }\n    }\n  }\n\n  var context = {\n    $$typeof: REACT_CONTEXT_TYPE,\n    _calculateChangedBits: calculateChangedBits,\n    // As a workaround to support multiple concurrent renderers, we categorize\n    // some renderers as primary and others as secondary. We only expect\n    // there to be two concurrent renderers at most: React Native (primary) and\n    // Fabric (secondary); React DOM (primary) and React ART (secondary).\n    // Secondary renderers store their context values on separate fields.\n    _currentValue: defaultValue,\n    _currentValue2: defaultValue,\n    // Used to track how many concurrent renderers this context currently\n    // supports within in a single renderer. Such as parallel server rendering.\n    _threadCount: 0,\n    // These are circular\n    Provider: null,\n    Consumer: null\n  };\n  context.Provider = {\n    $$typeof: REACT_PROVIDER_TYPE,\n    _context: context\n  };\n  var hasWarnedAboutUsingNestedContextConsumers = false;\n  var hasWarnedAboutUsingConsumerProvider = false;\n  var hasWarnedAboutDisplayNameOnConsumer = false;\n\n  {\n    // A separate object, but proxies back to the original context object for\n    // backwards compatibility. It has a different $$typeof, so we can properly\n    // warn for the incorrect usage of Context as a Consumer.\n    var Consumer = {\n      $$typeof: REACT_CONTEXT_TYPE,\n      _context: context,\n      _calculateChangedBits: context._calculateChangedBits\n    }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here\n\n    Object.defineProperties(Consumer, {\n      Provider: {\n        get: function () {\n          if (!hasWarnedAboutUsingConsumerProvider) {\n            hasWarnedAboutUsingConsumerProvider = true;\n\n            error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');\n          }\n\n          return context.Provider;\n        },\n        set: function (_Provider) {\n          context.Provider = _Provider;\n        }\n      },\n      _currentValue: {\n        get: function () {\n          return context._currentValue;\n        },\n        set: function (_currentValue) {\n          context._currentValue = _currentValue;\n        }\n      },\n      _currentValue2: {\n        get: function () {\n          return context._currentValue2;\n        },\n        set: function (_currentValue2) {\n          context._currentValue2 = _currentValue2;\n        }\n      },\n      _threadCount: {\n        get: function () {\n          return context._threadCount;\n        },\n        set: function (_threadCount) {\n          context._threadCount = _threadCount;\n        }\n      },\n      Consumer: {\n        get: function () {\n          if (!hasWarnedAboutUsingNestedContextConsumers) {\n            hasWarnedAboutUsingNestedContextConsumers = true;\n\n            error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');\n          }\n\n          return context.Consumer;\n        }\n      },\n      displayName: {\n        get: function () {\n          return context.displayName;\n        },\n        set: function (displayName) {\n          if (!hasWarnedAboutDisplayNameOnConsumer) {\n            warn('Setting `displayName` on Context.Consumer has no effect. ' + \"You should set it directly on the context with Context.displayName = '%s'.\", displayName);\n\n            hasWarnedAboutDisplayNameOnConsumer = true;\n          }\n        }\n      }\n    }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty\n\n    context.Consumer = Consumer;\n  }\n\n  {\n    context._currentRenderer = null;\n    context._currentRenderer2 = null;\n  }\n\n  return context;\n}\n\nvar Uninitialized = -1;\nvar Pending = 0;\nvar Resolved = 1;\nvar Rejected = 2;\n\nfunction lazyInitializer(payload) {\n  if (payload._status === Uninitialized) {\n    var ctor = payload._result;\n    var thenable = ctor(); // Transition to the next state.\n\n    var pending = payload;\n    pending._status = Pending;\n    pending._result = thenable;\n    thenable.then(function (moduleObject) {\n      if (payload._status === Pending) {\n        var defaultExport = moduleObject.default;\n\n        {\n          if (defaultExport === undefined) {\n            error('lazy: Expected the result of a dynamic import() call. ' + 'Instead received: %s\\n\\nYour code should look like: \\n  ' + // Break up imports to avoid accidentally parsing them as dependencies.\n            'const MyComponent = lazy(() => imp' + \"ort('./MyComponent'))\", moduleObject);\n          }\n        } // Transition to the next state.\n\n\n        var resolved = payload;\n        resolved._status = Resolved;\n        resolved._result = defaultExport;\n      }\n    }, function (error) {\n      if (payload._status === Pending) {\n        // Transition to the next state.\n        var rejected = payload;\n        rejected._status = Rejected;\n        rejected._result = error;\n      }\n    });\n  }\n\n  if (payload._status === Resolved) {\n    return payload._result;\n  } else {\n    throw payload._result;\n  }\n}\n\nfunction lazy(ctor) {\n  var payload = {\n    // We use these fields to store the result.\n    _status: -1,\n    _result: ctor\n  };\n  var lazyType = {\n    $$typeof: REACT_LAZY_TYPE,\n    _payload: payload,\n    _init: lazyInitializer\n  };\n\n  {\n    // In production, this would just set it on the object.\n    var defaultProps;\n    var propTypes; // $FlowFixMe\n\n    Object.defineProperties(lazyType, {\n      defaultProps: {\n        configurable: true,\n        get: function () {\n          return defaultProps;\n        },\n        set: function (newDefaultProps) {\n          error('React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');\n\n          defaultProps = newDefaultProps; // Match production behavior more closely:\n          // $FlowFixMe\n\n          Object.defineProperty(lazyType, 'defaultProps', {\n            enumerable: true\n          });\n        }\n      },\n      propTypes: {\n        configurable: true,\n        get: function () {\n          return propTypes;\n        },\n        set: function (newPropTypes) {\n          error('React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');\n\n          propTypes = newPropTypes; // Match production behavior more closely:\n          // $FlowFixMe\n\n          Object.defineProperty(lazyType, 'propTypes', {\n            enumerable: true\n          });\n        }\n      }\n    });\n  }\n\n  return lazyType;\n}\n\nfunction forwardRef(render) {\n  {\n    if (render != null && render.$$typeof === REACT_MEMO_TYPE) {\n      error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');\n    } else if (typeof render !== 'function') {\n      error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);\n    } else {\n      if (render.length !== 0 && render.length !== 2) {\n        error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');\n      }\n    }\n\n    if (render != null) {\n      if (render.defaultProps != null || render.propTypes != null) {\n        error('forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?');\n      }\n    }\n  }\n\n  var elementType = {\n    $$typeof: REACT_FORWARD_REF_TYPE,\n    render: render\n  };\n\n  {\n    var ownName;\n    Object.defineProperty(elementType, 'displayName', {\n      enumerable: false,\n      configurable: true,\n      get: function () {\n        return ownName;\n      },\n      set: function (name) {\n        ownName = name;\n\n        if (render.displayName == null) {\n          render.displayName = name;\n        }\n      }\n    });\n  }\n\n  return elementType;\n}\n\n// Filter certain DOM attributes (e.g. src, href) if their values are empty strings.\n\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\n\nfunction isValidElementType(type) {\n  if (typeof type === 'string' || typeof type === 'function') {\n    return true;\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n\n  if (type === exports.Fragment || type === exports.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === exports.StrictMode || type === exports.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI ) {\n    return true;\n  }\n\n  if (typeof type === 'object' && type !== null) {\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction memo(type, compare) {\n  {\n    if (!isValidElementType(type)) {\n      error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);\n    }\n  }\n\n  var elementType = {\n    $$typeof: REACT_MEMO_TYPE,\n    type: type,\n    compare: compare === undefined ? null : compare\n  };\n\n  {\n    var ownName;\n    Object.defineProperty(elementType, 'displayName', {\n      enumerable: false,\n      configurable: true,\n      get: function () {\n        return ownName;\n      },\n      set: function (name) {\n        ownName = name;\n\n        if (type.displayName == null) {\n          type.displayName = name;\n        }\n      }\n    });\n  }\n\n  return elementType;\n}\n\nfunction resolveDispatcher() {\n  var dispatcher = ReactCurrentDispatcher.current;\n\n  if (!(dispatcher !== null)) {\n    {\n      throw Error( \"Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\\n1. You might have mismatching versions of React and the renderer (such as React DOM)\\n2. You might be breaking the Rules of Hooks\\n3. You might have more than one copy of React in the same app\\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.\" );\n    }\n  }\n\n  return dispatcher;\n}\n\nfunction useContext(Context, unstable_observedBits) {\n  var dispatcher = resolveDispatcher();\n\n  {\n    if (unstable_observedBits !== undefined) {\n      error('useContext() second argument is reserved for future ' + 'use in React. Passing it is not supported. ' + 'You passed: %s.%s', unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? '\\n\\nDid you call array.map(useContext)? ' + 'Calling Hooks inside a loop is not supported. ' + 'Learn more at https://reactjs.org/link/rules-of-hooks' : '');\n    } // TODO: add a more generic warning for invalid values.\n\n\n    if (Context._context !== undefined) {\n      var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs\n      // and nobody should be using this in existing code.\n\n      if (realContext.Consumer === Context) {\n        error('Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');\n      } else if (realContext.Provider === Context) {\n        error('Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');\n      }\n    }\n  }\n\n  return dispatcher.useContext(Context, unstable_observedBits);\n}\nfunction useState(initialState) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useState(initialState);\n}\nfunction useReducer(reducer, initialArg, init) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useReducer(reducer, initialArg, init);\n}\nfunction useRef(initialValue) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useRef(initialValue);\n}\nfunction useEffect(create, deps) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useEffect(create, deps);\n}\nfunction useLayoutEffect(create, deps) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useLayoutEffect(create, deps);\n}\nfunction useCallback(callback, deps) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useCallback(callback, deps);\n}\nfunction useMemo(create, deps) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useMemo(create, deps);\n}\nfunction useImperativeHandle(ref, create, deps) {\n  var dispatcher = resolveDispatcher();\n  return dispatcher.useImperativeHandle(ref, create, deps);\n}\nfunction useDebugValue(value, formatterFn) {\n  {\n    var dispatcher = resolveDispatcher();\n    return dispatcher.useDebugValue(value, formatterFn);\n  }\n}\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: _assign({}, props, {\n          value: prevLog\n        }),\n        info: _assign({}, props, {\n          value: prevInfo\n        }),\n        warn: _assign({}, props, {\n          value: prevWarn\n        }),\n        error: _assign({}, props, {\n          value: prevError\n        }),\n        group: _assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: _assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: _assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, source, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if (!fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  var control;\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher$1.current = null;\n    disableLogs();\n  }\n\n  try {\n    // This should throw.\n    if (construct) {\n      // Something should be setting the props in the constructor.\n      var Fake = function () {\n        throw Error();\n      }; // $FlowFixMe\n\n\n      Object.defineProperty(Fake.prototype, 'props', {\n        set: function () {\n          // We use a throwing setter instead of frozen or non-writable props\n          // because that won't throw in a non-strict mode function.\n          throw Error();\n        }\n      });\n\n      if (typeof Reflect === 'object' && Reflect.construct) {\n        // We construct a different control for this case to include any extra\n        // frames added by the construct call.\n        try {\n          Reflect.construct(Fake, []);\n        } catch (x) {\n          control = x;\n        }\n\n        Reflect.construct(fn, [], Fake);\n      } else {\n        try {\n          Fake.call();\n        } catch (x) {\n          control = x;\n        }\n\n        fn.call(Fake.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (x) {\n        control = x;\n      }\n\n      fn();\n    }\n  } catch (sample) {\n    // This is inlined manually because closure doesn't do it for us.\n    if (sample && control && typeof sample.stack === 'string') {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sample.stack.split('\\n');\n      var controlLines = control.stack.split('\\n');\n      var s = sampleLines.length - 1;\n      var c = controlLines.length - 1;\n\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n        // We expect at least one stack frame to be shared.\n        // Typically this will be the root most one. However, stack frames may be\n        // cut off due to maximum stack limits. In this case, one maybe cut off\n        // earlier than the other. We assume that the sample is longer or the same\n        // and there for cut off earlier. So we should find the root most frame in\n        // the sample somewhere in the control.\n        c--;\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at ');\n\n                {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher$1.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\nfunction describeFunctionComponentFrame(fn, source, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction shouldConstruct(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n\n  if (type == null) {\n    return '';\n  }\n\n  if (typeof type === 'function') {\n    {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    }\n  }\n\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type);\n  }\n\n  switch (type) {\n    case exports.Suspense:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList');\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render);\n\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n\n      case REACT_BLOCK_TYPE:\n        return describeFunctionComponentFrame(type._render);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\nvar loggedTypeFailures = {};\nvar ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n    }\n  }\n}\n\nfunction checkPropTypes(typeSpecs, values, location, componentName, element) {\n  {\n    // $FlowFixMe This is okay but Flow doesn't know it.\n    var has = Function.call.bind(Object.prototype.hasOwnProperty);\n\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n\n          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\n        } catch (ex) {\n          error$1 = ex;\n        }\n\n        if (error$1 && !(error$1 instanceof Error)) {\n          setCurrentlyValidatingElement(element);\n\n          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\n\n          setCurrentlyValidatingElement(null);\n        }\n\n        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error$1.message] = true;\n          setCurrentlyValidatingElement(element);\n\n          error('Failed %s type: %s', location, error$1.message);\n\n          setCurrentlyValidatingElement(null);\n        }\n      }\n    }\n  }\n}\n\nfunction setCurrentlyValidatingElement$1(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      setExtraStackFrame(stack);\n    } else {\n      setExtraStackFrame(null);\n    }\n  }\n}\n\nvar propTypesMisspellWarningShown;\n\n{\n  propTypesMisspellWarningShown = false;\n}\n\nfunction getDeclarationErrorAddendum() {\n  if (ReactCurrentOwner.current) {\n    var name = getComponentName(ReactCurrentOwner.current.type);\n\n    if (name) {\n      return '\\n\\nCheck the render method of `' + name + '`.';\n    }\n  }\n\n  return '';\n}\n\nfunction getSourceInfoErrorAddendum(source) {\n  if (source !== undefined) {\n    var fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\n    var lineNumber = source.lineNumber;\n    return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\n  }\n\n  return '';\n}\n\nfunction getSourceInfoErrorAddendumForProps(elementProps) {\n  if (elementProps !== null && elementProps !== undefined) {\n    return getSourceInfoErrorAddendum(elementProps.__source);\n  }\n\n  return '';\n}\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\n\n\nvar ownerHasKeyUseWarning = {};\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  var info = getDeclarationErrorAddendum();\n\n  if (!info) {\n    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n\n    if (parentName) {\n      info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n    }\n  }\n\n  return info;\n}\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\n\n\nfunction validateExplicitKey(element, parentType) {\n  if (!element._store || element._store.validated || element.key != null) {\n    return;\n  }\n\n  element._store.validated = true;\n  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n    return;\n  }\n\n  ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n  // property, it may be the creator of the child that's responsible for\n  // assigning it a key.\n\n  var childOwner = '';\n\n  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n    // Give the component that originally created this child.\n    childOwner = \" It was passed a child from \" + getComponentName(element._owner.type) + \".\";\n  }\n\n  {\n    setCurrentlyValidatingElement$1(element);\n\n    error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\n\n    setCurrentlyValidatingElement$1(null);\n  }\n}\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\n\n\nfunction validateChildKeys(node, parentType) {\n  if (typeof node !== 'object') {\n    return;\n  }\n\n  if (Array.isArray(node)) {\n    for (var i = 0; i < node.length; i++) {\n      var child = node[i];\n\n      if (isValidElement(child)) {\n        validateExplicitKey(child, parentType);\n      }\n    }\n  } else if (isValidElement(node)) {\n    // This element was passed in a valid location.\n    if (node._store) {\n      node._store.validated = true;\n    }\n  } else if (node) {\n    var iteratorFn = getIteratorFn(node);\n\n    if (typeof iteratorFn === 'function') {\n      // Entry iterators used to provide implicit keys,\n      // but now we print a separate warning for them later.\n      if (iteratorFn !== node.entries) {\n        var iterator = iteratorFn.call(node);\n        var step;\n\n        while (!(step = iterator.next()).done) {\n          if (isValidElement(step.value)) {\n            validateExplicitKey(step.value, parentType);\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */\n\n\nfunction validatePropTypes(element) {\n  {\n    var type = element.type;\n\n    if (type === null || type === undefined || typeof type === 'string') {\n      return;\n    }\n\n    var propTypes;\n\n    if (typeof type === 'function') {\n      propTypes = type.propTypes;\n    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n    // Inner props are checked in the reconciler.\n    type.$$typeof === REACT_MEMO_TYPE)) {\n      propTypes = type.propTypes;\n    } else {\n      return;\n    }\n\n    if (propTypes) {\n      // Intentionally inside to avoid triggering lazy initializers:\n      var name = getComponentName(type);\n      checkPropTypes(propTypes, element.props, 'prop', name, element);\n    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n\n      var _name = getComponentName(type);\n\n      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');\n    }\n\n    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {\n      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');\n    }\n  }\n}\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\n\n\nfunction validateFragmentProps(fragment) {\n  {\n    var keys = Object.keys(fragment.props);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n\n      if (key !== 'children' && key !== 'key') {\n        setCurrentlyValidatingElement$1(fragment);\n\n        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n\n        setCurrentlyValidatingElement$1(null);\n        break;\n      }\n    }\n\n    if (fragment.ref !== null) {\n      setCurrentlyValidatingElement$1(fragment);\n\n      error('Invalid attribute `ref` supplied to `React.Fragment`.');\n\n      setCurrentlyValidatingElement$1(null);\n    }\n  }\n}\nfunction createElementWithValidation(type, props, children) {\n  var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n  // succeed and there will likely be errors in render.\n\n  if (!validType) {\n    var info = '';\n\n    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n      info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n    }\n\n    var sourceInfo = getSourceInfoErrorAddendumForProps(props);\n\n    if (sourceInfo) {\n      info += sourceInfo;\n    } else {\n      info += getDeclarationErrorAddendum();\n    }\n\n    var typeString;\n\n    if (type === null) {\n      typeString = 'null';\n    } else if (Array.isArray(type)) {\n      typeString = 'array';\n    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n      typeString = \"<\" + (getComponentName(type.type) || 'Unknown') + \" />\";\n      info = ' Did you accidentally export a JSX literal instead of a component?';\n    } else {\n      typeString = typeof type;\n    }\n\n    {\n      error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n    }\n  }\n\n  var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.\n  // TODO: Drop this when these are no longer allowed as the type argument.\n\n  if (element == null) {\n    return element;\n  } // Skip key warning if the type isn't valid since our key validation logic\n  // doesn't expect a non-string/function type and can throw confusing errors.\n  // We don't want exception behavior to differ between dev and prod.\n  // (Rendering will throw with a helpful message and as soon as the type is\n  // fixed, the key warnings will appear.)\n\n\n  if (validType) {\n    for (var i = 2; i < arguments.length; i++) {\n      validateChildKeys(arguments[i], type);\n    }\n  }\n\n  if (type === exports.Fragment) {\n    validateFragmentProps(element);\n  } else {\n    validatePropTypes(element);\n  }\n\n  return element;\n}\nvar didWarnAboutDeprecatedCreateFactory = false;\nfunction createFactoryWithValidation(type) {\n  var validatedFactory = createElementWithValidation.bind(null, type);\n  validatedFactory.type = type;\n\n  {\n    if (!didWarnAboutDeprecatedCreateFactory) {\n      didWarnAboutDeprecatedCreateFactory = true;\n\n      warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');\n    } // Legacy hook: remove it\n\n\n    Object.defineProperty(validatedFactory, 'type', {\n      enumerable: false,\n      get: function () {\n        warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');\n\n        Object.defineProperty(this, 'type', {\n          value: type\n        });\n        return type;\n      }\n    });\n  }\n\n  return validatedFactory;\n}\nfunction cloneElementWithValidation(element, props, children) {\n  var newElement = cloneElement.apply(this, arguments);\n\n  for (var i = 2; i < arguments.length; i++) {\n    validateChildKeys(arguments[i], newElement.type);\n  }\n\n  validatePropTypes(newElement);\n  return newElement;\n}\n\n{\n\n  try {\n    var frozenObject = Object.freeze({});\n    /* eslint-disable no-new */\n\n    new Map([[frozenObject, null]]);\n    new Set([frozenObject]);\n    /* eslint-enable no-new */\n  } catch (e) {\n  }\n}\n\nvar createElement$1 =  createElementWithValidation ;\nvar cloneElement$1 =  cloneElementWithValidation ;\nvar createFactory =  createFactoryWithValidation ;\nvar Children = {\n  map: mapChildren,\n  forEach: forEachChildren,\n  count: countChildren,\n  toArray: toArray,\n  only: onlyChild\n};\n\nexports.Children = Children;\nexports.Component = Component;\nexports.PureComponent = PureComponent;\nexports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;\nexports.cloneElement = cloneElement$1;\nexports.createContext = createContext;\nexports.createElement = createElement$1;\nexports.createFactory = createFactory;\nexports.createRef = createRef;\nexports.forwardRef = forwardRef;\nexports.isValidElement = isValidElement;\nexports.lazy = lazy;\nexports.memo = memo;\nexports.useCallback = useCallback;\nexports.useContext = useContext;\nexports.useDebugValue = useDebugValue;\nexports.useEffect = useEffect;\nexports.useImperativeHandle = useImperativeHandle;\nexports.useLayoutEffect = useLayoutEffect;\nexports.useMemo = useMemo;\nexports.useReducer = useReducer;\nexports.useRef = useRef;\nexports.useState = useState;\nexports.version = ReactVersion;\n  })();\n}\n","/** @license React v17.0.1\n * react.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var l=require(\"object-assign\"),n=60103,p=60106;exports.Fragment=60107;exports.StrictMode=60108;exports.Profiler=60114;var q=60109,r=60110,t=60112;exports.Suspense=60113;var u=60115,v=60116;\nif(\"function\"===typeof Symbol&&Symbol.for){var w=Symbol.for;n=w(\"react.element\");p=w(\"react.portal\");exports.Fragment=w(\"react.fragment\");exports.StrictMode=w(\"react.strict_mode\");exports.Profiler=w(\"react.profiler\");q=w(\"react.provider\");r=w(\"react.context\");t=w(\"react.forward_ref\");exports.Suspense=w(\"react.suspense\");u=w(\"react.memo\");v=w(\"react.lazy\")}var x=\"function\"===typeof Symbol&&Symbol.iterator;\nfunction y(a){if(null===a||\"object\"!==typeof a)return null;a=x&&a[x]||a[\"@@iterator\"];return\"function\"===typeof a?a:null}function z(a){for(var b=\"https://reactjs.org/docs/error-decoder.html?invariant=\"+a,c=1;c<arguments.length;c++)b+=\"&args[]=\"+encodeURIComponent(arguments[c]);return\"Minified React error #\"+a+\"; visit \"+b+\" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\"}\nvar A={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},B={};function C(a,b,c){this.props=a;this.context=b;this.refs=B;this.updater=c||A}C.prototype.isReactComponent={};C.prototype.setState=function(a,b){if(\"object\"!==typeof a&&\"function\"!==typeof a&&null!=a)throw Error(z(85));this.updater.enqueueSetState(this,a,b,\"setState\")};C.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,\"forceUpdate\")};\nfunction D(){}D.prototype=C.prototype;function E(a,b,c){this.props=a;this.context=b;this.refs=B;this.updater=c||A}var F=E.prototype=new D;F.constructor=E;l(F,C.prototype);F.isPureReactComponent=!0;var G={current:null},H=Object.prototype.hasOwnProperty,I={key:!0,ref:!0,__self:!0,__source:!0};\nfunction J(a,b,c){var e,d={},k=null,h=null;if(null!=b)for(e in void 0!==b.ref&&(h=b.ref),void 0!==b.key&&(k=\"\"+b.key),b)H.call(b,e)&&!I.hasOwnProperty(e)&&(d[e]=b[e]);var g=arguments.length-2;if(1===g)d.children=c;else if(1<g){for(var f=Array(g),m=0;m<g;m++)f[m]=arguments[m+2];d.children=f}if(a&&a.defaultProps)for(e in g=a.defaultProps,g)void 0===d[e]&&(d[e]=g[e]);return{$$typeof:n,type:a,key:k,ref:h,props:d,_owner:G.current}}\nfunction K(a,b){return{$$typeof:n,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function L(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===n}function escape(a){var b={\"=\":\"=0\",\":\":\"=2\"};return\"$\"+a.replace(/[=:]/g,function(a){return b[a]})}var M=/\\/+/g;function N(a,b){return\"object\"===typeof a&&null!==a&&null!=a.key?escape(\"\"+a.key):b.toString(36)}\nfunction O(a,b,c,e,d){var k=typeof a;if(\"undefined\"===k||\"boolean\"===k)a=null;var h=!1;if(null===a)h=!0;else switch(k){case \"string\":case \"number\":h=!0;break;case \"object\":switch(a.$$typeof){case n:case p:h=!0}}if(h)return h=a,d=d(h),a=\"\"===e?\".\"+N(h,0):e,Array.isArray(d)?(c=\"\",null!=a&&(c=a.replace(M,\"$&/\")+\"/\"),O(d,b,c,\"\",function(a){return a})):null!=d&&(L(d)&&(d=K(d,c+(!d.key||h&&h.key===d.key?\"\":(\"\"+d.key).replace(M,\"$&/\")+\"/\")+a)),b.push(d)),1;h=0;e=\"\"===e?\".\":e+\":\";if(Array.isArray(a))for(var g=\n0;g<a.length;g++){k=a[g];var f=e+N(k,g);h+=O(k,b,c,f,d)}else if(f=y(a),\"function\"===typeof f)for(a=f.call(a),g=0;!(k=a.next()).done;)k=k.value,f=e+N(k,g++),h+=O(k,b,c,f,d);else if(\"object\"===k)throw b=\"\"+a,Error(z(31,\"[object Object]\"===b?\"object with keys {\"+Object.keys(a).join(\", \")+\"}\":b));return h}function P(a,b,c){if(null==a)return a;var e=[],d=0;O(a,e,\"\",\"\",function(a){return b.call(c,a,d++)});return e}\nfunction Q(a){if(-1===a._status){var b=a._result;b=b();a._status=0;a._result=b;b.then(function(b){0===a._status&&(b=b.default,a._status=1,a._result=b)},function(b){0===a._status&&(a._status=2,a._result=b)})}if(1===a._status)return a._result;throw a._result;}var R={current:null};function S(){var a=R.current;if(null===a)throw Error(z(321));return a}var T={ReactCurrentDispatcher:R,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:G,IsSomeRendererActing:{current:!1},assign:l};\nexports.Children={map:P,forEach:function(a,b,c){P(a,function(){b.apply(this,arguments)},c)},count:function(a){var b=0;P(a,function(){b++});return b},toArray:function(a){return P(a,function(a){return a})||[]},only:function(a){if(!L(a))throw Error(z(143));return a}};exports.Component=C;exports.PureComponent=E;exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=T;\nexports.cloneElement=function(a,b,c){if(null===a||void 0===a)throw Error(z(267,a));var e=l({},a.props),d=a.key,k=a.ref,h=a._owner;if(null!=b){void 0!==b.ref&&(k=b.ref,h=G.current);void 0!==b.key&&(d=\"\"+b.key);if(a.type&&a.type.defaultProps)var g=a.type.defaultProps;for(f in b)H.call(b,f)&&!I.hasOwnProperty(f)&&(e[f]=void 0===b[f]&&void 0!==g?g[f]:b[f])}var f=arguments.length-2;if(1===f)e.children=c;else if(1<f){g=Array(f);for(var m=0;m<f;m++)g[m]=arguments[m+2];e.children=g}return{$$typeof:n,type:a.type,\nkey:d,ref:k,props:e,_owner:h}};exports.createContext=function(a,b){void 0===b&&(b=null);a={$$typeof:r,_calculateChangedBits:b,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null};a.Provider={$$typeof:q,_context:a};return a.Consumer=a};exports.createElement=J;exports.createFactory=function(a){var b=J.bind(null,a);b.type=a;return b};exports.createRef=function(){return{current:null}};exports.forwardRef=function(a){return{$$typeof:t,render:a}};exports.isValidElement=L;\nexports.lazy=function(a){return{$$typeof:v,_payload:{_status:-1,_result:a},_init:Q}};exports.memo=function(a,b){return{$$typeof:u,type:a,compare:void 0===b?null:b}};exports.useCallback=function(a,b){return S().useCallback(a,b)};exports.useContext=function(a,b){return S().useContext(a,b)};exports.useDebugValue=function(){};exports.useEffect=function(a,b){return S().useEffect(a,b)};exports.useImperativeHandle=function(a,b,c){return S().useImperativeHandle(a,b,c)};\nexports.useLayoutEffect=function(a,b){return S().useLayoutEffect(a,b)};exports.useMemo=function(a,b){return S().useMemo(a,b)};exports.useReducer=function(a,b,c){return S().useReducer(a,b,c)};exports.useRef=function(a){return S().useRef(a)};exports.useState=function(a){return S().useState(a)};exports.version=\"17.0.1\";\n","'use strict';\n\nif (\"development\" === 'production') {\n  module.exports = require('./cjs/react.production.min.js');\n} else {\n  module.exports = require('./cjs/react.development.js');\n}\n","'use strict';\n\nfunction isAbsolute(pathname) {\n  return pathname.charAt(0) === '/';\n}\n\n// About 1.5x faster than the two-arg version of Array#splice()\nfunction spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {\n    list[i] = list[k];\n  }\n\n  list.pop();\n}\n\n// This implementation is based heavily on node's url.parse\nfunction resolvePathname(to, from) {\n  if (from === undefined) from = '';\n\n  var toParts = (to && to.split('/')) || [];\n  var fromParts = (from && from.split('/')) || [];\n\n  var isToAbs = to && isAbsolute(to);\n  var isFromAbs = from && isAbsolute(from);\n  var mustEndAbs = isToAbs || isFromAbs;\n\n  if (to && isAbsolute(to)) {\n    // to is absolute\n    fromParts = toParts;\n  } else if (toParts.length) {\n    // to is relative, drop the filename\n    fromParts.pop();\n    fromParts = fromParts.concat(toParts);\n  }\n\n  if (!fromParts.length) return '/';\n\n  var hasTrailingSlash;\n  if (fromParts.length) {\n    var last = fromParts[fromParts.length - 1];\n    hasTrailingSlash = last === '.' || last === '..' || last === '';\n  } else {\n    hasTrailingSlash = false;\n  }\n\n  var up = 0;\n  for (var i = fromParts.length; i >= 0; i--) {\n    var part = fromParts[i];\n\n    if (part === '.') {\n      spliceOne(fromParts, i);\n    } else if (part === '..') {\n      spliceOne(fromParts, i);\n      up++;\n    } else if (up) {\n      spliceOne(fromParts, i);\n      up--;\n    }\n  }\n\n  if (!mustEndAbs) for (; up--; up) fromParts.unshift('..');\n\n  if (\n    mustEndAbs &&\n    fromParts[0] !== '' &&\n    (!fromParts[0] || !isAbsolute(fromParts[0]))\n  )\n    fromParts.unshift('');\n\n  var result = fromParts.join('/');\n\n  if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';\n\n  return result;\n}\n\nmodule.exports = resolvePathname;\n","\"use strict\";function isAbsolute(e){return\"/\"===e.charAt(0)}function spliceOne(e,t){for(var s=t,n=s+1,i=e.length;n<i;s+=1,n+=1)e[s]=e[n];e.pop()}function resolvePathname(e,t){void 0===t&&(t=\"\");var s,n=e&&e.split(\"/\")||[],i=t&&t.split(\"/\")||[],l=e&&isAbsolute(e),r=t&&isAbsolute(t),o=l||r;if(e&&isAbsolute(e)?i=n:n.length&&(i.pop(),i=i.concat(n)),!i.length)return\"/\";if(i.length){var u=i[i.length-1];s=\".\"===u||\"..\"===u||\"\"===u}else s=!1;for(var a=0,c=i.length;0<=c;c--){var f=i[c];\".\"===f?spliceOne(i,c):\"..\"===f?(spliceOne(i,c),a++):a&&(spliceOne(i,c),a--)}if(!o)for(;a--;a)i.unshift(\"..\");!o||\"\"===i[0]||i[0]&&isAbsolute(i[0])||i.unshift(\"\");var h=i.join(\"/\");return s&&\"/\"!==h.substr(-1)&&(h+=\"/\"),h}module.exports=resolvePathname;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/resolve-pathname.min.js');\n} else {\n  module.exports = require('./cjs/resolve-pathname.js');\n}\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar isProduction = process.env.NODE_ENV === 'production';\nvar prefix = 'Invariant failed';\nfunction invariant(condition, message) {\n    if (condition) {\n        return;\n    }\n    if (isProduction) {\n        throw new Error(prefix);\n    }\n    throw new Error(prefix + \": \" + (message || ''));\n}\nexports.default = invariant;\n","'use strict';\n\nvar isProduction = process.env.NODE_ENV === 'production';\nfunction warning(condition, message) {\n  if (!isProduction) {\n    if (condition) {\n      return;\n    }\n\n    var text = \"Warning: \" + message;\n\n    if (typeof console !== 'undefined') {\n      console.warn(text);\n    }\n\n    try {\n      throw Error(text);\n    } catch (x) {}\n  }\n}\n\nmodule.exports = warning;\n","'use strict';\n\nfunction valueOf(obj) {\n  return obj.valueOf ? obj.valueOf() : Object.prototype.valueOf.call(obj);\n}\n\nfunction valueEqual(a, b) {\n  // Test for strict equality first.\n  if (a === b) return true;\n\n  // Otherwise, if either of them == null they are not equal.\n  if (a == null || b == null) return false;\n\n  if (Array.isArray(a)) {\n    return (\n      Array.isArray(b) &&\n      a.length === b.length &&\n      a.every(function(item, index) {\n        return valueEqual(item, b[index]);\n      })\n    );\n  }\n\n  if (typeof a === 'object' || typeof b === 'object') {\n    var aValue = valueOf(a);\n    var bValue = valueOf(b);\n\n    if (aValue !== a || bValue !== b) return valueEqual(aValue, bValue);\n\n    return Object.keys(Object.assign({}, a, b)).every(function(key) {\n      return valueEqual(a[key], b[key]);\n    });\n  }\n\n  return false;\n}\n\nmodule.exports = valueEqual;\n","\"use strict\";function valueOf(e){return e.valueOf?e.valueOf():Object.prototype.valueOf.call(e)}function valueEqual(u,r){if(u===r)return!0;if(null==u||null==r)return!1;if(Array.isArray(u))return Array.isArray(r)&&u.length===r.length&&u.every(function(e,u){return valueEqual(e,r[u])});if(\"object\"!=typeof u&&\"object\"!=typeof r)return!1;var e=valueOf(u),t=valueOf(r);return e!==u||t!==r?valueEqual(e,t):Object.keys(Object.assign({},u,r)).every(function(e){return valueEqual(u[e],r[e])})}module.exports=valueEqual;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/value-equal.min.js');\n} else {\n  module.exports = require('./cjs/value-equal.js');\n}\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst TypeKind = {\n  Any: 0,\n\n  Boolean: 1,\n  Number: 2,\n  String: 3,\n  Object: 4,\n  Array: 5,\n  Never: 6,\n  Function: 7,\n\n  Param: 8,\n  Type: 9,\n\n  This: 10,\n  Undefined: 11,\n  Null: 12,\n  Union: 13,\n  Intersection: 14,\n  Tuple: 15,\n  Indexed: 16,\n  Operator: 17,\n\n  Unknown: 18,\n};\n\nmodule.exports = TypeKind;\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst { Seq } = require('../../dist/immutable');\n// Note: intentionally using raw defs, not getTypeDefs to avoid circular ref.\n\nfunction collectMemberGroups(interfaceDef, options, defs) {\n  const members = {};\n\n  function collectFromDef(def, name) {\n    def.groups &&\n      def.groups.forEach((g) => {\n        Seq(g.members).forEach((memberDef, memberName) => {\n          collectMember(g.title || '', memberName, memberDef);\n        });\n      });\n\n    def.extends &&\n      def.extends.forEach((e) => {\n        let superModule = defs.Immutable;\n        e.name.split('.').forEach((part) => {\n          superModule =\n            superModule && superModule.module && superModule.module[part];\n        });\n        const superInterface = superModule && superModule.interface;\n        if (superInterface) {\n          collectFromDef(superInterface, e.name);\n        }\n      });\n\n    function collectMember(group, memberName, memberDef) {\n      let member = members[memberName];\n      if (member) {\n        if (!member.inherited) {\n          member.overrides = { name, def, memberDef };\n        }\n        if (!member.group && group) {\n          member.group = group;\n        }\n      } else {\n        member = {\n          group,\n          memberName: memberName.substr(1),\n          memberDef,\n        };\n        if (def !== interfaceDef) {\n          member.inherited = { name, def };\n        }\n        members[memberName] = member;\n      }\n    }\n  }\n\n  if (interfaceDef) {\n    collectFromDef(interfaceDef);\n  }\n\n  let groups = { '': [] };\n\n  if (options.showInGroups) {\n    Seq(members).forEach((member) => {\n      (groups[member.group] || (groups[member.group] = [])).push(member);\n    });\n  } else {\n    groups[''] = Seq(members)\n      .toIndexedSeq()\n      .sortBy((member) => member.memberName)\n      .toArray();\n  }\n\n  if (!options.showInherited) {\n    groups = Seq(groups)\n      .map((members) => members.filter((member) => !member.inherited))\n      .toObject();\n  }\n\n  return groups;\n}\n\nmodule.exports = collectMemberGroups;\n","/* eslint-env browser */\nglobal.runIt = function runIt(button) {\n  if (!global.RunKit) return;\n\n  const container = document.createElement('div');\n  const codeElement = button.parentNode;\n  const parent = codeElement.parentNode;\n\n  parent.insertBefore(container, codeElement);\n  parent.removeChild(codeElement);\n  codeElement.removeChild(button);\n\n  const options = JSON.parse(unescape(button.dataset.options));\n\n  function withCorrectVersion(code) {\n    return code.replace(\n      /require\\('immutable'\\)/g,\n      \"require('immutable@4.0.0-rc.9')\"\n    );\n  }\n\n  global.RunKit.createNotebook({\n    element: container,\n    nodeVersion: options.nodeVersion || '*',\n    preamble: withCorrectVersion(\n      'const assert = (' +\n        makeAssert +\n        \")(require('immutable'));\" +\n        (options.preamble || '')\n    ),\n    source: withCorrectVersion(\n      codeElement.textContent.replace(/\\n(>[^\\n]*\\n?)+$/g, '')\n    ),\n    minHeight: '52px',\n    onLoad: function (notebook) {\n      notebook.evaluate();\n    },\n  });\n};\n\nfunction makeAssert(I) {\n  const isIterable = I.isIterable || I.Iterable.isIterable;\n  let html = `\n    <style>\n      * {\n        font-size: 14px;\n        font-family: monospace;\n      }\n\n      code {\n        font-family: monospace;\n        color: #4183C4;\n        text-decoration: none;\n        text-decoration: none;\n        background: rgba(65, 131, 196, 0.1);\n        border-radius: 2px;\n        padding: 2px;\n    }\n\n      .success {\n        color: rgba(84,184,54,1.0);\n      }\n\n      .success:before {\n        content: \"✅\";\n      }\n\n      .failure {\n        color: rgba(220,47,33,1.0);\n      }\n\n      .failure i {\n        color: rgba(210,44,31,1.0);\n      }\n\n      .failure:before {\n        content: \"❌\";\n      }\n    </style>`;\n\n  function compare(lhs, rhs, same, identical) {\n    const both = !identical && isIterable(lhs) && isIterable(rhs);\n\n    if (both) return lhs.equals(rhs);\n\n    return lhs === rhs;\n  }\n\n  function message(lhs, rhs, same, identical) {\n    const result = compare(lhs, rhs, same, identical);\n    const comparison = result\n      ? identical\n        ? 'strict equal to'\n        : 'does equal'\n      : identical\n      ? 'not strict equal to'\n      : 'does not equal';\n    const className = result === same ? 'success' : 'failure';\n    const lhsString = isIterable(lhs) ? lhs + '' : JSON.stringify(lhs);\n    const rhsString = isIterable(rhs) ? rhs + '' : JSON.stringify(rhs);\n\n    return (html += `\n      <span class=\"${className}\">\n        <code>${lhsString}</code>\n        ${comparison}\n        <code>${rhsString}</code>\n      </span><br/>`);\n  }\n\n  function equal(lhs, rhs) {\n    return message(lhs, rhs, true);\n  }\n\n  function notEqual(lhs, rhs) {\n    return message(lhs, rhs, false);\n  }\n\n  function strictEqual(lhs, rhs) {\n    return message(lhs, rhs, true, true);\n  }\n\n  function notStrictEqual(lhs, rhs) {\n    return message(lhs, rhs, false, true);\n  }\n\n  return { equal, notEqual, strictEqual, notStrictEqual };\n}\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React, { Component, Fragment } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Seq } from '../../../../';\nimport TypeKind from '../../../lib/TypeKind';\nimport getGlobalData from './global';\nimport PropTypes from 'prop-types';\n\nexport class InterfaceDef extends Component {\n  static propTypes = {\n    name: PropTypes.string.isRequired,\n    def: PropTypes.object.isRequired,\n  };\n\n  render() {\n    const name = this.props.name;\n    const def = this.props.def;\n    return (\n      <span className=\"t interfaceDef\">\n        <span className=\"t keyword\">type </span>\n        <span className=\"t typeName\">{name}</span>\n        {def.typeParams && (\n          <>\n            {'<'}\n            {Seq(def.typeParams)\n              .map((t, k) => (\n                <span className=\"t typeParam\" key={k}>\n                  {t}\n                </span>\n              ))\n              .interpose(', ')\n              .toArray()}\n            {'>'}\n          </>\n        )}\n        {def.extends && (\n          <>\n            <span className=\"t keyword\"> extends </span>,\n            {Seq(def.extends)\n              .map((e, i) => <TypeDef key={i} type={e} />)\n              .interpose(', ')\n              .toArray()}\n          </>\n        )}\n        {def.implements && (\n          <>\n            <span className=\"t keyword\"> implements </span>,\n            {Seq(def.implements)\n              .map((e, i) => <TypeDef key={i} type={e} />)\n              .interpose(', ')\n              .toArray()}\n          </>\n        )}\n      </span>\n    );\n  }\n}\n\nexport class CallSigDef extends Component {\n  static propTypes = {\n    info: PropTypes.object,\n    name: PropTypes.string.isRequired,\n    callSig: PropTypes.object,\n    module: PropTypes.string,\n  };\n\n  callSigLength(info, module, name, sig) {\n    return (\n      (module ? module.length + 1 : 0) + name.length + funcLength(info, sig)\n    );\n  }\n\n  render() {\n    const info = this.props.info;\n    const module = this.props.module;\n    const name = this.props.name;\n    const callSig = this.props.callSig || {};\n\n    const shouldWrap = this.callSigLength(info, module, name, callSig) > 80;\n\n    return (\n      <span className=\"t callSig\">\n        {module && (\n          <>\n            <span className=\"t fnQualifier\">{module}</span>.\n          </>\n        )}\n        <span className=\"t fnName\">{name}</span>\n        {callSig.typeParams && (\n          <>\n            {'<'}\n            {Seq(callSig.typeParams)\n              .map((t, i) => (\n                <span key={i} className=\"t typeParam\">\n                  {t}\n                </span>\n              ))\n              .interpose(', ')\n              .toArray()}\n            {'>'}\n          </>\n        )}\n        {'('}\n        {callSig && functionParams(info, callSig.params, shouldWrap)}\n        {')'}\n        {callSig.type && (\n          <>\n            :\n            <TypeDef info={info} type={callSig.type} />\n          </>\n        )}\n      </span>\n    );\n  }\n}\n\nexport class TypeDef extends Component {\n  static propTypes = {\n    info: PropTypes.object,\n    type: PropTypes.object.isRequired,\n    prefix: PropTypes.number,\n  };\n\n  constructor(props, ...args) {\n    super(props, ...args);\n    this.state = {\n      hover: false,\n    };\n  }\n\n  render() {\n    const info = this.props.info;\n    const type = this.props.type;\n    const prefix = this.props.prefix;\n    switch (type.k) {\n      case TypeKind.Never:\n        return this.wrap('primitive', 'never');\n      case TypeKind.Any:\n        return this.wrap('primitive', 'any');\n      case TypeKind.This:\n        return this.wrap('primitive', 'this');\n      case TypeKind.Null:\n        return this.wrap('primitive', 'null');\n      case TypeKind.Undefined:\n        return this.wrap('primitive', 'undefined');\n      case TypeKind.Boolean:\n        return this.wrap('primitive', 'boolean');\n      case TypeKind.Number:\n        return this.wrap('primitive', 'number');\n      case TypeKind.String:\n        return this.wrap('primitive', 'string');\n      case TypeKind.Union:\n        return this.wrap('union', [\n          Seq(type.types)\n            .map((t, i) => <TypeDef key={i} info={info} type={t} />)\n            .interpose(' | ')\n            .toArray(),\n        ]);\n      case TypeKind.Intersection:\n        return this.wrap(\n          'intersection',\n          <>\n            {Seq(type.types)\n              .map((t) => <TypeDef info={info} type={t} />)\n              .interpose(' & ')\n              .toArray()}\n          </>\n        );\n      case TypeKind.Tuple:\n        return this.wrap(\n          'tuple',\n          <>\n            [\n            {Seq(type.types)\n              .map((t, i) => <TypeDef key={i} info={info} type={t} />)\n              .interpose(', ')\n              .toArray()}\n            ]\n          </>\n        );\n      case TypeKind.Object:\n        return this.wrap(\n          'object',\n          <>\n            {'{'}\n            {Seq(type.members)\n              .map((t, i) => <MemberDef key={i} member={t} />)\n              .interpose(', ')\n              .toArray()}\n            {'}'}\n          </>\n        );\n      case TypeKind.Indexed:\n        return this.wrap(\n          'indexed',\n          <>\n            <TypeDef info={info} type={type.type} />, [\n            <TypeDef info={info} type={type.index} />, ]\n          </>\n        );\n      case TypeKind.Operator:\n        return this.wrap(\n          'operator',\n          <>\n            {this.wrap('primitive', type.operator)}{' '}\n            <TypeDef info={info} type={type.type} />\n          </>\n        );\n      case TypeKind.Array:\n        return this.wrap(\n          'array',\n          <>\n            <TypeDef info={info} type={type.type} />\n            []\n          </>\n        );\n      case TypeKind.Function: {\n        const shouldWrap = (prefix || 0) + funcLength(info, type) > 78;\n        return this.wrap(\n          'function',\n          <>\n            {type.typeParams && (\n              <>\n                {'<'}\n                {Seq(type.typeParams)\n                  .map((t, k) => (\n                    <span className=\"t typeParam\" key={k}>\n                      {t}\n                    </span>\n                  ))\n                  .interpose(', ')\n                  .toArray()}\n                {'>'}\n              </>\n            )}\n            {'('}\n            {functionParams(info, type.params, shouldWrap)}\n            {') =>'}\n            <TypeDef info={info} type={type.type} />\n          </>\n        );\n      }\n      case TypeKind.Param:\n        return info && info.propMap[info.defining + '<' + type.param] ? (\n          <TypeDef type={info.propMap[info.defining + '<' + type.param]} />\n        ) : (\n          this.wrap('typeParam', type.param)\n        );\n      case TypeKind.Type: {\n        const qualifiedType = (type.qualifier || []).concat([type.name]);\n        const qualifiedTypeName = qualifiedType.join('.');\n        const def = qualifiedTypeName\n          .split('.')\n          .reduce(\n            (def, name) => def && def.module && def.module[name],\n            getGlobalData().Immutable\n          );\n        let typeNameElement = (\n          <>\n            {type.qualifier &&\n              Seq(type.qualifier)\n                .map((q, i) => (\n                  <span key={i}>\n                    <span className=\"t typeQualifier\">{q}</span>.\n                  </span>\n                ))\n                .toArray()}\n            <span className=\"t typeName\">{type.name}</span>\n          </>\n        );\n        if (def) {\n          typeNameElement = (\n            <Link to={'/' + qualifiedTypeName}>{typeNameElement}</Link>\n          );\n        }\n        return this.wrap(\n          'type',\n          <>\n            {typeNameElement}\n            {type.args && (\n              <>\n                {'<'}\n                {Seq(type.args)\n                  .map((a, i) => <TypeDef key={i} info={info} type={a} />)\n                  .interpose(', ')\n                  .toArray()}\n                {'>'}\n              </>\n            )}\n          </>\n        );\n      }\n    }\n    throw new Error('Unknown kind ' + type.k);\n  }\n\n  mouseOver = (event) => {\n    this.setState({ hover: true });\n    event.stopPropagation();\n  };\n\n  mouseOut = () => {\n    this.setState({ hover: false });\n  };\n\n  wrap(className, child) {\n    return (\n      <span\n        className={`t ${className} ${this.state.hover ? 'over' : 'notover'}`}\n        onMouseOver={this.mouseOver}\n        onFocus={this.mouseOver}\n        onMouseOut={this.mouseOut}\n        onBlur={this.mouseOut}\n      >\n        {child}\n      </span>\n    );\n  }\n}\n\nexport class MemberDef extends Component {\n  static propTypes = {\n    module: PropTypes.string,\n    member: PropTypes.object.isRequired,\n  };\n\n  render() {\n    const module = this.props.module;\n    const member = this.props.member;\n    return (\n      <span className=\"t member\">\n        {module && (\n          <>\n            <span className=\"t fnQualifier\">{module}</span>.\n          </>\n        )}\n        {member.index ? (\n          <>[{functionParams(null, member.params)}]</>\n        ) : (\n          <span className=\"t memberName\">{member.name}</span>\n        )}\n        {member.type && (\n          <>\n            :\n            <TypeDef type={member.type} />\n          </>\n        )}\n      </span>\n    );\n  }\n}\n\nfunction functionParams(info, params, shouldWrap) {\n  const elements = Seq(params)\n    .map((t, i) => (\n      <span key={i}>\n        {t.varArgs ? '...' : null}\n        <span className=\"t param\">{t.name}</span>\n        {t.optional ? '?: ' : ': '}\n        <TypeDef\n          prefix={t.name.length + (t.varArgs ? 3 : 0) + (t.optional ? 3 : 2)}\n          info={info}\n          type={t.type}\n        />\n        {i + 1 < params.length &&\n          (shouldWrap ? (\n            <>\n              , <br />\n            </>\n          ) : (\n            ', '\n          ))}\n      </span>\n    ))\n    .toArray();\n  return shouldWrap ? (\n    <div className=\"t blockParams\">{elements}</div>\n  ) : (\n    <>{elements}</>\n  );\n}\n\nfunction funcLength(info, sig) {\n  return (\n    (sig.typeParams ? 2 + sig.typeParams.join(', ').length : 0) +\n    2 +\n    (sig.params ? paramLength(info, sig.params) : 0) +\n    (sig.type ? 2 + typeLength(info, sig.type) : 0)\n  );\n}\n\nfunction paramLength(info, params) {\n  return params.reduce(\n    (s, p) =>\n      s +\n      (p.varArgs ? 3 : 0) +\n      p.name.length +\n      (p.optional ? 3 : 2) +\n      typeLength(info, p.type),\n    (params.length - 1) * 2\n  );\n}\n\nfunction memberLength(info, members) {\n  return members.reduce(\n    (s, m) =>\n      s +\n      (m.index ? paramLength(info, m.params) + 4 : m.name + 2) +\n      typeLength(info, m.type),\n    (members.length - 1) * 2\n  );\n}\n\nfunction typeLength(info, type) {\n  if (!type) {\n    throw new Error('Expected type');\n  }\n  switch (type.k) {\n    case TypeKind.Never:\n      return 5;\n    case TypeKind.Any:\n      return 3;\n    case TypeKind.This:\n      return 4;\n    case TypeKind.Null:\n      return 4;\n    case TypeKind.Undefined:\n      return 9;\n    case TypeKind.Boolean:\n      return 7;\n    case TypeKind.Number:\n      return 6;\n    case TypeKind.String:\n      return 6;\n    case TypeKind.Union:\n    case TypeKind.Intersection:\n      return (\n        type.types.reduce((s, t) => s + typeLength(info, t), 0) +\n        (type.types.length - 1) * 3\n      );\n    case TypeKind.Tuple:\n      return (\n        2 +\n        type.types.reduce((s, t) => s + typeLength(info, t), 0) +\n        (type.types.length - 1) * 2\n      );\n    case TypeKind.Object:\n      return 2 + memberLength(info, type.members);\n    case TypeKind.Indexed:\n      return 2 + typeLength(info, type.type) + typeLength(info, type.index);\n    case TypeKind.Operator:\n      return 1 + type.operator.length + typeLength(info, type.type);\n    case TypeKind.Array:\n      return typeLength(info, type.type) + 2;\n    case TypeKind.Function:\n      return 2 + funcLength(info, type);\n    case TypeKind.Param:\n      return info && info.propMap[info.defining + '<' + type.param]\n        ? typeLength(null, info.propMap[info.defining + '<' + type.param])\n        : type.param.length;\n    case TypeKind.Type:\n      return (\n        (type.qualifier ? 1 + type.qualifier.join('.').length : 0) +\n        type.name.length +\n        (!type.args\n          ? 0\n          : type.args.reduce(\n              (s, a) => s + typeLength(info, a),\n              type.args.length * 2\n            ))\n      );\n  }\n  throw new Error('Type with unknown kind ' + JSON.stringify(type));\n}\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\n\nimport SVGSet from '../../src/SVGSet';\nimport Logo from '../../src/Logo';\nimport getGlobalData from './global';\n\nfunction DocHeader() {\n  return (\n    <div className=\"header\">\n      <div className=\"miniHeader\">\n        <div className=\"miniHeaderContents\">\n          <a href=\"../\" target=\"_self\" className=\"miniLogo\">\n            <SVGSet>\n              <Logo color=\"#FC4349\" />\n              <Logo color=\"#2C3E50\" inline />\n            </SVGSet>\n          </a>\n          <a href=\"./\" target=\"_self\">\n            Docs (v\n            {getGlobalData().Immutable.version})\n          </a>\n          <a href=\"https://stackoverflow.com/questions/tagged/immutable.js?sort=votes\">\n            Questions\n          </a>\n          <a href=\"https://github.com/immutable-js-oss/immutable-js\">Github</a>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default DocHeader;\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Seq } from '../../../../';\nimport Markdown from './MarkDown';\nimport PropTypes from 'prop-types';\n\nclass DocOverview extends Component {\n  static propTypes = {\n    def: PropTypes.object.isRequired,\n  };\n\n  render() {\n    const def = this.props.def;\n    const doc = def.doc;\n\n    return (\n      <div>\n        {doc && (\n          <section>\n            <Markdown contents={doc.synopsis} />\n            {doc.description && <Markdown contents={doc.description} />}\n          </section>\n        )}\n\n        <h4 className=\"groupTitle\">API</h4>\n\n        {Seq(def.module)\n          .map((t, name) => {\n            const isFunction = !t.interface && !t.module;\n            if (isFunction) {\n              t = t.call;\n            }\n            const anchorLink = `/${name}`;\n            return (\n              <section key={name} className=\"interfaceMember\">\n                <h3 className=\"memberLabel\">\n                  <Link to={anchorLink}>{name + (isFunction ? '()' : '')}</Link>\n                </h3>\n                {t.doc && (\n                  <Markdown className=\"detail\" contents={t.doc.synopsis} />\n                )}\n              </section>\n            );\n          })\n          .valueSeq()\n          .toArray()}\n      </div>\n    );\n  }\n}\n\nexport default DocOverview;\n","import React, { Component } from 'react';\n\nclass DocSearch extends Component {\n  constructor(props, ...args) {\n    super(props, ...args);\n    this.state = {\n      enabled: true,\n    };\n  }\n\n  componentDidMount() {\n    const script = document.createElement('script');\n    const firstScript = document.getElementsByTagName('script')[0];\n    script.src =\n      'https://cdn.jsdelivr.net/npm/docsearch.js@2.5.2/dist/cdn/docsearch.min.js';\n    script.addEventListener(\n      'load',\n      () => {\n        // Initialize Algolia search - unless we are pre-rendering.\n        if (typeof document !== 'undefined' && window.docsearch) {\n          window.docsearch({\n            apiKey: '83f61f865ef4cb682e0432410c2f7809',\n            indexName: 'immutable_js',\n            inputSelector: '#algolia-docsearch',\n          });\n        } else {\n          this.setState({ enabled: false });\n        }\n      },\n      false\n    );\n    firstScript.parentNode.insertBefore(script, firstScript);\n\n    const link = document.createElement('link');\n    const firstLink = document.getElementsByTagName('link')[0];\n    link.rel = 'stylesheet';\n    link.href =\n      'https://cdn.jsdelivr.net/npm/docsearch.js@2.5.2/dist/cdn/docsearch.min.css';\n    firstLink.parentNode.insertBefore(link, firstLink);\n  }\n\n  render() {\n    return this.state.enabled ? (\n      <input\n        id=\"algolia-docsearch\"\n        className=\"docSearch\"\n        type=\"search\"\n        placeholder=\"Search Immutable.js Documentation\"\n      />\n    ) : null;\n  }\n}\n\nexport default DocSearch;\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class MarkDown extends Component {\n  static propTypes = {\n    contents: PropTypes.oneOfType([PropTypes.string, PropTypes.node])\n      .isRequired,\n    className: PropTypes.string,\n  };\n\n  shouldComponentUpdate() {\n    return false;\n  }\n\n  render() {\n    const html = this.props.contents;\n    return (\n      <div\n        className={this.props.className}\n        dangerouslySetInnerHTML={{ __html: html }}\n      />\n    );\n  }\n}\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React, { Component } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Map, Seq } from '../../../../';\nimport getGlobalData from './global';\n\nclass SideBar extends Component {\n  static propTypes = {\n    focus: PropTypes.string,\n    memberGroups: PropTypes.object,\n    toggleShowInherited: PropTypes.func.isRequired,\n    toggleShowInGroups: PropTypes.func.isRequired,\n    selectDocVersion: PropTypes.func.isRequired,\n    showInGroups: PropTypes.bool.isRequired,\n    showInherited: PropTypes.bool.isRequired,\n  };\n\n  onDocVersionChanged = (evt) => {\n    const index = evt.target.value;\n    const versions = window.versions || [];\n    if (versions[index]) {\n      this.props.selectDocVersion(versions[index]);\n    }\n  };\n\n  render() {\n    const type = getGlobalData().Immutable;\n    const versions = window.versions || [];\n    const defaultVersionIndex = versions.findIndex(\n      (v) => v.version === type.version\n    );\n\n    return (\n      <div className=\"sideBar\">\n        <div className=\"toolBar\">\n          <div className=\"versionSelector\">\n            Doc version&nbsp;\n            <select\n              onChange={this.onDocVersionChanged}\n              defaultValue={defaultVersionIndex}\n            >\n              {versions.map((v, index) => (\n                <option value={index} key={v.version}>\n                  {v.version}\n                </option>\n              ))}\n            </select>\n          </div>\n          <div\n            onClick={this.props.toggleShowInGroups}\n            onKeyPress={this.props.toggleShowInGroups}\n          >\n            <span className={this.props.showInGroups ? 'selected' : ''}>\n              Grouped\n            </span>\n            {' • '}\n            <span className={this.props.showInGroups ? '' : 'selected'}>\n              Alphabetized\n            </span>\n          </div>\n          <div\n            onClick={this.props.toggleShowInherited}\n            onKeyPress={this.props.toggleShowInherited}\n          >\n            <span className={this.props.showInherited ? 'selected' : ''}>\n              Inherited\n            </span>\n            {' • '}\n            <span className={this.props.showInherited ? '' : 'selected'}>\n              Defined\n            </span>\n          </div>\n        </div>\n        <div className=\"scrollContent\">\n          <h4 className=\"groupTitle\">API</h4>\n          {Seq(type.module)\n            .flatMap((t, name) => flattenSubmodules(Map(), t, name))\n            .map((t, name) => this.renderSideBarType(name, t))\n            .valueSeq()\n            .toArray()}\n        </div>\n      </div>\n    );\n  }\n\n  renderSideBarType(typeName, type) {\n    const isFocus = this.props.focus === typeName;\n    const isFunction = !type.interface && !type.module;\n    const call = type.call;\n    const functions = Seq(type.module).filter((t) => !t.interface && !t.module);\n\n    let label = typeName + (isFunction ? '()' : '');\n\n    if (!isFocus) {\n      label = (\n        <NavLink exact to={'/' + typeName}>\n          {label}\n        </NavLink>\n      );\n    }\n\n    const memberGroups = this.props.memberGroups;\n\n    const members =\n      !isFocus || isFunction ? null : (\n        <div className=\"members\">\n          {call && (\n            <section>\n              <h4 className=\"groupTitle\">Construction</h4>\n              <div>\n                <NavLink exact to={'/' + typeName + '/' + typeName}>\n                  {typeName + '()'}\n                </NavLink>\n              </div>\n            </section>\n          )}\n\n          {functions.count() > 0 && (\n            <section>\n              <h4 className=\"groupTitle\">Static Methods</h4>\n              {functions\n                .map((t, name) => (\n                  <div key={name}>\n                    <NavLink exact to={'/' + typeName + '/' + name}>\n                      {typeName + '.' + name + '()'}\n                    </NavLink>\n                  </div>\n                ))\n                .valueSeq()\n                .toArray()}\n            </section>\n          )}\n\n          <section>\n            {Seq(memberGroups)\n              .map((members, title) =>\n                members.length === 0\n                  ? null\n                  : Seq([\n                      <h4 key={title || 'Members'} className=\"groupTitle\">\n                        {title || 'Members'}\n                      </h4>,\n                      Seq(members).map((member) => (\n                        <div key={member.memberName}>\n                          <NavLink\n                            exact\n                            to={'/' + typeName + '/' + member.memberName}\n                          >\n                            {member.memberName +\n                              (member.memberDef && member.memberDef.signatures\n                                ? '()'\n                                : '')}\n                          </NavLink>\n                        </div>\n                      )),\n                    ])\n              )\n              .flatten()\n              .valueSeq()\n              .toArray()}\n          </section>\n        </div>\n      );\n\n    return (\n      <div key={typeName}>\n        <h2>{label}</h2>\n        {members}\n      </div>\n    );\n  }\n}\n\nfunction flattenSubmodules(modules, type, name) {\n  modules = modules.set(name, type);\n  return type.module\n    ? Seq(type.module)\n        .filter((t) => t.interface || t.module)\n        .reduce(\n          (modules, subT, subName) =>\n            flattenSubmodules(modules, subT, name + '.' + subName),\n          modules\n        )\n    : modules;\n}\n\nexport default SideBar;\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React, { Component } from 'react';\nimport RouterPropTypes from 'react-router-prop-types';\nimport isMobile from './isMobile';\nimport SideBar from './SideBar';\nimport DocOverview from './DocOverview';\nimport collectMemberGroups from '../../../lib/collectMemberGroups';\nimport getGlobalData from './global';\nimport FunctionDoc from './components/FunctionDoc';\nimport TypeDoc from './components/TypeDoc';\n\nconst emptyMatch = {};\nconst FIXED_HEADER_HEIGHT = 75;\n\nclass TypeDocumentation extends Component {\n  static propTypes = {\n    match: RouterPropTypes.match,\n  };\n\n  constructor(props, ...args) {\n    super(props, ...args);\n    this.state = {\n      showInherited: true,\n      showInGroups: true,\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.match && this.props.match.params) {\n      this.scrollToElement(this.props.match.params);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const previousMatch =\n      prevProps.match && prevProps.match.params\n        ? prevProps.match.params\n        : emptyMatch;\n    const thisMatch =\n      this.props.match && this.props.match.params\n        ? this.props.match.params\n        : emptyMatch;\n    if (\n      previousMatch.name !== thisMatch.name ||\n      previousMatch.memberName !== thisMatch.memberName\n    ) {\n      this.scrollToElement(thisMatch);\n    }\n  }\n\n  offsetTop(node) {\n    let top = 0;\n    do {\n      top += node.offsetTop;\n    } while ((node = node.offsetParent));\n    return top;\n  }\n\n  scrollToElement(params) {\n    if (typeof document === 'undefined') {\n      // pre-rendering, skip scrolling\n      return;\n    }\n    const { name, memberName } = params;\n    const id = memberName ? `/${name}/${memberName}` : `/${name}`;\n    const element = document.getElementById(id);\n    if (element) {\n      window.scrollTo({\n        left: window.scrollX,\n        top: this.offsetTop(element) - FIXED_HEADER_HEIGHT,\n        behavior: 'auto',\n      });\n    }\n  }\n\n  determineDoc() {\n    const rootDef = getGlobalData().Immutable;\n\n    if (!this.props.match) {\n      return {\n        def: rootDef,\n        name: undefined,\n        memberName: undefined,\n      };\n    }\n\n    const { name, memberName } = this.props.match.params;\n    const namePath = name ? name.split('.') : [];\n    const def = namePath.reduce(\n      (def, subName) => def && def.module && def.module[subName],\n      rootDef\n    );\n\n    return { def, name, memberName };\n  }\n\n  toggleShowInGroups = () =>\n    this.setState((prevState) => ({ showInGroups: !prevState.showInGroups }));\n\n  toggleShowInherited = () =>\n    this.setState((prevState) => ({ showInherited: !prevState.showInherited }));\n\n  selectDocVersion = (version) => {\n    const currentVersion = getGlobalData().Immutable.version;\n    // determine path when deployed in a sub folder of the domain\n    let path = window.location.pathname.substring(0, window.location.pathname.indexOf('/docs/') + 5);\n    if (currentVersion === version) {\n      return;\n    }\n\n    if (!version.isLatest) {\n      path = `${path}/${version.docName}/`;\n    }\n\n    window.location.pathname = path;\n  };\n\n  render() {\n    const { name, memberName, def } = this.determineDoc();\n    const memberGroups = collectMemberGroups(\n      def && def.interface,\n      {\n        showInGroups: this.state.showInGroups,\n        showInherited: this.state.showInherited,\n      },\n      getGlobalData()\n    );\n\n    let docComponent;\n    if (!def) {\n      docComponent = <NotFound />;\n    } else if (!name) {\n      docComponent = <DocOverview def={def} />;\n    } else if (!def.interface && !def.module) {\n      docComponent = <FunctionDoc name={name} def={def.call} />;\n    } else {\n      docComponent = (\n        <TypeDoc\n          name={name}\n          def={def}\n          memberName={memberName}\n          memberGroups={memberGroups}\n        />\n      );\n    }\n\n    return (\n      <div>\n        {isMobile || (\n          <SideBar\n            focus={name}\n            memberGroups={memberGroups}\n            selectDocVersion={this.selectDocVersion}\n            toggleShowInherited={this.toggleShowInherited}\n            toggleShowInGroups={this.toggleShowInGroups}\n            showInGroups={this.state.showInGroups}\n            showInherited={this.state.showInherited}\n          />\n        )}\n        <div key={name} className=\"docContents\">\n          {docComponent}\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction NotFound() {\n  return <div>Not found</div>;\n}\n\nexport default TypeDocumentation;\n","import React from 'react';\nimport constants from '../constants';\n\nexport default function Disclaimer() {\n  return (\n    <section className=\"disclaimer\">\n      This documentation is generated from{' '}\n      <a href={constants.typeDefURL}>Immutable.d.ts</a>. Pull requests and{' '}\n      <a href={constants.issuesURL}>Issues</a> welcome.\n    </section>\n  );\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport MarkDown from '../MarkDown';\nimport { CallSigDef } from '../Defs';\nimport Disclaimer from './Disclaimer';\n\nexport default class FunctionDoc extends Component {\n  static propTypes = {\n    name: PropTypes.string.isRequired,\n    def: PropTypes.object.isRequired,\n  };\n\n  render() {\n    const name = this.props.name;\n    const def = this.props.def;\n    const doc = def.doc || {};\n\n    return (\n      <div>\n        <h1 className=\"typeHeader\">{name + '()'}</h1>\n        {doc.synopsis && (\n          <MarkDown className=\"synopsis\" contents={doc.synopsis} />\n        )}\n        <code className=\"codeBlock memberSignature\">\n          {def.signatures.map((callSig, i) => [\n            <CallSigDef key={i} name={name} callSig={callSig} />,\n            '\\n',\n          ])}\n        </code>\n        {doc.notes &&\n          doc.notes.map((note, i) => (\n            <section key={i}>\n              <h4 className=\"infoHeader\">{note.name}</h4>\n              {note.name === 'alias' ? (\n                <CallSigDef name={note.body} />\n              ) : (\n                note.body\n              )}\n            </section>\n          ))}\n        {doc.description && (\n          <section>\n            <h4 className=\"infoHeader\">\n              {doc.description.substr(0, 5) === '<code'\n                ? 'Example'\n                : 'Discussion'}\n            </h4>\n            <MarkDown className=\"discussion\" contents={doc.description} />\n          </section>\n        )}\n        <Disclaimer />\n      </div>\n    );\n  }\n}\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { CallSigDef, MemberDef } from '../Defs';\nimport isMobile from '../isMobile';\nimport MarkDown from '../MarkDown';\n\nexport default class MemberDoc extends Component {\n  static propTypes = {\n    showDetail: PropTypes.bool.isRequired,\n    member: PropTypes.object.isRequired,\n    parentName: PropTypes.string.isRequired,\n    typePropMap: PropTypes.object,\n  };\n\n  constructor(props, ...args) {\n    super(props, ...args);\n    this.state = {\n      detail: props.showDetail,\n    };\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (nextProps.showDetail && !this.props.showDetail) {\n      this.setState({ detail: true });\n    }\n  }\n\n  toggleDetail = (evt) => {\n    evt.preventDefault();\n    this.setState((prevState) => ({ detail: !prevState.detail }));\n  };\n\n  render() {\n    const typePropMap = this.props.typePropMap;\n    const member = this.props.member;\n    const module = member.isStatic ? this.props.parentName : null;\n    const name = member.memberName;\n    const def = member.memberDef;\n    const doc = def.doc || {};\n    const isProp = !def.signatures;\n\n    const typeInfo = member.inherited && {\n      propMap: typePropMap,\n      defining: member.inherited.name,\n    };\n\n    const showDetail = isMobile ? this.state.detail : true;\n\n    const memberAnchorLink = `/${this.props.parentName}/${name}`;\n\n    return (\n      <div\n        className=\"interfaceMember\"\n        ref={(element) => {\n          this._container = element;\n        }}\n      >\n        <h3 className=\"memberLabel\">\n          <Link\n            id={memberAnchorLink}\n            to={memberAnchorLink}\n            onClick={isMobile ? this.toggleDetail : null}\n          >\n            {(module ? module + '.' : '') + name + (isProp ? '' : '()')}\n          </Link>\n        </h3>\n        <div>\n          {showDetail && (\n            <div key=\"detail\" className=\"detail\">\n              {doc.synopsis && (\n                <MarkDown className=\"synopsis\" contents={doc.synopsis} />\n              )}\n              {isProp ? (\n                <code className=\"codeBlock memberSignature\">\n                  <MemberDef\n                    module={module}\n                    member={{ name, type: def.type }}\n                  />\n                </code>\n              ) : (\n                <code className=\"codeBlock memberSignature\">\n                  {def.signatures.map((callSig, i) => [\n                    <CallSigDef\n                      key={i}\n                      info={typeInfo}\n                      module={module}\n                      name={name}\n                      callSig={callSig}\n                    />,\n                    '\\n',\n                  ])}\n                </code>\n              )}\n              {member.inherited && (\n                <section>\n                  <h4 className=\"infoHeader\">Inherited from</h4>\n                  <code>\n                    <Link to={'/' + member.inherited.name + '/' + name}>\n                      {member.inherited.name + '#' + name}\n                    </Link>\n                  </code>\n                </section>\n              )}\n              {member.overrides && (\n                <section>\n                  <h4 className=\"infoHeader\">Overrides</h4>\n                  <code>\n                    <Link to={'/' + member.overrides.name + '/' + name}>\n                      {member.overrides.name + '#' + name}\n                    </Link>\n                  </code>\n                </section>\n              )}\n              {doc.notes &&\n                doc.notes.map((note, i) => (\n                  <section key={i}>\n                    <h4 className=\"infoHeader\">{note.name}</h4>\n                    {note.name === 'alias' ? (\n                      <code>\n                        <CallSigDef name={note.body} />\n                      </code>\n                    ) : (\n                      <MarkDown className=\"discussion\" contents={note.body} />\n                    )}\n                  </section>\n                ))}\n              {doc.description && (\n                <section>\n                  <h4 className=\"infoHeader\">\n                    {doc.description.substr(0, 5) === '<code'\n                      ? 'Example'\n                      : 'Discussion'}\n                  </h4>\n                  <MarkDown className=\"discussion\" contents={doc.description} />\n                </section>\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Seq } from '../../../../../';\nimport MarkDown from '../MarkDown';\nimport { CallSigDef, InterfaceDef } from '../Defs';\nimport MemberDoc from './MemberDoc';\nimport getGlobalData from '../global';\nimport TypeKind from '../../../../lib/TypeKind';\nimport Disclaimer from './Disclaimer';\n\nexport default class TypeDoc extends Component {\n  static propTypes = {\n    name: PropTypes.string.isRequired,\n    def: PropTypes.object.isRequired,\n    memberName: PropTypes.string,\n    memberGroups: PropTypes.object.isRequired,\n  };\n\n  /**\n   * Get a map from super type parameter to concrete type definition. This is\n   * used when rendering inherited type definitions to ensure contextually\n   * relevant information.\n   *\n   * Example:\n   *\n   *   type A<T> implements B<number, T>\n   *   type B<K, V> implements C<K, V, V>\n   *   type C<X, Y, Z>\n   *\n   * parse C:\n   *   {}\n   *\n   * parse B:\n   *   { C<X: K\n   *     C<Y: V\n   *     C<Z: V }\n   *\n   * parse A:\n   *   { B<K: number\n   *     B<V: T\n   *     C<X: number\n   *     C<Y: T\n   *     C<Z: T }\n   */\n  getTypePropMap(def) {\n    const map = {};\n    if (!def || !def.extends) {\n      return map;\n    }\n\n    def.extends.forEach((e) => {\n      let superModule = getGlobalData().Immutable;\n      e.name.split('.').forEach((part) => {\n        superModule =\n          superModule && superModule.module && superModule.module[part];\n      });\n      const superInterface = superModule && superModule.interface;\n      if (superInterface) {\n        const interfaceMap = Seq(superInterface.typeParams)\n          .toKeyedSeq()\n          .flip()\n          .map((i) => e.args[i])\n          .toObject();\n        Seq(interfaceMap).forEach((v, k) => {\n          map[e.name + '<' + k] = v;\n        });\n        const superMap = this.getTypePropMap(superInterface);\n        Seq(superMap).forEach((v, k) => {\n          map[k] = v.k === TypeKind.Param ? interfaceMap[v.param] : v;\n        });\n      }\n    });\n    return map;\n  }\n\n  render() {\n    const name = this.props.name;\n    const def = this.props.def;\n    const memberName = this.props.memberName;\n    const memberGroups = this.props.memberGroups;\n\n    const doc = def.doc || {};\n    const call = def.call;\n    const functions = Seq(def.module).filter((t) => !t.interface && !t.module);\n    const types = Seq(def.module).filter((t) => t.interface || t.module);\n    const interfaceDef = def.interface;\n    const typePropMap = this.getTypePropMap(interfaceDef);\n\n    return (\n      <div>\n        <h1 className=\"typeHeader\">{name}</h1>\n        {doc.synopsis && (\n          <MarkDown className=\"synopsis\" contents={doc.synopsis} />\n        )}\n        {interfaceDef && (\n          <code className=\"codeBlock memberSignature\">\n            <InterfaceDef name={name} def={interfaceDef} />\n          </code>\n        )}\n\n        {doc.notes &&\n          doc.notes.map((note, i) => (\n            <section key={i}>\n              <h4 className=\"infoHeader\">{note.name}</h4>\n              {note.name === 'alias' ? (\n                <CallSigDef name={note.body} />\n              ) : (\n                note.body\n              )}\n            </section>\n          ))}\n\n        {doc.description && (\n          <section>\n            <h4 className=\"infoHeader\">\n              {doc.description.substr(0, 5) === '<code'\n                ? 'Example'\n                : 'Discussion'}\n            </h4>\n            <MarkDown className=\"discussion\" contents={doc.description} />\n          </section>\n        )}\n\n        {types.count() > 0 && (\n          <section>\n            <h4 className=\"groupTitle\">Sub-types</h4>\n            {types\n              .map((t, typeName) => (\n                <div key={typeName}>\n                  <Link to={'/' + (name ? name + '.' + typeName : typeName)}>\n                    {name ? name + '.' + typeName : typeName}\n                  </Link>\n                </div>\n              ))\n              .valueSeq()\n              .toArray()}\n          </section>\n        )}\n\n        {call && (\n          <section>\n            <h4 className=\"groupTitle\">Construction</h4>\n            <MemberDoc\n              showDetail={name === memberName}\n              parentName={name}\n              member={{\n                memberName: name,\n                memberDef: call,\n              }}\n            />\n          </section>\n        )}\n\n        {functions.count() > 0 && (\n          <section>\n            <h4 className=\"groupTitle\">Static methods</h4>\n            {functions\n              .map((t, fnName) => (\n                <MemberDoc\n                  key={fnName}\n                  showDetail={fnName === memberName}\n                  parentName={name}\n                  member={{\n                    memberName: fnName,\n                    memberDef: t.call,\n                    isStatic: true,\n                  }}\n                />\n              ))\n              .valueSeq()\n              .toArray()}\n          </section>\n        )}\n\n        <section>\n          {Seq(memberGroups)\n            .map((members, title) =>\n              members.length === 0\n                ? null\n                : Seq([\n                    <h4 key={title || 'Members'} className=\"groupTitle\">\n                      {title || 'Members'}\n                    </h4>,\n                    Seq(members).map((member) => (\n                      <MemberDoc\n                        typePropMap={typePropMap}\n                        key={member.memberName}\n                        showDetail={member.memberName === memberName}\n                        parentName={name}\n                        member={member}\n                      />\n                    )),\n                  ])\n            )\n            .flatten()\n            .valueSeq()\n            .toArray()}\n        </section>\n\n        <Disclaimer />\n      </div>\n    );\n  }\n}\n","export default {\n  typeDefURL:\n    'https://github.com/immutable-js-oss/immutable-js/blob/master/type-definitions/Immutable.d.ts',\n  issuesURL: 'https://github.com/immutable-js-oss/immutable-js/issues',\n};\n","/**\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nexport default function getGlobalData() {\n  if (typeof document === 'undefined') {\n    // pre-rendering, injected by gulp\n    return global.data;\n  }\n  return window.data;\n}\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport DocHeader from './DocHeader';\nimport DocSearch from './DocSearch';\nimport TypeDocumentation from './TypeDocumentation';\n\nimport '../../../lib/runkit-embed';\n\nfunction App() {\n  return (\n    <div>\n      <DocHeader />\n      <div className=\"pageBody\" id=\"body\">\n        <div className=\"contents\">\n          <DocSearch />\n          <Switch>\n            <Route exact path=\"/\" component={TypeDocumentation} />\n            <Route path=\"/:name/:memberName\" component={TypeDocumentation} />\n            <Route path=\"/:name\" component={TypeDocumentation} />\n          </Switch>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// TODO useless, always false\nfunction isMobileMatch() {\n  if (typeof window === 'undefined') {\n    return false;\n  }\n  if (!window.matchMedia) {\n    return false;\n  }\n  return window.matchMedia('(max-device-width: 680px)').matches;\n}\n\nexport default !!isMobileMatch();\n","/**\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport { StaticRouter as Router } from 'react-router-dom';\nimport { renderToString } from 'react-dom/server';\nimport App from './index';\n\n// This is used by the gulp pre-rendering process to generate a static version of the docs, which search engines can crawl.\n// global.output is picked up by vm.runInNewContext\nconst content = renderToString(\n  <Router basename=\"#\" location=\"/\">\n    <App />\n  </Router>\n);\nglobal.output = content;\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class Logo extends Component {\n  static propTypes = {\n    opacity: PropTypes.number,\n    color: PropTypes.string.isRequired,\n  };\n\n  static defaultProps = {\n    opacity: 1,\n  };\n\n  shouldComponentUpdate(nextProps) {\n    return nextProps.opacity !== this.props.opacity;\n  }\n\n  render() {\n    let opacity = this.props.opacity;\n    if (opacity === undefined) {\n      opacity = 1;\n    }\n    return !this.props.inline ? (\n      <g fill={this.props.color} style={{ opacity }}>\n        <path d=\"M0,0l13.9,0v41.1H0L0,0z\" />\n        <path d=\"M18.2,0L29,0l10.7,15.8L50.4,0l10.9,0v41.1H48.1V26.3l-8.4,12.3l-8.4-12.3v14.8H18.2V0z\" />\n        <path d=\"M65.5,0l10.9,0L87,15.8L97.7,0l10.9,0v41.1H95.4V26.3L87,38.7l-8.4-12.3v14.8H65.5V0z\" />\n        <path\n          d=\"M128.6,42.2c-2.6,0-4.9-0.3-7-1c-2.1-0.7-3.9-1.6-5.4-3c-1.5-1.3-2.6-3-3.4-5c-0.8-2-1.2-4.4-1.2-7.1V0\n          l13.1,0v25.6c0,1.4,0.3,2.5,0.9,3.3c0.6,0.8,1.6,1.1,3,1.1c1.4,0,2.4-0.4,3-1.1c0.6-0.8,0.9-1.9,0.9-3.3V0l13.2,0v26.1\n          c0,2.7-0.4,5.1-1.2,7.1c-0.8,2-2,3.7-3.5,5c-1.5,1.3-3.3,2.3-5.4,3C133.5,41.8,131.2,42.2,128.6,42.2z\"\n        />\n        <path d=\"M155.4,10.8h-7.6V0l28.7,0v10.8h-7.6v30.3h-13.6V10.8z\" />\n        <path\n          d=\"M186.4,0l9.9,0l15.6,41.1h-12.9l-1.4-3.7h-12.5l-1.4,3.7h-12.9L186.4,0z M194.1,28.4l-2.8-7.2l-2.8,7.2\n          H194.1z\"\n        />\n        <path\n          d=\"M212.9,0L229,0c2.1,0,3.9,0.2,5.6,0.7c1.7,0.5,3.2,1.2,4.4,2.1s2.2,2.1,2.8,3.5c0.7,1.4,1,3,1,4.8\n          c0,1.3-0.2,2.4-0.5,3.4c-0.3,0.9-0.7,1.7-1,2.3c-0.5,0.7-1,1.4-1.5,1.8c0.9,0.6,1.7,1.3,2.5,2.2c0.6,0.8,1.2,1.8,1.7,3\n          c0.5,1.2,0.8,2.7,0.8,4.4c0,2-0.3,3.8-1,5.4c-0.7,1.6-1.7,3-3,4.1c-1.3,1.1-2.9,2-4.7,2.6c-1.9,0.6-4,0.9-6.3,0.9h-16.8V0z\n           M230.2,12.5c0-1.9-1-2.8-3.1-2.8h-1.5v5.7h1.5C229.2,15.4,230.2,14.4,230.2,12.5z M227.1,31.4c3.1,0,4.7-1.2,4.7-3.6\n          c0-2.4-1.6-3.6-4.7-3.6h-1.5v7.2H227.1z\"\n        />\n        <path d=\"M248.3,0L262,0v30.3h11.3v10.8h-25V0z\" />\n        <path d=\"M275.3,0l24.2,0v10.8h-11.1v4.6h10.9v10.2h-10.9v4.7H300v10.8h-24.7V0z\" />\n      </g>\n    ) : (\n      <g fill={this.props.color} style={{ opacity }}>\n        <path d=\"M0,0l13.9,0v41.1H0L0,0z M7.8,36.2V4.9H6.2v31.3H7.8z\" />\n        <path\n          d=\"M18.2,0L29,0l10.7,15.8L50.4,0l10.9,0v41.1H48.1V26.3l-8.4,12.3l-8.4-12.3v14.8H18.2V0z M25.9,36.2V7.9\n          L39.7,28L53.5,7.9v28.3h1.6V4.9h-1.6L39.7,25.2L25.9,4.9h-1.6v31.3H25.9z\"\n        />\n        <path\n          d=\"M65.5,0l10.9,0L87,15.8L97.7,0l10.9,0v41.1H95.4V26.3L87,38.7l-8.4-12.3v14.8H65.5V0z M73.2,36.2V7.9\n          L87,28l13.7-20.1v28.3h1.6V4.9h-1.6L87,25.2L73.2,4.9h-1.6v31.3H73.2z\"\n        />\n        <path\n          d=\"M128.6,42.2c-2.6,0-4.9-0.3-7-1c-2.1-0.7-3.9-1.6-5.4-3c-1.5-1.3-2.6-3-3.4-5c-0.8-2-1.2-4.4-1.2-7.1V0\n          l13.1,0v25.6c0,1.4,0.3,2.5,0.9,3.3c0.6,0.8,1.6,1.1,3,1.1c1.4,0,2.4-0.4,3-1.1c0.6-0.8,0.9-1.9,0.9-3.3V0l13.2,0v26.1\n          c0,2.7-0.4,5.1-1.2,7.1c-0.8,2-2,3.7-3.5,5c-1.5,1.3-3.3,2.3-5.4,3C133.5,41.8,131.2,42.2,128.6,42.2z M128.6,34.8\n          c-6.2,0-9.2-3-9.2-9.1V4.9h-1.6v20.8c0,3.5,0.9,6.1,2.8,7.9c1.9,1.8,4.6,2.7,8,2.7c3.5,0,6.2-0.9,8.1-2.7c1.9-1.8,2.8-4.5,2.8-7.9\n          V4.9h-1.7v20.8C137.8,31.7,134.8,34.8,128.6,34.8z\"\n        />\n        <path d=\"M155.4,10.8h-7.6V0l28.7,0v10.8h-7.6v30.3h-13.6V10.8z M163,36.2V6.4h8.8V4.9h-19.2v1.5h8.8v29.8H163z\" />\n        <path\n          d=\"M186.4,0l9.9,0l15.6,41.1h-12.9l-1.4-3.7h-12.5l-1.4,3.7h-12.9L186.4,0z M180,36.2l1.2-3.1h20.3l1.2,3.1\n          h1.7L192.5,4.9h-2.3l-11.9,31.3H180z M191.3,6.4l9.6,25.2h-19.2L191.3,6.4z M194.1,28.4l-2.8-7.2l-2.8,7.2H194.1z\"\n        />\n        <path\n          d=\"M212.9,0L229,0c2.1,0,3.9,0.2,5.6,0.7c1.7,0.5,3.2,1.2,4.4,2.1s2.2,2.1,2.8,3.5c0.7,1.4,1,3,1,4.8\n          c0,1.3-0.2,2.4-0.5,3.4c-0.3,0.9-0.7,1.7-1,2.3c-0.5,0.7-1,1.4-1.5,1.8c0.9,0.6,1.7,1.3,2.5,2.2c0.6,0.8,1.2,1.8,1.7,3\n          c0.5,1.2,0.8,2.7,0.8,4.4c0,2-0.3,3.8-1,5.4c-0.7,1.6-1.7,3-3,4.1c-1.3,1.1-2.9,2-4.7,2.6c-1.9,0.6-4,0.9-6.3,0.9h-16.8V0z\n           M228,36.2c3.6,0,6.3-0.8,8-2.3c1.7-1.6,2.6-3.6,2.6-6.2c0-1.7-0.4-3-1.1-4c-0.7-1-1.5-1.8-2.3-2.4c-1-0.7-2.2-1.1-3.4-1.4\n          c1-0.3,1.9-0.7,2.7-1.4c0.7-0.5,1.3-1.3,1.9-2.2s0.8-2.1,0.8-3.5c0-2.6-0.8-4.5-2.5-5.9c-1.6-1.3-3.9-2-6.7-2h-8.9v31.3H228z\n           M220.7,19.1V6.4l7.3,0c2.7,0,4.6,0.6,5.8,1.8c1.2,1.2,1.8,2.7,1.8,4.6c0,1.9-0.6,3.4-1.8,4.6c-1.2,1.2-3.1,1.8-5.8,1.8H220.7z\n           M220.7,34.7V20.6h7.2c1.3,0,2.5,0.1,3.5,0.4c1.1,0.3,2,0.7,2.9,1.2c0.8,0.6,1.5,1.3,1.9,2.2c0.5,0.9,0.7,2,0.7,3.2\n          c0,2.5-0.8,4.3-2.5,5.4c-1.7,1.1-3.9,1.7-6.6,1.7H220.7z M230.2,12.5c0-1.9-1-2.8-3.1-2.8h-1.5v5.7h1.5\n          C229.2,15.4,230.2,14.4,230.2,12.5z M227.1,31.4c3.1,0,4.7-1.2,4.7-3.6c0-2.4-1.6-3.6-4.7-3.6h-1.5v7.2H227.1z\"\n        />\n        <path d=\"M248.3,0L262,0v30.3h11.3v10.8h-25V0z M269.9,36.2v-1.5h-13.8V4.9h-1.6v31.3H269.9z\" />\n        <path\n          d=\"M275.3,0l24.2,0v10.8h-11.1v4.6h10.9v10.2h-10.9v4.7H300v10.8h-24.7V0z M295.4,36.2v-1.5h-12.3V21.2h11.7\n          v-1.5h-11.7V6.4h12.3V4.9h-13.9v31.3H295.4z\"\n        />\n      </g>\n    );\n  }\n}\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction SVGSet(props) {\n  return (\n    <svg className=\"svg\" style={props.style} viewBox=\"0 0 300 42.2\">\n      {props.children}\n    </svg>\n  );\n}\n\nSVGSet.propTypes = {\n  style: PropTypes.object,\n};\n\nexport default SVGSet;\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}